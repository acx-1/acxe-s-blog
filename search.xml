<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[mybatis学习笔记]]></title>
    <url>%2F2018%2F07%2F25%2Fmybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Tips：本笔记的内容主要来自传智播客mybatis学习视频的相关资料，以及一些实操后的补充。如有内容或排版方面的错误，欢迎纠正~篇幅较长，建议结合目录阅读 Mybatis是什么？&emsp;&emsp; MyBatis 本是apache的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis，实质上Mybatis对ibatis进行一些改进。&emsp;&emsp; MyBatis是一个优秀的持久层框架，它对jdbc的操作数据库的过程进行封装，使开发者只需要关注 SQL 本身，而不需要花费精力去处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等jdbc繁杂的过程代码。&emsp;&emsp; Mybatis通过xml或注解的方式将要执行的各种statement（statement、preparedStatemnt、CallableStatement）配置起来，并通过java对象和statement中的sql进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射成java对象并返回。 分析原生态jdbc程序中存在的问题原生态Jdbc程序代码//原生态Jdbc程序代码 public static void** main(String[] args) { Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = **null**; try{ //1、加载数据库驱动 Class.forName(&quot;com.mysql.jdbc.Driver&quot;); //2、通过驱动管理类获取数据库链接 connection =DriverManager._getConnection_(&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8&quot;, &quot;root&quot;, &quot;root&quot;); //3、定义sql语句 ?表示占位符 String sql = &quot;select * from user where username = ?&quot;; //4、获取预处理statement preparedStatement = connection.prepareStatement(sql); //5、设置参数，第一个参数为sql语句中参数的序号（从1开始），第二个参数为设置的参数值 preparedStatement.setString(1, &quot;王五&quot;); //6、向数据库发出sql执行查询，查询出结果集 resultSet = preparedStatement.executeQuery(); //7、遍历查询结果集 while(resultSet.next()){ System._out_.println(resultSet.getString(&quot;id&quot;)+&quot;&quot;+resultSet.getString(&quot;username&quot;)); } } catch(Exception e) { e.printStackTrace(); }finally{ //8、释放资源 if(resultSet!=null){ try{ resultSet.close(); } catch(SQLException e) { e.printStackTrace(); } } if(preparedStatement!=null){ try { preparedStatement.close(); } catch(SQLException e) { e.printStackTrace(); } } if(connection!=null){ try{ connection.close(); } catch (SQLException e) { e.printStackTrace(); } } } } Jdbc问题总结 数据库连接频繁开启和关闭，会严重影响数据库的性能。 代码中存在硬编码，分别是数据库部分的硬编码和SQL执行部分的硬编码。 Mybatis框架原理（核心）框架图 分析结论 mybatis配置文件，包括Mybatis全局配置文件和Mybatis映射文件，其中全局配置文件配置了数据源、事务等信息；映射文件配置了SQL执行相关的信息。 mybatis通过读取配置文件信息（全局配置文件和映射文件），构造出SqlSessionFactory，即会话工厂。 通过SqlSessionFactory，可以创建SqlSession即会话。Mybatis是通过SqlSession来操作数据库的。 SqlSession本身不能直接操作数据库，它是通过底层的Executor执行器接口来操作数据库的。Executor接口有两个实现类，一个是普通执行器，一个是缓存执行器（默认）。 Executor执行器要处理的SQL信息是封装到一个底层对象MappedStatement中。该对象包括：SQL语句、输入参数映射信息、输出结果集映射信息。其中输入参数和输出结果的映射类型包括java的简单类型、HashMap集合对象、POJO对象类型。 Mybatis入门程序Mybatis课程的所有代码程序将通过一个订单商品案例来进行讲解。 需求&emsp;&emsp; 对用户信息的增删改查操作。 根据用户ID来查询用户信息； 根据用户名称来模糊查询用户信息列表； 添加用户 删除用户（练习） 修改用户（练习） 环境准备 Jdk环境：jdk1.7.0_72 Ide环境：eclipse indigo 数据库环境：MySQL 5.1 Mybatis：3.2.7 数据库初始化数据库脚本 执行sql_table.sql脚本，创建数据库表； 执行sql_data.sql初始化测试数据。 数据库表订单商品案例的数据库脚本中，总共包含四张表，其中入门程序只使用user表.用户表的表结构如下： 下载mybatismybaits的代码由github.com管理，下载地址：https://github.com/mybatis/mybatis-3/releases Lib：mybatis的依赖包 Mybatis-3.2.7.jar：mybatis的核心包 Mybatis-3.2.7.pdf：mybatis的使用指南 工程搭建（三步）第一步：创建java工程用eclipse创建一个java工程，jdk使用1.7.0_72。 第二步：加入jar包加入以下四部分jar包，其中junit的jar包，是非必须的。 Mybatis核心包:mybaties-3.2.7.jar Mybatis依赖包 MySQL驱动包: mysql-connector-* Junit单元测试包（单元测试需要的包）:junit-4.9.jar 第三步：添加log4j.properties文件Mybatis使用的日志包是log4j的，所以需要添加log4j.properties。在classpath下创建log4j.properties如下： //文件内容可以从mybatis-3.2.7.pdf中拷贝 # Global logging configuration log4j.rootLogger=DEBUG, stdout # Console output... log4j.appender.stdout=org.apache.log4j.ConsoleAppender log4j.appender.stdout.layout=org.apache.log4j.PatternLayout log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n 日志级别在开发阶段设置成DEBUG，在生产阶段设置成INFO或者ERROR。 编程步骤 创建PO类，根据需求创建； 创建全局配置文件SqlMapConfig.xml； 编写映射文件； 加载映射文件，在SqlMapConfig.xml中进行加载； 编写测试程序，即编写Java代码，连接并操作数据库。 &emsp; 思路： 读取配置文件； 通过SqlSessionFactoryBuilder创建SqlSessionFactory会话工厂。 通过SqlSessionFactory创建SqlSession。 调用SqlSession的操作数据库方法。 关闭SqlSession。 代码开发创建PO类&emsp; 创建的po类的属性要和数据库中表的列名一致（如果表中的列名是带有下划线，那么po类中对应的的属性名要采用驼峰式命名）&emsp;User.java类如下： //Public class User { private int id; private String username;// 用户姓名 private String sex;// 性别 private Date birthday;// 生日 private String address;// 地址 get/set…… 创建SqlMapConfig.xml配置文件&emsp; 在classpath下，创建SqlMapConfig.xml文件 //SqlMapConfig.xml（文件头可以从mybatis-3.2.7.pdf文档的2.1.2小节中拷贝）： &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt; &lt;configuration&gt; &lt;!-- 配置mybatis的环境信息 --&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;!-- 配置JDBC事务控制，由mybatis进行管理 --&gt; &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt; &lt;!-- 配置数据源，采用dbcp连接池 --&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;/configuration&gt; 需求开发&emsp;在classpath下，创建sqlmap文件夹。在sqlmap目录下，创建User.xml映射文件。 //Mybatis的映射文件头（可以从mybatis-3.2.7.pdf文件中拷贝）： &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; 根据用户ID来查询用户信息编写映射文件&emsp;在User.xml中添加以下代码： //&lt;!-- namespace：命名空间，它的作用就是对SQL进行分类化管理，可以理解为SQL隔离 注意：使用mapper代理开发时，namespace有特殊且重要的作用 --&gt; &lt;mapper namespace=&quot;test&quot;&gt; &lt;!-- 根据用户ID，查询用户信息 --&gt; &lt;!-- [id]：statement的id，要求在命名空间内唯一 [parameterType]：入参的java类型 [resultType]：查询出的单条结果集对应的java类型 [#{}]： 表示一个占位符? [#{id}]：表示该占位符待接收参数的名称为id。注意：如果参数为简单类型时，#{}里面的参数名称可以是任意定义 --&gt; &lt;select id=&quot;findUserById&quot; parameterType=&quot;int&quot; resultType=&quot;cn.itcast.mybatis.po.User&quot;&gt; SELECT * FROM USER WHERE id = #{id} &lt;/select&gt; &lt;/mapper&gt; 加载映射文件//在SqlMapConfig.xml中，添加以下代码： &lt;!-- 加载mapper --&gt; &lt;mappers&gt; &lt;mapper resource=&quot;sqlmap/User.xml&quot;/&gt; &lt;/mappers&gt; 编写测试程序//public class MybatisFirst { @Test public void findUserByIdTest() throws Exception{ //1、读取配置文件 String resource = &quot;SqlMapConfig.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); //2、根据配置文件创建SqlSessionFactory SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); //3、SqlSessionFactory创建SqlSession SqlSession sqlSession = sqlSessionFactory.openSession(); //4、SqlSession执行statement，并返回映射结果 //第一个参数：statement的id，建议：namespace.statementId（确保唯一） //第二个参数：入参的值，它的类型要和映射文件中对应的statement的入参类型一致 User user = sqlSession.selectOne(&quot;findUserById&quot;, 1); //打印输出结果集 System.out.println(user); //5、关闭SqlSession sqlSession.close(); } } 根据用户名称来模糊查询用户信息列表编写映射文件//在User.xml中，添加以下内容 &lt;!-- 根据用户名称模糊查询用户信息列表 --&gt; &lt;!-- [${}]：表示拼接SQL字符串 [${value}]：表示要拼接的是简单类型参数。 注意： 1、如果参数为简单类型时，${}里面的参数名称必须为value 2、${}会引起SQL注入，一般情况下不推荐使用。但是有些场景必须使用${}，比如order by ${colname} --&gt; &lt;select id=&quot;findUsersByName&quot; parameterType=&quot;String&quot; resultType=&quot;cn.itcast.mybatis.po.User&quot;&gt; SELECT * FROM USER WHERE username LIKE &apos;%${value}%&apos; &lt;/select&gt; 加载映射文件//已配置，此处无需再次配置 编写测试程序//@Test public void findUsersByNameTest() throws Exception { // 1、读取配置文件 String resource = &quot;SqlMapConfig.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); // 2、根据配置文件创建SqlSessionFactory SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); // 3、SqlSessionFactory创建SqlSession SqlSession sqlSession = sqlSessionFactory.openSession(); // 4、SqlSession执行statement，并返回映射结果 // 第一个参数：statement的id，建议：namespace.statementId（确保唯一） // 第二个参数：入参的值，它的类型要和映射文件中对应的statement的入参类型一致 List&lt;User&gt; users = sqlSession.selectList(&quot;test.findUsersByName&quot;, &quot;小明&quot;); // 打印输出结果集 System.out.println(users); // 5、关闭SqlSession sqlSession.close(); } 添加用户编写映射文件//&lt;!-- 添加用户 --&gt; &lt;!-- 如果主键的值是通过MySQL自增机制生成的，那么我们此处不需要再显示的给ID赋值 --&gt; &lt;insert id=&quot;insertUser&quot; parameterType=&quot;cn.itcast.mybatis.po.User&quot;&gt; INSERT INTO USER(username,sex,birthday,address) VALUES (#{username},#{sex},#{birthday},#{address}) &lt;/insert&gt; 加载映射文件//已配置，此处无需再次配置 编写测试程序//注意：增删改操作要对SqlSession执行commit操作。 @Test public void insertUserTest() throws Exception { // 1、读取配置文件 String resource = &quot;SqlMapConfig.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); // 2、根据配置文件创建SqlSessionFactory SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder() .build(inputStream); // 3、SqlSessionFactory创建SqlSession SqlSession sqlSession = sqlSessionFactory.openSession(); // 4、SqlSession执行statement，并返回映射结果 //构建user参数，没有赋值的属性采取默认值 User user = new User(); user.setUsername(&quot;东哥1&quot;); user.setAddress(&quot;清河宝盛西里&quot;); // 第一个参数：statement的id，建议：namespace.statementId（确保唯一） // 第二个参数：入参的值，它的类型要和映射文件中对应的statement的入参类型一致 sqlSession.insert(&quot;insertUser&quot;, user); //切记：增删改操作时，要执行commit操作 sqlSession.commit(); // 5、关闭SqlSession sqlSession.close(); } 主键返回之MySQL自增主键思路： MySQL自增主键，是指在insert之前MySQL会自动生成一个自增的主键。 我们可以通过MySQL的函数获取到刚插入的自增主键:LAST_INSERT_ID() 这个函数是在insert语句之后去调用。 //修改映射文件： SELECT LAST_INSERT_ID() INSERT INTO USER(username,sex,birthday,address) VALUES (#{username},#{sex},#{birthday},#{address}) 主键返回之MySQL函数UUID// 注意：使用mysql的uuid()函数生成主键，需要修改表中id字段类型为string，长度设置成35位。 &lt;!-- 添加用户之UUID主键返回 --&gt; &lt;!-- [uuid]：MySQL的函数，生成的主键是35位的字符串，所以使用它时要修改id的类型为字符类型 注意： 1、此时order采用BEFORE，因为需要先生成出主键，再执行insert语句 2、显式的给ID赋值 --&gt; &lt;insert id=&quot;insertUser&quot; parameterType=&quot;cn.itcast.mybatis.po.User&quot;&gt; &lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;string&quot; order=&quot;BEFORE&quot;&gt; SELECT UUID() &lt;/selectKey&gt; INSERT INTO USER(id,username,sex,birthday,address) VALUES (#{id},#{username},#{sex},#{birthday},#{address}) &lt;/insert&gt; 主键返回之Oracle序列返回//&lt;!-- 添加用户之sequence返回 --&gt; &lt;!-- 通过Oracle的sequence获取主键方式与MySQL的uuid方式基本一致 --&gt; &lt;insert id=&quot;insertUser&quot; parameterType=&quot;cn.itcast.mybatis.po.User&quot;&gt; &lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;int&quot; order=&quot;BEFORE&quot;&gt; SELECT user_seq.nextval() FROM dual &lt;/selectKey&gt; INSERT INTO USER(id,username,sex,birthday,address) VALUES (#{id},#{username},#{sex},#{birthday},#{address}) &lt;/insert&gt; 删除用户编写映射文件//&lt;!-- 根据ID删除用户 --&gt; &lt;delete id=&quot;deleteUser&quot; parameterType=&quot;int&quot;&gt; DELETE FROM USER WHERE id= #{id} &lt;/delete&gt; 加载映射文件//已配置，此处无需再次配置。 编写测试程序//@Test public void deleteUserTest() throws Exception{ // 1、读取配置文件 String resource = &quot;SqlMapConfig.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); // 2、根据配置文件创建SqlSessionFactory SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder() .build(inputStream); // 3、SqlSessionFactory创建SqlSession SqlSession sqlSession = sqlSessionFactory.openSession(); // 4、SqlSession执行statement，并返回映射结果 // 第一个参数：statement的id，建议：namespace.statementId（确保唯一） // 第二个参数：入参的值，它的类型要和映射文件中对应的statement的入参类型一致 sqlSession.delete(&quot;test.deleteUser&quot;, 30); //切记：增删改操作时，要执行commit操作 sqlSession.commit(); // 5、关闭SqlSession sqlSession.close(); } 修改用户编写映射文件//&lt;!-- 根据传入的用户信息修改用户 --&gt; &lt;update id=&quot;updateUser&quot; parameterType=&quot;cn.itcast.mybatis.po.User&quot;&gt; UPDATE USER SET username = #{username},sex=#{sex} WHERE id=#{id} &lt;/update&gt; 加载映射文件//已配置，此处无需再次配置。 编写测试程序//@Test public void updateUserTest() throws Exception{ // 1、读取配置文件 String resource = &quot;SqlMapConfig.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); // 2、根据配置文件创建SqlSessionFactory SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); // 3、SqlSessionFactory创建SqlSession SqlSession sqlSession = sqlSessionFactory.openSession(); // 4、SqlSession执行statement，并返回映射结果 //构建user参数，没有赋值的属性采取默认值 User user = new User(); user.setId(28); user.setUsername(&quot;东哥11&quot;); user.setAddress(&quot;清河宝盛西里&quot;); // 第一个参数：statement的id，建议：namespace.statementId（确保唯一） // 第二个参数：入参的值，它的类型要和映射文件中对应的statement的入参类型一致 sqlSession.update(&quot;test.updateUser&quot;, user); //切记：增删改操作时，要执行commit操作 sqlSession.commit(); // 5、关闭SqlSession sqlSession.close(); } 小结parameterType和resultType parameterType指定输入参数的java类型，可以填写别名或Java类的全限定名。 resultType指定输出结果的java类型，可以填写别名或Java类的全限定名。 #{}和${} #{}：相当于预处理中的占位符？。 #{}里面的参数表示接收java输入参数的名称。 #{}可以接受HashMap、简单类型、POJO类型的参数。 当接受简单类型的参数时，#{}里面可以是value，也可以是其他。 #{}可以防止SQL注入。 ${}：相当于拼接SQL串，对传入的值不做任何解释的原样输出。 ${}会引起SQL注入，所以要谨慎使用。 ${}可以接受HashMap、简单类型、POJO类型的参数。 当接受简单类型的参数时，${}里面只能是value。 selectOne和selectList selectOne：只能查询0或1条记录，大于1条记录的话，会报错； selectList：可以查询0或N条记录 Mybatis开发dao&emsp;&emsp;Mybatis在项目中主要使用的地方就是开发dao（数据访问层），所以下面讲解一下mybatis开发dao的方法。有两种方式：原始dao开发方式、mapper代理开发方式（推荐）。 需求 根据用户ID来查询用户信息； 根据用户名称来模糊查询用户信息列表； 添加用户； 原始dao开发方式思路 程序员需要写dao接口和dao实现类。 编程步骤 根据需求创建po类 编写全局配置文件 根据需求编写映射文件 加载映射文件 编写dao接口 编写dao实现类 编写测试代码 程序编写&emsp;&emsp;步骤中的1、2、3、4都在入门程序中进行了编写，此处不需要重新编写。 开发dao接口//public interface UserDao { public User findUserById(int id);//根据用户ID来查询用户信息 public List&lt;User&gt; findUsersByName(String username);//根据用户名称来模糊查询用户信息列表 public void insertUser(User user);//添加用户 } 开发dao实现类SqlSession使用范围&emsp;&emsp;通过入门程序，大家可以看出，在测试代码中，有大量的重复代码。所以我们第一反应就是想给它抽取出共性的部分，但是SqlSession、SqlSessionFactory、SqlSessionFactoryBuilder有着各自的生命周期，因为这些生命周期的不同，抽取时要有针对性的处理。 &emsp;&emsp;所以在抽取之前，我们先来了解并总结下它们三个的生命周期。 SqlSessionFactoryBuilder &emsp;&emsp;它的作用只是通过配置文件创建SqlSessionFactory，所以只要创建出SqlSessionFactory，它就可以销毁了。所以说，它的生命周期是在方法之内。 SqlSessionFactory &emsp;&emsp;它的作用是创建SqlSession的工厂，工厂一旦创建，除非应用停掉，不要销毁。所以说它的生命周期是在应用范围内。这里可以通过单例模式来管理它。&emsp;&emsp;在mybatis整合spring之后，最好的处理方式是把SqlSessionFactory交由spring来做单例管理。 SqlSession &emsp;&emsp;SqlSession是一个面向用户（程序员）的接口，它的默认实现是DefaultSqlSession。&emsp;&emsp;Mybatis是通过SqlSession来操作数据库的。SqlSession中不仅包含要处理的SQL信息，还包括一些数据信息，所以说它是线程不安全的，因此它最佳的生命周期范围是在方法体之内。 Dao实现类代码 需要向dao实现类中注入SqlSessionFactory，在方法体内通过SqlSessionFactory创建SqlSession 要注意SqlSession和SqlSessionFactory的生命周期。 //public class UserDaoImpl implements UserDao { //注入SqlSessionFactory private SqlSessionFactory sqlSessionFactory; //使用构造方法来初始化SqlSessionFactory public UserDaoImpl(SqlSessionFactory sqlSessionFactory){ this.sqlSessionFactory = sqlSessionFactory; } @Override public User findUserById(int id) { //通过工厂，在方法内部获取SqlSession，这样就可以避免线程不安全 SqlSession sqlSession = sqlSessionFactory.openSession(); //返回结果集 return sqlSession.selectOne(&quot;test.findUserById&quot;, id); } @Override public List&lt;User&gt; findUsersByName(String username) { //通过工厂，在方法内部获取SqlSession，这样就可以避免线程不安全 SqlSession sqlSession = sqlSessionFactory.openSession(); return sqlSession.selectList(&quot;test.findUsersByName&quot;, username); } @Override public void insertUser(User user) { //通过工厂，在方法内部获取SqlSession，这样就可以避免线程不安全 SqlSession sqlSession = sqlSessionFactory.openSession(); sqlSession.insert(&quot;test.insertUser&quot;, user); } } 编写测试代码//public class UserDaoTest { //声明全局的SqlSessionFactory private SqlSessionFactory sqlSessionFactory; @Before public void setUp() throws Exception { // 1、读取配置文件 String resource = &quot;SqlMapConfig.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); // 2、根据配置文件创建SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); } @Test public void testFindUserById() { //构造UserDao对象 UserDao userDao = new UserDaoImpl(sqlSessionFactory); //调用UserDao对象的方法 User user = userDao.findUserById(1); System.out.println(user); } @Test public void testFindUsersByName() { //构造UserDao对象 UserDao userDao = new UserDaoImpl(sqlSessionFactory); //调用UserDao对象的方法 List&lt;User&gt; list = userDao.findUsersByName(&quot;小明&quot;); System.out.println(list); } @Test public void testInsertUser() { //构造UserDao对象 UserDao userDao = new UserDaoImpl(sqlSessionFactory); //构造User对象 User user = new User(); user.setUsername(&quot;东哥3&quot;); user.setAddress(&quot;清河宝盛西里3&quot;); //调用UserDao对象的方法 userDao.insertUser(user); System.out.println(user.getId()); } } 问题总结&emsp;原始dao开发存在一些问题： 存在一定量的模板代码。比如：通过SqlSessionFactory创建SqlSession；调用SqlSession的方法操作数据库；关闭Sqlsession。 存在一些硬编码。调用SqlSession的方法操作数据库时，需要指定statement的id，这里存在了硬编码。 Mapper代理开发方式（推荐）&emsp;&emsp;Mapper代理的开发方式，程序员只需要编写mapper接口（相当于dao接口）即可。Mybatis会自动的为mapper接口生成动态代理实现类。&emsp;&emsp;不过要实现mapper代理的开发方式，需要遵循一些开发规范。 开发规范 mapper接口的全限定名要和mapper映射文件的namespace的值相同。 mapper接口的方法名称要和mapper映射文件中的statement的id相同；3.mapper接口的方法参数只能有一个，且类型要和mapper映射文件中statement的parameterType的值保持一致。 mapper接口的返回值类型要和mapper映射文件中statement的resultType值或resultMap中的type值保持一致； &emsp;注：通过规范式的开发mapper接口，可以解决原始dao开发当中存在的问题： 模板代码已经去掉； 剩下去不掉的操作数据库的代码，其实就是一行代码。这行代码中硬编码的部分，通过第一和第二个规范就可以解决。 编程步骤 根据需求创建po类 编写全局配置文件 根据需求编写映射文件 加载映射文件 编写mapper接口 编写测试代码 程序编写&emsp;&emsp;步骤中的1、2都在入门程序中进行了编写，此处不需要重新编写。 编写mapper映射文件&emsp;&emsp;重新定义mapper映射文件UserMapper.xml（内容同Users.xml，除了namespace的值），放到新创建的目录mapper下。 //&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt; &lt;!-- namespace：此时用mapper代理方式，它的值必须等于对应mapper接口的全限定名 --&gt; &lt;mapper namespace=&quot;cn.itcast.mybatis.mapper.UserMapper&quot;&gt; &lt;!-- 根据用户ID，查询用户信息 --&gt; &lt;!-- [id]：statement的id，要求在命名空间内唯一 [parameterType]：入参的java类型，可是是简单类型、POJO、HashMap [resultType]：查询出的单条结果集对应的java类型 [#{}]： 表示一个占位符? [#{id}]：表示该占位符待接收参数的名称为id。注意：如果参数为简单类型时，#{}里面的参数名称可以是任意定义 --&gt; &lt;select id=&quot;findUserById&quot; parameterType=&quot;int&quot; resultType=&quot;cn.itcast.mybatis.po.User&quot;&gt; SELECT * FROM USER WHERE id = #{id} &lt;/select&gt; &lt;!-- 根据用户名称模糊查询用户信息列表 --&gt; &lt;!-- [${}]：表示拼接SQL字符串，即不加解释的原样输出 [${value}]：表示要拼接的是简单类型参数。 注意： 1、如果参数为简单类型时，${}里面的参数名称必须为value 2、${}会引起SQL注入，一般情况下不推荐使用。但是有些场景必须使用${}，比如order by ${colname} --&gt; &lt;select id=&quot;findUsersByName&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;cn.itcast.mybatis.po.User&quot;&gt; SELECT * FROM USER WHERE username LIKE &apos;%${value}%&apos; &lt;/select&gt; &lt;!-- 添加用户之自增主键返回（selectKey方式） --&gt; &lt;!-- [selectKey标签]：通过select查询来生成主键 [keyProperty]：指定存放生成主键的属性 [resultType]：生成主键所对应的Java类型 [order]：指定该查询主键SQL语句的执行顺序，相对于insert语句，此时选用AFTER [last_insert_id]：MySQL的函数，要配合insert语句一起使用 --&gt; &lt;insert id=&quot;insertUser&quot; parameterType=&quot;cn.itcast.mybatis.po.User&quot;&gt; &lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;int&quot; order=&quot;AFTER&quot;&gt; SELECT LAST_INSERT_ID() &lt;/selectKey&gt; INSERT INTO USER(username,sex,birthday,address) VALUES (#{username},#{sex},#{birthday},#{address}) &lt;/insert&gt; &lt;/mapper&gt; 加载mapper映射文件//&lt;!-- 加载mapper --&gt; &lt;mappers&gt; &lt;mapper resource=&quot;sqlmap/User.xml&quot;/&gt; &lt;mapper resource=&quot;mapper/UserMapper.xml&quot;/&gt; &lt;/mappers&gt; 编写mapper接口&emsp;&emsp;内容同UserDao接口一样： //public interface UserMapper { //根据用户ID来查询用户信息 public User findUserById(int id); //根据用户名称来模糊查询用户信息列表 public List&lt;User&gt; findUsersByName(String username); //添加用户 public void insertUser(User user); } 编写测试代码//public class UserMapperTest { // 声明全局的SqlSessionFactory private SqlSessionFactory sqlSessionFactory; @Before public void setUp() throws Exception { // 1、读取配置文件 String resource = &quot;SqlMapConfig.xml&quot;; InputStream inputStream = Resources.getResourceAsStream(resource); // 2、根据配置文件创建SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); } @Test public void testFindUserById() { // 创建SqlSession SqlSession sqlSession = sqlSessionFactory.openSession(); // 通过SqlSession，获取mapper接口的动态代理对象 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); // 调用mapper对象的方法 User user = userMapper.findUserById(1); System.out.println(user); // 关闭SqlSession sqlSession.close(); } @Test public void testFindUsersByName() { // 创建SqlSession SqlSession sqlSession = sqlSessionFactory.openSession(); // 通过SqlSession，获取mapper接口的动态代理对象 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); // 调用mapper对象的方法 List&lt;User&gt; list = userMapper.findUsersByName(&quot;小明&quot;); System.out.println(list); // 关闭SqlSession sqlSession.close(); } @Test public void testInsertUser() { // 创建SqlSession SqlSession sqlSession = sqlSessionFactory.openSession(); // 通过SqlSession，获取mapper接口的动态代理对象 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); //构造User对象 User user = new User(); user.setUsername(&quot;东哥4&quot;); user.setAddress(&quot;清河宝盛西里4&quot;); // 调用mapper对象的方法 userMapper.insertUser(user); System.out.println(user.getId()); //执行SqlSession的commit操作 sqlSession.commit(); // 关闭SqlSession sqlSession.close(); } } Mybatis全局配置文件&emsp;&emsp;SqlMapConfig.xml是mybatis的全局配置文件，它的名称可以是任意命名的。 全部配置内容&emsp;SqlMapConfig.xml的配置内容和顺序如下（顺序不能乱）： Properties（属性） Settings（全局参数设置） typeAliases（类型别名） typeHandlers（类型处理器） objectFactory（对象工厂） plugins（插件） environments（环境信息集合） environment（单个环境信息） transactionManager（事物） dataSource（数据源） mappers（映射器） 常用配置详解Properties&emsp;SqlMapConfig.xml文件中可以引用java属性文件中的配置信息&emsp;&emsp;db.properties配置信息如下： //db.driver=com.mysql.jdbc.Driver db.url=jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf8 db.username=root db.password=root SqlMapConfig.xml使用properties标签后，如下所示： //&lt;!-- 通过properties标签，读取java配置文件的内容 --&gt; &lt;properties resource=&quot;db.properties&quot; /&gt; &lt;!-- 配置mybatis的环境信息 --&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;!-- 配置JDBC事务控制，由mybatis进行管理 --&gt; &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt; &lt;!-- 配置数据源，采用dbcp连接池 --&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;${db.driver}&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;${db.url}&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;${db.username}&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;${db.password}&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &emsp;使用${}，可以引用已经加载的java配置文件中的信息。 &emsp;&emsp;注意：mybatis将按照下面的顺序加载属性： Properties标签体内定义的属性首先被读取 Properties引用的属性会被读取，如果发现上面已经有同名的属性了，那后面会覆盖前面的值 parameterType接收的值会最后被读取，如果发现上面已经有同名的属性了，那后面会覆盖前面的值 &emsp;所以说，mybatis读取属性的顺序由高到低分别是：parameterType接收的属性值、properties引用的属性、properties标签内定义的属性。 Settings&emsp;&emsp;mybatis全局配置参数，全局参数将会影响mybatis的运行行为。详细如下： typeAliases&emsp;&emsp;别名是使用是为了在映射文件中，更方便的去指定入参和结果集的类型，不再用写很长的一段全限定名。 mybatis支持的别名 别名 映射的类型 _byte byte _long long _short short _int int _integer int _double double _float float _boolean boolean string String byte Byte long Long short Short int Integer integer Integer double Double float Float boolean Boolean date Date decimal BigDecimal bigdecimal BigDecimal 自定义别名&emsp;&emsp;SqlMapConfig.xml配置信息如下： //&lt;!-- 定义别名 --&gt; &lt;typeAliases&gt; &lt;!-- 单个定义别名 --&gt; &lt;typeAlias type=&quot;cn.itcast.mybatis.po.User&quot; alias=&quot;user&quot;/&gt; &lt;!-- 批量定义别名（推荐） --&gt; &lt;!-- [name]：指定批量定义别名的类包，别名为类名（首字母大小写都可） --&gt; &lt;package name=&quot;cn.itcast.mybatis.po&quot;/&gt; &lt;/typeAliases&gt; mappers&lt;mapper resource=’’/&gt;&emsp;&emsp;使用相对于类路径的资源&emsp;&emsp;&emsp;如：&lt;mapper resource=&quot;sqlmap/User.xml&quot; /&gt; &lt;mapper url=’’/&gt;&emsp;&emsp;使用完全限定路径如：&emsp;&emsp;&emsp;&lt;mapper url=&quot;file:///D:\workspace_spingmvc\mybatis_01\config\sqlmap\User.xml&quot; /&gt; &lt;mapper class=’’/&gt;&emsp;&emsp;使用mapper接口的全限定名&emsp;&emsp;&emsp;如：&lt;mapper class=&quot;cn.itcast.mybatis.mapper.UserMapper&quot;/&gt;注意：此种方法要求mapper接口和mapper映射文件要名称相同，且放到同一个目录下; &lt;package name=’’/&gt;`（推荐）&emsp;&emsp;注册指定包下的所有映射文件&emsp;&emsp;&emsp;如：&lt;package name=&quot;cn.itcast.mybatis.mapper&quot;/&gt;注意：此种方法要求mapper接口和mapper映射文件要名称相同，且放到同一个目录下; Mybatis映射文件（核心）输入映射ParameterType&emsp;&emsp;指定输入参数的java类型，可以使用别名或者类的全限定名。它可以接收简单类型、POJO、HashMap。 传递简单类型&emsp;&emsp;参考入门需求：根据用户ID查询用户信息。 传递POJO对象&emsp;&emsp;参考入门需求：添加用户。 传递POJO包装对象&emsp;&emsp;开发中通过pojo传递查询条件 ，查询条件是综合的查询条件，不仅包括用户查询条件还包括其它的查询条件（比如将用户购买商品信息也作为查询条件），这时可以使用包装对象传递输入参数。 需求&emsp;&emsp;综合查询用户信息，需要传入查询条件复杂，比如（用户信息、订单信息、商品信息）。 定义包装对象&emsp;&emsp;一般User.java类要和数据表表字段一致，最好不要在这里面添加其他字段，学习mybatis的逆向工程时，会根据表结构，生成po类，如果在po类中扩展字段，此时会被覆盖掉。&emsp;&emsp;所以针对要扩展的po类，我们需要创建一个扩展类，来继承它。 &emsp;&emsp;定义POJO包装类： 编写Mapper接口//通过包装类来进行复杂的用户信息综合查询 public List&lt;UserExt&gt; findUserList(UserQueryVO userQueryVO); 编写mapper映射文件&lt;!-- 通过包装类来进行复杂的用户信息综合查询 --&gt; &lt;select id=_&quot;findUserList&quot;_ parameterType=_&quot;userQueryVO&quot;_ resultType=_&quot;userExt&quot;_&gt; SELECT * FROM USER WHERE sex=#{userExt.sex} AND username LIKE &apos;%${userExt.username}%&apos; &lt;/select&gt; 注意：入参的类型变为UserQueryVO、结果集的类型变为UserExt，#{}里面的参数变为UserQueryVO对象中的userExt属性的sex和username子属性。 编写测试代码//@Test public void findUserListTest() { // 创建SqlSession SqlSession sqlSession = sqlSessionFactory.openSession(); // 通过SqlSession，获取mapper接口的动态代理对象 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); //构造userQueryVO对象 UserQueryVO userQueryVO = new UserQueryVO(); // 构造UserExt对象 UserExt userExt = new UserExt(); userExt.setSex(&quot;1&quot;); userExt.setUsername(&quot;小明&quot;); userQueryVO.setUserExt(userExt); // 调用mapper对象的方法 List&lt;UserExt&gt; list = userMapper.findUserList(userQueryVO); System.out.println(list); // 关闭SqlSession sqlSession.close(); } 传递HashMap（练习） 同传递POJO对象一样，map的key相当于pojo的属性。 映射文件&lt;!-- 传递hashmap综合查询用户信息 --&gt; &lt;select id=&quot;findUserByHashmap&quot; parameterType=&quot;hashmap&quot; resultType=&quot;user&quot;&gt; select * from user where id=#{id} and username like &apos;%${username}%&apos; &lt;/select&gt; &emsp;&emsp; 上边引用的是hashmap的key。 测试代码Public void testFindUserByHashmap()throws Exception{ //获取session SqlSession session = sqlSessionFactory.openSession(); //获限mapper接口实例 UserMapper userMapper = session.getMapper(UserMapper.class); //构造查询条件Hashmap对象 HashMap&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;(); map.put(&quot;id&quot;, 1); map.put(&quot;username&quot;, &quot;管理员&quot;); //传递Hashmap对象查询用户列表 List&lt;User&gt;list = userMapper.findUserByHashmap(map); //关闭session session.close(); } &emsp;异常测试： 传递的map中的key和sql中解析的key不一致。 测试结果没有报错，只是通过key获取值为空。 输出映射resultType&emsp;&emsp;先看下原先resultType作为输出结果映射时，它的特点，如何再把列名改为别名，看看是否还能不能映射成功。 使用方法 使用resultType进行结果映射时，查询的列名和映射的pojo属性名完全一致，该列才能映射成功。 如果查询的列名和映射的pojo属性名全部不一致，则不会创建pojo对象； 如果查询的列名和映射的pojo属性名有一个一致，就会创建pojo对象。 输出简单类型&emsp;&emsp;当输出结果只有一列时，可以使用ResultType指定简单类型作为输出结果类型。 需求 &emsp;&emsp;综合查询用户总数，需要传入查询条件复杂，比如（用户信息、订单信息、商品信息）。 Mapper映射文件&lt;!-- 综合查询用户信息总数，需要传入查询条件复杂，比如（用户信息、订单信息、商品信息） --&gt; &lt;select id=&quot;findUsersCount&quot; parameterType=&quot;UserQueryVO&quot; resultType=&quot;int&quot;&gt; SELECT count(1) FROM USER WHERE sex = #{userExt.sex} AND username LIKE &apos;%${userExt.username}%&apos; &lt;/select&gt; Mapper接口//综合查询用户信息总数。学习：resultType输出简单类型 public int findUsersCount(UserQueryVO vo); 测试代码//@Test public void testFindUsersCount() { // 创建SqlSession SqlSession sqlSession = sqlSessionFactory.openSession(); // 通过SqlSession，获取mapper接口的动态代理对象 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); //构造userQueryVO对象 UserQueryVO userQueryVO = new UserQueryVO(); // 构造UserExt对象 UserExt userExt = new UserExt(); userExt.setSex(&quot;1&quot;); userExt.setUsername(&quot;小明&quot;); userQueryVO.setUserExt(userExt); int count = mapper.findUsersCount(userQueryVO); System.out.println(count); // 关闭SqlSession sqlSession.close(); } 输出POJO单个对象和列表&emsp;注意：输出单个pojo对象和pojo列表（盛放pojo对象）时，mapper映射文件中的resultType的类型是一样的，mapper接口的方法返回值不同。 Mapper映射文件&emsp;&emsp;Mapper映射文件是同一个 &lt;select id=&quot;findUsersByName&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;cn.itcast.mybatis.po.User&quot;&gt; SELECT * FROM USER WHERE username LIKE &apos;%${value}%&apos; &lt;/select&gt; Mapper接口&emsp;&emsp;下面看下mapper接口的不同之处 输出单个pojo对象 //根据用户名称来模糊查询用户信息 public User findUsersByName(String username); 输出pojo列表 //根据用户名称来模糊查询用户信息列表 public List findUsersByName(String username); 总结：同样的mapper映射文件，返回单个对象和对象列表时，mapper接口在生成动态代理的时候，会根据返回值的类型，决定调用selectOne方法还是selectList方法。 resultMap&emsp;&emsp;resultMap可以进行高级结果映射（一对一、一对多映射）。 使用方法&emsp;&emsp;如果查询出来的列名和属性名不一致，通过定义一个resultMap将列名和pojo属性名之间作一个映射关系。 定义resultMap 使用resultMap作为statement的输出映射类型。 需求&emsp;&emsp;把下面SQL的输出结果集进行映射 SELECT id id_,username username_,sex sex_ FROM USER WHERE id = 1 Mapper映射文件&emsp;&emsp;定义resultMap： &lt;!-- 定义resultMap --&gt; &lt;!-- [id]：定义resultMap的唯一标识 [type]：定义该resultMap最终映射的pojo对象 [id标签]：映射结果集的唯一标识列，如果是多个字段联合唯一，则定义多个id标签 [result标签]：映射结果集的普通列 [column]：SQL查询的列名，如果列有别名，则该处填写别名 [property]：pojo对象的属性名 --&gt; &lt;resultMap type=&quot;user&quot; id=&quot;userResultMap&quot;&gt; &lt;id column=&quot;id_&quot; property=&quot;id&quot;/&gt; &lt;result column=&quot;username_&quot; property=&quot;username&quot;/&gt; &lt;result column=&quot;sex_&quot; property=&quot;sex&quot;/&gt; &lt;/resultMap&gt; &emsp;&emsp;定义statement： &lt;!-- 根据ID查询用户信息（学习resultMap） --&gt; &lt;select id=&quot;findUserByIdResultMap&quot; parameterType=&quot;int&quot; resultMap=&quot;userResultMap&quot;&gt; SELECT id id_,username username_,sex sex_ FROM USER WHERE id = #{id} &lt;/select&gt; Mapper接口定义//根据ID查询用户信息（学习resultMap） public User findUserByIdResultMap(int id); 定义Statement使用resultMap映射结果集时，Mapper接口定义方法的返回值类型为mapper映射文件中resultMap的type类型。 测试代码@Test public void findUserByIdResultMapTest() { // 创建SqlSession SqlSession sqlSession = sqlSessionFactory.openSession(); // 通过SqlSession，获取mapper接口的动态代理对象 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); // 调用mapper对象的方法 User user = userMapper.findUserByIdResultMap(1); System._out_.println(user); // 关闭SqlSession sqlSession.close(); 动态SQL（重点）&emsp;&emsp;通过Mybatis提供的各种动态标签实现动态拼接sql，使得mapper映射文件在编写SQL时更加灵活，方便。常用动态SQL标签有：if、where、foreach； If和where If标签：作为判断入参来使用的，如果符合条件，则把if标签体内的SQL拼接上。注意：用if进行判断是否为空时，不仅要判断null，也要判断空字符串‘’； Where标签：会去掉条件中的第一个and符号。 需求&emsp;&emsp;用户信息综合查询列表和用户信息综合查询总数这两个statement的定义使用动态SQL。 映射文件&lt;!-- 综合查询用户信息，需要传入查询条件复杂，比如（用户信息、订单信息、商品信息） --&gt; &lt;select id=&quot;findUsersByQueryVO&quot; parameterType=&quot;cn.itcast.mybatis.po.QueryUserVO&quot; resultType=&quot;User&quot;&gt; SELECT * FROM USER &lt;where&gt; &lt;if test=&quot;userExt != null&quot;&gt; &lt;if test=&quot;userExt.sex != null and userExt.sex != &apos;&apos;&quot;&gt; AND sex = #{userExt.sex} &lt;/if&gt; &lt;if test=&quot;userExt.username != null and userExt.username != &apos;&apos;&quot;&gt; AND username LIKE &apos;%${userExt.username}%&apos; &lt;/if&gt; &lt;/if&gt; &lt;/where&gt; &lt;/select&gt; &lt;!-- 综合查询用户信息总数，需要传入查询条件复杂，比如（用户信息、订单信息、商品信息） --&gt; &lt;select id=&quot;findUsersCount&quot; parameterType=&quot;QueryUserVO&quot; resultType=&quot;int&quot;&gt; SELECT count(1) FROM USER &lt;where&gt; &lt;if test=&quot;userExt != null&quot;&gt; &lt;if test=&quot;userExt.sex != null and userExt.sex != &apos;&apos;&quot;&gt; AND sex = #{userExt.sex} &lt;/if&gt; &lt;if test=&quot;userExt.username != null and userExt.username != &apos;&apos;&quot;&gt; AND username LIKE &apos;%${userExt.username}%&apos; &lt;/if&gt; &lt;/if&gt; &lt;/where&gt; &lt;/select&gt; Mapper接口//通过包装类来进行复杂的用户信息综合查询 public List&lt;UserExt&gt; findUserList(UserQueryVO userQueryVO); //综合查询用户总数 public int findUsersCount(UserQueryVO userQueryVO); 测试代码&emsp;&emsp;不传用户名： &emsp;&emsp;输出的SQL如下（也不包含用户名）： &emsp;通过测试可以得知，打印出的SQL语句确实会随着条件的满足情况而不一样。 SQL片段&emsp;&emsp;Mybatis提供了SQL片段的功能，可以提高SQL的可重用性。 定义SQL片段&emsp;&emsp;使用sql标签来定义一个SQL片段： //&lt;!-- 定义SQL片段 --&gt; &lt;!-- [sql标签]：定义一个SQL片段 [id]：SQL片段的唯一标识 建议： 1、SQL片段中的内容最好是以单表来定义 2、如果是查询字段，则不要写上SELECT 3、如果是条件语句，则不要写上WHERE --&gt; &lt;sql id=_&quot;select_user_where&quot;_&gt; &lt;if test=_&quot;userExt != null&quot;_&gt; &lt;if test=_&quot;userExt.sex != null and userExt.sex != &apos;&apos;&quot;_&gt; AND sex = #{userExt.sex} &lt;/if&gt; &lt;if test=_&quot;userExt.username != null and userExt.username != &apos;&apos;&quot;_&gt; AND username LIKE &apos;%${userExt.username}%&apos; &lt;/if&gt; &lt;/if&gt; &lt;/sql&gt; 引用SQL片段&emsp;&emsp;使用&lt;include refid=’’ /&gt; 来引用SQL片段： //&lt;!-- 根据用户id来查询用户信息（使用SQL片段） --&gt; &lt;!-- [include标签]：引用已经定义好的SQL片段 [refid]：引用的SQL片段id --&gt; &lt;select id=_&quot;findUserList&quot;_ parameterType=_&quot;userQueryVO&quot;_ resultType=_&quot;userExt&quot;_&gt; SELECT * FROM USER &lt;where&gt; &lt;include refid=_&quot;select_user_where&quot;_/&gt; &lt;/where&gt; &lt;/select&gt; &lt;!-- 综合查询用户信息总数，需要传入查询条件复杂，比如（用户信息、订单信息、商品信息） --&gt; &lt;select id=_&quot;findUsersCount&quot;_ parameterType=_&quot;QueryUserVO&quot;_ resultType=_&quot;int&quot;_&gt; SELECT count(1) FROM USER &lt;where&gt; &lt;include refid=_&quot;select_user_where&quot;_/&gt; &lt;/where&gt; &lt;/select&gt; Foreach&emsp;&emsp;向sql传递数组或List时，mybatis使用foreach解析数组里的参数并拼接到SQL中。 传递pojo对象中的List集合需求&emsp;&emsp;在用户查询列表和查询总数的statement中增加多个id输入查询。 SQLSELECT * FROM user WHERE id IN (1,10,16) 定义pojo中的List属性 映射文件//&lt;!-- [foreach标签]：表示一个foreach循环 --&gt; &lt;!-- [collection]：集合参数的名称，如果是直接传入集合参数，则该处的参数名称只能填写[list]。 --&gt; &lt;!-- [item]：每次遍历出来的对象 --&gt; &lt;!-- [open]：开始遍历时拼接的串 --&gt; &lt;!-- [close]：结束遍历时拼接的串 --&gt; &lt;!-- [separator]：遍历出的每个对象之间需要拼接的字符 --&gt; &lt;if test=_&quot;idList != null and idList.size &gt; 0&quot;_&gt; &lt;foreach collection=_&quot;idList&quot;_ item=_&quot;id&quot;_ open=_&quot;AND id IN (&quot;_ close=_&quot;)&quot;_ separator=_&quot;,&quot;_&gt; #{id} &lt;/foreach&gt; &lt;/if&gt; Mapper接口&emsp;&emsp;根据用户ID的集合查询用户列表（学习foreach标签之通过POJO对象传ID集合）public List&lt;UserExt&gt; findUserList(UserQueryVO vo); 测试代码//@Test public void testFindUserList() { // 创建SqlSession SqlSession sqlSession = sqlSessionFactory.openSession(); // 通过SqlSession，获取mapper接口的动态代理对象 UserMapper mapper = sqlSession.getMapper(UserMapper.class); // 构造QueryUserVO对象 QueryUserVO vo = new QueryUserVO(); // UserExt ext = new UserExt(); // ext.setUsername(&quot;小明&quot;); // ext.setSex(&quot;1&quot;); // vo.setUserExt(ext); // 创建用户ID集合，然后设置到QueryUserVO对象中 List&lt;Integer&gt; idList = new ArrayList&lt;Integer&gt;(); idList.add(1); idList.add(10); idList.add(16); vo.setIdList(idList); // 调用mapper代理对象的方法 List&lt;UserExt&gt; list = mapper.findUserList(vo); System._out_.println(list); // 关闭SqlSession sqlSession.close(); } 直接传递List集合需求&emsp;&emsp;根据用户ID的集合查询用户列表 SQLSELECT * FROM user WHERE id IN (1,10,16) 映射文件//&lt;!-- 根据用户ID的集合查询用户列表（学习foreach标签之直接传ID集合） --&gt; &lt;!-- [foreach标签]：表示一个foreach循环 [collection]：集合参数的名称，如果是直接传入集合参数，则该处的参数名称只能填写[list]。 [item]：定义遍历集合之后的参数名称 [open]：开始遍历之前需要拼接的SQL串 [close]：结束遍历之后需要拼接的SQL串 [separator]：遍历出的每个对象之间需要拼接的字符 --&gt; &lt;select id=&quot;findUsersByIdList&quot; parameterType=&quot;java.util.List&quot; resultType=&quot;user&quot;&gt; SELECT * FROM USER &lt;where&gt; &lt;if test=&quot;list!= null and list.size &gt; 0&quot;&gt; &lt;foreach collection=&quot;list&quot; item=&quot;id&quot; open=&quot;AND id IN (&quot; close=&quot;)&quot;_separator=&quot;,&quot;&gt; #{id} &lt;/foreach&gt; &lt;/if&gt; &lt;/where&gt; &lt;/select&gt; Mapper接口//根据用户ID的集合查询用户列表（学习foreach标签之直接传ID集合) public List&lt;User&gt; findUsersByIdList (List&lt;Integer&gt; idList); 测试代码//@Test public void findUsersByIdListTest() { // 创建SqlSession SqlSession sqlSession = sqlSessionFactory.openSession(); // 通过SqlSession，获取mapper接口的动态代理对象 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); // 构造List&lt;Integer&gt;集合 List&lt;Integer&gt; idList = new ArrayList&lt;Integer&gt;(); idList.add(1); idList.add(10); idList.add(16); // 调用mapper对象的方法 List&lt;User&gt; list = userMapper.findUsersByIdList (idList); System.out.println(list); // 关闭SqlSession sqlSession.close(); } mybatis与hibernate的区别及各自应用场景&emsp;Mybatis技术特点： 通过直接编写SQL语句，可以直接对SQL进行性能的优化； 学习门槛低，学习成本低。只要有SQL基础，就可以学习mybatis，而且很容易上手； 由于直接编写SQL语句，所以灵活多变，代码维护性更好。 不能支持数据库无关性，即数据库发生变更，要写多套代码进行支持，移植性不好。 需要编写结果映射。 &emsp;Hibernate技术特点： 标准的orm框架，程序员不需要编写SQL语句。 具有良好的数据库无关性，即数据库发生变化的话，代码无需再次编写。 学习门槛高，需要对数据关系模型有良好的基础，而且在设置OR映射的时候，需要考虑好性能和对象模型的权衡。 程序员不能自主的去进行SQL性能优化。 &emsp;Mybatis应用场景： &emsp;&emsp;需求多变的互联网项目，例如电商项目。 &emsp;Hibernate应用场景： &emsp;&emsp;需求明确、业务固定的项目，例如OA项目、ERP项目等。 关联查询映射分析数据模型思路 每张表记录的数据内容&emsp;&emsp;分模块对每张表记录的内容进行熟悉，相当于你学习系统需求（功能）的过程。 每张表重要的字段&emsp;&emsp;主键、外键、非空字段 数据库级别表与表的关系&emsp;&emsp;外键关系 表与表之间的业务关系&emsp;&emsp;在分析表与表之间的业务关系时一定要建立 在某个业务意义基础上去分析。&emsp;&emsp;图形分析: 数据库表之间有外键关系的业务关系user和orders：&emsp;&emsp;user—-&gt;orders：一个用户可以创建多个订单，一对多&emsp;&emsp;orders—&gt;user：一个订单只由一个用户创建，一对一 orders和orderdetail：&emsp;&emsp;orders—&gt;orderdetail：一个订单可以包括 多个订单明细，因为一个订单可以购买多个商品，每个商品的购买信息在orderdetail记录，一对多关系&emsp;&emsp;orderdetail–&gt; orders：一个订单明细只能包括在一个订单中，一对一 orderdetail和itesm：&emsp;&emsp;orderdetail—&gt;itesms：一个订单明细只对应一个商品信息，一对一&emsp;&emsp;items—&gt; orderdetail:一个商品可以包括在多个订单明细 ，一对多 数据库表之间没有外键关系的业务关系Orders和items：//这两张表没有直接的外键关系，通过业务及数据库的间接关系分析出它们是多对多的关系。&emsp;&emsp;Orders—&gt; orderdetai—&gt;items：一个订单可以有多个订单明细，一个订单明细对应一个商品，所以一个订单对应多个商品&emsp;&emsp;Items—&gt;orderdetail—&gt;orders：一个商品可以对应多个订单明细，一个订单明细对应一个订单，所以一个商品对应多个订单 User和items：//这两张表没有直接的外键关系，通过业务及数据库的间接关系分析出它们是多对多的关系。&emsp;&emsp;User—&gt;orders—&gt;orderdetail—&gt;items：一个用户有多个订单，一个订单有多个订单明细、一个订单明细对应一个商品，所以一个用户对应多个商品&emsp;&emsp;Items—&gt;orderdetail—&gt;orders—&gt;user：一个商品对应多个订单明细，一个订单明细对应一个订单，一个订单对应一个用户，所以一个商品对应多个用户 一对一查询需求&emsp;&emsp;查询订单信息，关联查询创建订单的用户信息 SQL语句&emsp;&emsp;确定查询的主表：订单表&emsp;&emsp;确定查询的关联表：用户表&emsp;&emsp;关联查询使用内链接？还是外链接？ //Select Orders.id, Orders.user_id, orders.number, orders.createtime, orders.note, user.username, user.address from orders,user where orders.user_id = user.id resultType&emsp;&emsp;复杂查询时，单表对应的po类已不能满足输出结果集的映射。所以要根据需求建立一个扩展类来作为resultType的类型。 创建po类//通过此类映射订单和用户查询的结果，让此类继承包括 字段较多的pojo类 public class OrdersExt extends Orders{ //添加用户属性 /*USER.username, USER.address */ private String username; private String address; public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } } 编写mapper接口&emsp;&emsp;创建OrdersMapper接口类，在类中添加以下内容： // 进行订单信息查询，包括用户的名称和地址信息 public List&lt;OrdersExt&gt; findOrdersUser(); 编写映射文件//&lt;mapper namespace=&quot;cn.itcast.mybatis.mapper.OrdersMapper&quot;&gt; &lt;!-- 定义查询订单表列名的SQL片段 --&gt; &lt;sql id=&quot;select_orders&quot;&gt; Orders.id, Orders.user_id, orders.number, orders.createtime, orders.note &lt;/sql&gt; &lt;!-- 定义查询用户表列名的SQL片段 --&gt; &lt;sql id=&quot;select_user&quot;&gt; user.username, user.address &lt;/sql&gt; &lt;!-- 进行订单信息查询，包括用户的名称和地址信息 --&gt; &lt;select id=&quot;findOrdersUser&quot; resultType=&quot;OrdersExt&quot;&gt; Select &lt;include refid=&quot;select_orders&quot; /&gt; &lt;include refid=&quot;select_user&quot;&gt;&lt;/include&gt; from orders,user where orders.user_id = user.id &lt;/select&gt; &lt;/mapper&gt; 加载映射文件//&lt;!-- 批量加载mapper文件，需要mapper接口文件和mapper映射文件名称相同且在同一个包下 --&gt; &lt;package name=&quot;cn.itcast.mybatis.mapper&quot;/&gt; 编写测试代码//@Test public void testFindOrdersUser() { // 创建sqlSession SqlSession sqlSession = sqlSessionFactory.openSession(); // 通过SqlSession构造usermapper的代理对象 OrdersMapper ordersMapper = sqlSession.getMapper(OrdersMapper.class); // 调用usermapper的方法 List&lt;OrdersExt&gt; list = ordersMapper.findOrdersUser(); System.out.println(list); // 释放SqlSession sqlSession.close(); } resultMap修改po类&emsp;&emsp;在Orders类中，添加User对象 //public class Orders { private Integer id; private Integer userId; private String number; private Date createtime; private String note; //用户信息 private User user; 编写mapper接口 // 进行订单信息查询，包括用户的名称和地址信息（resultMap） public List&lt;OrdersExt&gt; findOrdersUserRstMap(); 编写映射文件//&lt;!-- 进行订单信息查询，包括用户的名称和地址信息 (ResultMap) --&gt; &lt;select id=&quot;findOrdersUserRstMap&quot; resultMap=&quot;OrdersUserRstMap&quot;&gt; Select &lt;include refid=&quot;select_orders&quot; /&gt; , &lt;include refid=&quot;select_user&quot;&gt;&lt;/include&gt; from orders,user where orders.user_id = user.id &lt;/select&gt; &lt;!-- 定义orderUserResultMap --&gt; &lt;resultMap type=&quot; cn.itcast.mybatis.po.Orders&quot; id=&quot;OrdersUserRstMap&quot;&gt; &lt;id column=&quot;id&quot; property=&quot;id&quot; /&gt; &lt;result column=&quot;user_id&quot; property=&quot;userId&quot; /&gt; &lt;result column=&quot;number&quot; property=&quot;number&quot; /&gt; &lt;result column=&quot;createtime&quot; property=&quot;createtime&quot; /&gt; &lt;result column=&quot;note&quot; property=&quot;note&quot; /&gt; &lt;!-- 映射一对一关联关系的用户对象--&gt; &lt;!-- property：指定关联对象要映射到Orders的哪个属性上 javaType：指定关联对象所要映射的java类型 --&gt; &lt;!-- id标签：指定关联对象结果集的唯一标识，很重要，不写不会报错，但是会影响性能 --&gt; &lt;association property=&quot;user&quot; javaType=&quot;cn.itcast.mybatis.po.User&quot;&gt; &lt;id column=&quot;user_id&quot; property=&quot;id&quot; /&gt; &lt;result column=&quot;username&quot; property=&quot;username&quot; /&gt; &lt;result column=&quot;address&quot; property=&quot;address&quot; /&gt; &lt;/association&gt; &lt;/resultMap&gt; 编写测试代码//@Test public void testFindOrdersUserRstMap() { // 创建sqlSession SqlSession sqlSession = sqlSessionFactory.openSession(); // 通过SqlSession构造usermapper的代理对象 OrdersMapper ordersMapper = sqlSession.getMapper(OrdersMapper.class); // 调用usermapper的方法 List&lt;Orders&gt; list = ordersMapper.findOrdersUserRstMap(); //此处我们采用debug模式来跟踪代码，然后验证结果集是否正确 System.out.println(list); // 释放SqlSession sqlSession.close(); } 一对一小结实现一对一查询： resultType：使用resultType实现较为简单，如果pojo中没有包括查询出来的列名，需要增加列名对应的属性，即可完成映射。如果没有查询结果的特殊要求建议使用resultType。 resultMap：需要单独定义resultMap，实现有点麻烦，如果对查询结果有特殊的要求，使用resultMap可以完成将关联查询映射pojo的对象属性中。resultMap可以实现延迟加载，resultType无法实现延迟加载。 一对多查询&emsp;&emsp;一对多查询和一对一查询的配置基本类似。只是如果使用resultMap的话，映射一对多关联关系要使用collection标签。 需求&emsp;&emsp;查询订单信息及订单明细信息 SQL语句&emsp;&emsp;确定主查询表：订单表&emsp;&emsp;确定关联查询表：订单明细表&emsp;&emsp;在一对一查询基础上添加订单明细表关联即可。 //Select Orders.id, Orders.user_id, orders.number, orders.createtime, orders.note, user.username, user.address, orderdetail.id detail_id, orderdetail.items_id, orderdetail.items_num from orders,user,orderdetail where orders.user_id = user.id and orders.id = orderdetail.orders_id 分析&emsp;&emsp;使用resultType将上边的 查询结果映射到pojo中，订单信息将会重复。 &emsp;要求：&emsp;&emsp;对orders映射不能出现重复记录。 在orders.java类中添加List detailList属性。最终会将订单信息映射到orders中，订单所对应的订单明细映射到orders中的detailList属性中。 映射成的orders记录数为两条（orders信息不重复）,每个orders中的detailList属性存储了该订单所对应的订单明细集合。 修改PO类&emsp;&emsp;在Orders类中添加以下属性，并提供get/set方法： //订单明细 private List&lt;Orderdetail&gt; detailList; 编写mapper接口// 查询订单信息及订单明细信息（一对多映射之使用resultMap） public List&lt;Orders&gt; findOrdersAndOrderdetailRstMap(); 编写映射文件//&lt;!-- 定义OrdersAndOrderdetailRstMap --&gt; &lt;!-- extends：继承已有的ResultMap，值为继承的ResultMap的唯一标示 --&gt; &lt;resultMap type=&quot;Orders&quot; id=&quot;OrdersAndOrderdetailRstMap&quot; extends=&quot;OrdersUserRstMap&quot;&gt; &lt;!-- 映射关联关系（一对多） --&gt; &lt;!-- collection标签：定义一个一对多关系 ofType：指定该集合参数所映射的类型 --&gt; &lt;collection property=&quot;detailList&quot; ofType=&quot;Orderdetail&quot;&gt; &lt;id column=&quot;detail_id&quot; property=&quot;id&quot; /&gt; &lt;result column=&quot;items_id&quot; property=&quot;itemsId&quot; /&gt; &lt;result column=&quot;items_num&quot; property=&quot;itemsNum&quot; /&gt; &lt;/collection&gt; &lt;/resultMap&gt; &lt;!-- 查询订单信息，包括用户名称、用户地址，订单商品信息（嵌套结果） --&gt; &lt;select id=&quot;findOrdersAndOrderdetailRstMap&quot; resultMap=&quot;OrdersAndOrderdetailRstMap&quot;&gt; Select &lt;include refid=&quot;select_orders&quot; /&gt; , &lt;include refid=&quot;select_user&quot;/&gt; , orderdetail.id detail_id, orderdetail.items_id, orderdetail.items_num from orders,user,orderdetail where orders.user_id = user.id and orders.id = orderdetail.orders_id &lt;/select&gt; &emsp;&emsp;resultMap的extends属性：可以用此属性来继承一个已有的resultmap。但是它继承的resultMap的type和它本身的type要保持一致。 编写测试代码//@Test public void testFindOrdersAndOrderdetailRstMap() { // 创建sqlSession SqlSession sqlSession = sqlSessionFactory.openSession(); // 通过SqlSession构造usermapper的代理对象 OrdersMapper ordersMapper = sqlSession.getMapper(OrdersMapper.class); // 调用usermapper的方法 List&lt;Orders&gt; list = ordersMapper.findOrdersAndOrderdetailRstMap(); //此处我们采用debug模式来跟踪代码，然后验证结果集是否正确 System.out.println(list); // 释放SqlSession sqlSession.close(); } 一对多小结&emsp;&emsp;mybatis使用resultMap的collection对关联查询的多条记录映射到一个list集合属性中。使用resultType实现： 需要对结果集进行二次处理。 将订单明细映射到orders中的orderdetails中，需要自己处理，使用双重循环遍历，去掉重复记录，将订单明细放在orderdetails中。 多对多查询需求&emsp;&emsp;查询用户信息及用户购买的商品信息，要求将关联信息映射到主pojo的pojo属性中 SQL语句&emsp;&emsp;查询主表：user&emsp;&emsp;查询关联表：orders、orderdetail、items //Select Orders.id, Orders.user_id, orders.number, orders.createtime, orders.note, user.username, user.address, orderdetail.id detail_id, orderdetail.items_id, orderdetail.items_num items.name items_name, items.detail items_detail FROM orders, USER, orderdetail, items WHERE user.`id` = orders.`user_id` AND orders.`id` = orderdetail.`orders_id` AND orderdetail.`items_id` = items.`id` 映射思路 将用户信息映射到user中。 在user类中添加订单列表属性List orderslist，将用户创建的订单映射到orderslist 在Orders中添加订单明细列表属性List detailList，将订单的明细映射到detailList 在Orderdetail中添加Items属性，将订单明细所对应的商品映射到Items 修改PO类&emsp;&emsp;在user类中添加List ordersList 属性 // 订单信息 private List&lt;Orders&gt; ordersList; &emsp;&emsp;在Orders类中添加List属性 //订单明细 private List&lt;Orderdetail&gt; detailList; &emsp;&emsp;在Orderdetail类中添加Items属性 //商品信息 private Items items; 编写mapper接口//查询用户及用户购买商品信息（多对多映射之使用resultMap） public List&lt;User&gt; findUserAndItemsRstMap(); 编写映射文件//&lt;!-- 定义UserAndItemsRstMap --&gt; &lt;resultMap type=&quot;User&quot; id=&quot;UserAndItemsRstMap&quot;&gt; &lt;!-- 用户信息 --&gt; &lt;!-- id：关联查询用户的唯一标示 --&gt; &lt;id column=&quot;user_id&quot; property=&quot;id&quot; /&gt; &lt;result column=&quot;username&quot; property=&quot;username&quot; /&gt; &lt;result column=&quot;address&quot; property=&quot;address&quot; /&gt; &lt;!-- 订单信息 （一个用户有多个订单） --&gt; &lt;collection property=&quot;ordersList&quot; ofType=&quot;orders&quot;&gt; &lt;id column=&quot;id&quot; property=&quot;id&quot; /&gt; &lt;result column=&quot;user_id&quot; property=&quot;userId&quot; /&gt; &lt;result column=&quot;number&quot; property=&quot;number&quot; /&gt; &lt;result column=&quot;createtime&quot; property=&quot;createtime&quot; /&gt; &lt;result column=&quot;note&quot; property=&quot;note&quot; /&gt; &lt;!-- 订单明细信息（一个订单有多个订单明细） --&gt; &lt;collection property=&quot;detailList&quot; ofType=&quot;orderdetail&quot;&gt; &lt;id column=&quot;detail_id&quot; property=&quot;id&quot; /&gt; &lt;result column=&quot;items_id&quot; property=&quot;itemsId&quot; /&gt; &lt;result column=&quot;items_num&quot; property=&quot;itemsNum&quot; /&gt; &lt;!-- 商品信息 （一个订单明细对应一个商品） --&gt; &lt;association property=&quot;items&quot; javaType=&quot;cn.itcast.mybatis.po.Items&quot;&gt; &lt;id column=&quot;items_id&quot; property=&quot;id&quot; /&gt; &lt;result column=&quot;items_name&quot; property=&quot;name&quot; /&gt; &lt;result column=&quot;items_detail&quot; property=&quot;detail&quot; /&gt; &lt;/association&gt; &lt;/collection&gt; &lt;/collection&gt; &lt;/resultMap&gt; &lt;!-- 查询用户及用户购买商品信息（多对多映射之使用resultMap） --&gt; &lt;select id=&quot;findUserAndItemsRstMap&quot; resultMap=&quot;UserAndItemsRstMap&quot;&gt; Select &lt;include refid=&quot;select_orders&quot; /&gt; , &lt;include refid=&quot;select_user&quot; /&gt; , &lt;include refid=&quot;select_orderdetail&quot;&gt;&lt;/include&gt; , items.name items_name, items.detail items_detail from orders,user,orderdetail,items where orders.user_id = user.id and orders.id = orderdetail.orders_id and orderdetail.items_id = items.id &lt;/select&gt; 编写测试代码//@Test public void testFindUserAndItemsRstMap() { // 创建sqlSession SqlSession sqlSession = sqlSessionFactory.openSession(); // 通过SqlSession构造usermapper的代理对象 OrdersMapper ordersMapper = sqlSession.getMapper(OrdersMapper.class); // 调用usermapper的方法 List&lt;User&gt; list = ordersMapper.findUserAndItemsRstMap(); // 此处我们采用debug模式来跟踪代码，然后验证结果集是否正确 System.out.println(list); // 释放SqlSession sqlSession.close(); } 多对多查询小结&emsp;&emsp;将查询用户购买的商品信息明细清单，（用户名、用户地址、购买商品名称、购买商品时间、购买商品数量）&emsp;&emsp;针对上边的需求就使用resultType将查询到的记录映射到一个扩展的pojo中，很简单实现明细清单的功能。 &emsp;&emsp;一对多是多对多的特例，如下需求：//查询用户购买的商品信息，用户和商品的关系是多对多关系。 需求1：&emsp;&emsp;&emsp;&emsp;查询字段：用户账号、用户名称、用户性别、商品名称、商品价格(最常见)&emsp;&emsp;&emsp;&emsp;企业开发中常见明细列表，用户购买商品明细列表，使用resultType将上边查询列映射到pojo输出。 需求2：&emsp;&emsp;&emsp;&emsp;查询字段：用户账号、用户名称、购买商品数量、商品明细（鼠标移上显示明细）&emsp;&emsp;&emsp;&emsp;使用resultMap将用户购买的商品明细列表映射到user对象中。 总结：&emsp;&emsp;使用resultMap是针对那些对查询结果映射有特殊要求的功能，，比如特殊要求映射成list中包括 多个list。 高级映射总结 resultType：&emsp;&emsp;作用：&emsp;&emsp;&emsp;&emsp;将查询结果按照sql列名pojo属性名一致性映射到pojo中。&emsp;&emsp;场合：&emsp;&emsp;&emsp;&emsp;常见一些明细记录的展示，比如用户购买商品明细，将关联查询信息全部展示在页面时，此时可直接使用resultType将每一条记录映射到pojo中，在前端页面遍历list（list中是pojo）即可。 resultMap：&emsp;&emsp;使用association和collection完成一对一和一对多高级映射（对结果有特殊的映射要求）。 association：&emsp;&emsp;作用：&emsp;&emsp;&emsp;&emsp; 将关联查询信息映射到一个pojo对象中。&emsp;&emsp;场合：&emsp;&emsp;&emsp;&emsp;为了方便查询关联信息可以使用association将关联订单信息映射为用户对象的pojo属性中，比如：查询订单及关联用户信息。 // &emsp;&emsp;使用resultType无法将查询结果映射到pojo对象的pojo属性中，根据对结果集查询遍历的需要选择使用resultType还是resultMap。 collection：&emsp;&emsp;作用：&emsp;&emsp;&emsp;&emsp; 将关联查询信息映射到一个list集合中。&emsp;&emsp;场合：&emsp;&emsp;&emsp;&emsp;为了方便查询遍历关联信息可以使用collection将关联信息映射到list集合中，比如：查询用户权限范围模块及模块下的菜单，可使用collection将模块映射到模块list中，将菜单列表映射到模块对象的菜单list属性中，这样的作的目的也是方便对查询结果集进行遍历查询。 //&emsp;&emsp; 如果使用resultType无法将查询结果映射到list集合中。 延迟加载什么是延迟加载&emsp;&emsp;resultMap中的association和collection标签具有延迟加载的功能。&emsp;&emsp;延迟加载的意思是说，在关联查询时，利用延迟加载，先加载主信息。需要关联信息时再去按需加载关联信息。这样会大大提高数据库性能，因为查询单表要比关联查询多张表速度要快。 设置延迟加载&emsp;&emsp;Mybatis默认是不开启延迟加载功能的，我们需要手动开启。&emsp;&emsp;需要在SqlMapConfig.xml文件中，在标签中开启延迟加载功能。 设置项 描述 允许值 默认值 lazyLoadingEnabled 全局性设置懒加载。如果设为‘false’，则所有相关联的都会被初始化加载。 true or false true aggressiveLazyLoading 当设置为‘true’的时候，懒加载的对象可能被任何懒属性全部加载。否则，每个属性都按需加载。 true or false true 使用association进行延迟加载需求&emsp;&emsp;查询订单并且关联查询用户信息（对用户信息的加载要求是按需加载） 编写映射文件&emsp;&emsp;需要定义两个mapper的方法对应的statement。 只查询订单信息 SELECT * FROM orders &emsp;&emsp;在查询订单的statement中使用association去延迟加载（执行）下边的satatement(关联查询用户信息) //&lt;!-- 定义OrdersUserLazyLoadingRstMap --&gt; &lt;resultMap type=&quot;cn.itcast.mybatis.po.Orders&quot; id=&quot;OrdersUserLazyLoadingRstMap&quot;&gt; &lt;id column=&quot;id&quot; property=&quot;id&quot; /&gt; &lt;result column=&quot;user_id&quot; property=&quot;userId&quot; /&gt; &lt;result column=&quot;number&quot; property=&quot;number&quot; /&gt; &lt;result column=&quot;createtime&quot; property=&quot;createtime&quot; /&gt; &lt;result column=&quot;note&quot; property=&quot;note&quot; /&gt; &lt;!-- 延迟加载用户信息 --&gt; &lt;!-- select：指定延迟加载需要执行的statement的id（是根据user_id查询用户信息的statement） 我们使用UserMapper.xml中的findUserById完成根据用户ID（user_id）查询用户信息 如果findUserById不在本mapper中，前边需要加namespace --&gt; &lt;!-- column：主信息表中需要关联查询的列，此处是user_id --&gt; &lt;association property=&quot;user&quot; select=&quot;cn.itcast.mybatis.mapper.UserMapper.findUserById&quot; column=&quot;user_id&quot;&gt;&lt;/association&gt; &lt;/resultMap&gt; &lt;!-- 查询订单信息，延迟加载关联查询的用户信息 --&gt; &lt;select id=&quot;findOrdersUserLazyLoading&quot; resultMap=&quot;OrdersUserLazyLoadingRstMap&quot;&gt; SELECT * FROM orders &lt;/select&gt; 关联查询用户信息 &emsp;&emsp;通过上边查询到的订单信息中user_id去关联查询用户信息,使用UserMapper.xml中的findUserById // SELECT * FROM user WHERE id = #{id} &emsp;&emsp;&emsp;&emsp;上边先去执行findOrdersUserLazyLoading，当需要去查询用户的时候再去执行findUserById，通过resultMap的定义将延迟加载执行配置起来。 加载映射文件//&lt;!-- 批量加载mapper文件，需要mapper接口文件和mapper映射文件名称相同且在同一个包下 --&gt; &lt;package name=_&quot;cn.itcast.mybatis.mapper&quot;_/&gt; 编写mapper接口// 查询订单信息，延迟加载关联查询的用户信息 public List&lt;Orders&gt; findOrdersUserLazyLoading(); 编写测试代码思路： 执行上边mapper方法（findOrdersUserLazyLoading），内部去调用cn.itcast.mybatis.mapper.OrdersMapper中的findOrdersUserLazyLoading只查询orders信息（单表）。 在程序中去遍历上一步骤查询出的List，当我们调用Orders中的getUser方法时，开始进行延迟加载。 执行延迟加载，去调用UserMapper.xml中findUserbyId这个方法获取用户信息。 //@Test public void testFindOrdersUserLazyLoading() { // 创建sqlSession SqlSession sqlSession = sqlSessionFactory.openSession(); // 通过SqlSession构造usermapper的代理对象 OrdersMapper ordersMapper = sqlSession.getMapper(OrdersMapper.class); // 调用usermapper的方法 List&lt;Orders&gt; list = ordersMapper.findOrdersUserLazyLoading(); for(Orders orders : list){ System.out.println(orders.getUser()); } // 释放SqlSession sqlSession.close(); } 延迟加载思考&emsp;&emsp;不使用mybatis提供的association及collection中的延迟加载功能，如何实现延迟加载？？ &emsp;&emsp;实现方法如下：&emsp;&emsp;//定义两个mapper方法： 查询订单列表 根据用户id查询用户信息 实现思路： 先去查询第一个mapper方法，获取订单信息列表在程序中（service），按需去调用第二个mapper方法去查询用户信息。 总之：&emsp;&emsp;使用延迟加载方法，先去查询简单的sql（最好单表，也可以关联查询），再去按需要加载关联查询的其它信息。 查询缓存mybatis缓存分析&emsp;&emsp;mybatis提供查询缓存，如果缓存中有数据就不用从数据库中获取，用于减轻数据压力，提高系统性能。&emsp;&emsp;一级缓存是SqlSession级别的缓存。在操作数据库时需要构造 sqlSession对象，在对象中有一个数据结构（HashMap）用于存储缓存数据。不同的sqlSession之间的缓存数据区域（HashMap）是互相不影响的。&emsp;&emsp;二级缓存是mapper级别的缓存，多个SqlSession去操作同一个Mapper的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。 一级缓存原理 &emsp;&emsp;第一次发起查询用户id为1的用户信息，先去找缓存中是否有id为1的用户信息，如果没有，从数据库查询用户信息。&emsp;&emsp;得到用户信息，将用户信息存储到一级缓存中。&emsp;&emsp;如果sqlSession去执行commit操作（执行插入、更新、删除），清空SqlSession中的一级缓存，这样做的目的为了让缓存中存储的是最新的信息，避免脏读。&emsp;&emsp;第二次发起查询用户id为1的用户信息，先去找缓存中是否有id为1的用户信息，缓存中有，直接从缓存中获取用户信息。 注：Mybatis默认支持一级缓存。 测试1//@Test public void testOneLevelCache() { SqlSession sqlSession = sqlSessionFactory.openSession(); UserMapper mapper = sqlSession.getMapper(UserMapper.class); // 第一次查询ID为1的用户，去缓存找，找不到就去查找数据库 User user1 = mapper.findUserById(1); System.out.println(user1); // 第二次查询ID为1的用户 User user2 = mapper.findUserById(1); System.out.println(user2); sqlSession.close(); } &emsp;&emsp;只输出一次SQL： 测试2//@Test public void testOneLevelCache() { SqlSession sqlSession = sqlSessionFactory.openSession(); UserMapper mapper = sqlSession.getMapper(UserMapper.class); // 第一次查询ID为1的用户，去缓存找，找不到就去查找数据库 User user1 = mapper.findUserById(1); System.out.println(user1); User user = new User(); user.setUsername(&quot;东哥1&quot;); user.setAddress(&quot;清河宝盛西里&quot;); //执行增删改操作，清空缓存 mapper.insertUser(user); // 第二次查询ID为1的用户 User user2 = mapper.findUserById(1); System.out.println(user2); sqlSession.close(); } &emsp;&emsp;中间执行了commit操作，同样的查询SQL输出两次： 应用&emsp;&emsp;正式开发，是将mybatis和spring进行整合开发，事务控制在service中。&emsp;&emsp;一个service方法中包括 很多mapper方法调用。 //service{ //开始执行时，开启事务，创建SqlSession对象 //第一次调用mapper的方法findUserById(1) //第二次调用mapper的方法findUserById(1)，从一级缓存中取数据 //方法结束，sqlSession关闭 } &emsp;&emsp;如果是执行两次service调用查询相同 的用户信息，不走一级缓存，因为session方法结束，sqlSession就关闭，一级缓存就清空。 二级缓存原理&emsp;&emsp;下图是多个sqlSession请求UserMapper的二级缓存图解。 &emsp;&emsp;二级缓存是mapper级别的。&emsp;&emsp;第一次调用mapper下的SQL去查询用户信息。查询到的信息会存到该mapper对应的二级缓存区域内。&emsp;&emsp;第二次调用相同namespace下的mapper映射文件中相同的SQL去查询用户信息。会去对应的二级缓存内取结果。&emsp;&emsp;如果调用相同namespace下的mapper映射文件中的增删改SQL，并执行了commit操作。此时会清空该namespace下的二级缓存。 开启二级缓存注：Mybatis默认是没有开启二级缓存 在核心配置文件SqlMapConfig.xml中加入以下内容（开启二级缓存总开关）： 在settings标签中添加以下内容： &lt;!-- 开启二级缓存总开关 --&gt; &lt;setting name=_&quot;cacheEnabled&quot;_ value=_&quot;true&quot;_/&gt; 在UserMapper映射文件中，加入以下内容，开启二级缓存： 实现序列化&emsp;&emsp;由于二级缓存的数据不一定都是存储到内存中，它的存储介质多种多样，所以需要给缓存的对象执行序列化。&emsp;&emsp;如果该类存在父类，那么父类也要实现序列化。 测试1//@Test public void testTwoLevelCache() { SqlSession sqlSession1 = sqlSessionFactory.openSession(); SqlSession sqlSession2 = sqlSessionFactory.openSession(); SqlSession sqlSession3 = sqlSessionFactory.openSession(); UserMapper mapper1 = sqlSession1.getMapper(UserMapper.class); UserMapper mapper2 = sqlSession2.getMapper(UserMapper.class); UserMapper mapper3 = sqlSession3.getMapper(UserMapper.class); // 第一次查询ID为1的用户，去缓存找，找不到就去查找数据库 User user1 = mapper1.findUserById(1); System.out.println(user1); // 关闭SqlSession1 sqlSession1.close(); // 第二次查询ID为1的用户 User user2 = mapper2.findUserById(1); System.out.println(user2); // 关闭SqlSession2 sqlSession2.close(); } &emsp;SQL输出结果： &emsp;Cache Hit Radio ： 缓存命中率 第一次缓存中没有记录，则命中率0.0； 第二次缓存中有记录，则命中率0.5（访问两次，有一次命中） 测试2//@Test public void testTwoLevelCache() { SqlSession sqlSession1 = sqlSessionFactory.openSession(); SqlSession sqlSession2 = sqlSessionFactory.openSession(); SqlSession sqlSession3 = sqlSessionFactory.openSession(); UserMapper mapper1 = sqlSession1.getMapper(UserMapper.class); UserMapper mapper2 = sqlSession2.getMapper(UserMapper.class); UserMapper mapper3 = sqlSession3.getMapper(UserMapper.class); // 第一次查询ID为1的用户，去缓存找，找不到就去查找数据库 User user1 = mapper1.findUserById(1); System.out.println(user1); // 关闭SqlSession1 sqlSession1.close(); //修改查询出来的user1对象，作为插入语句的参数 user1.setUsername(&quot;东哥1&quot;); user1.setAddress(&quot;清河宝盛西里&quot;); mapper3.insertUser(user1); // 提交事务 sqlSession3.commit(); // 关闭SqlSession3 sqlSession3.close(); // 第二次查询ID为1的用户 User user2 = mapper2.findUserById(1); System.out.println(user2); // 关闭SqlSession2 sqlSession2.close(); } &emsp;SQL输出结果：&emsp;&emsp;根据SQL分析，确实是清空了二级缓存了。 禁用二级缓存&emsp;&emsp;该statement中设置userCache=false，可以禁用当前select语句的二级缓存，即每次查询都是去数据库中查询，默认情况下是true，即该statement使用二级缓存。 //&lt;select id=&quot;findUserById&quot; parameterType=&quot;int&quot; resultType=&quot;cn.itcast.mybatis.po.User&quot; useCache=&quot;true&quot;&gt; SELECT * FROM user WHERE id = #{id} &lt;/select&gt; 刷新二级缓存&emsp;&emsp;该statement中设置flushCache=true可以刷新当前的二级缓存，默认情况下如果是select语句，那么flushCache是false。如果是insert、update、delete语句，那么flushCache是true。 如果查询语句设置成true，那么每次查询都是去数据库查询，即意味着该查询的二级缓存失效。 如果查询语句设置成false，即使用二级缓存，那么如果在数据库中修改了数据，而缓存数据还是原来的，这个时候就会出现脏读。&emsp;flushCache设置如下： //&lt;select id=”findUserById” parameterType=”int” resultType=&quot;cn.itcast.mybatis.po.User&quot; useCache=&quot;true&quot; flushCache=&quot;true&quot;&gt; SELECT * FROM user WHERE id = #{id} 整合ehcache（了解）&emsp;&emsp;Ehcache是一个分布式缓存。 分布式缓存&emsp;&emsp;系统为了提高性能，通常会对系统采用分布式部署（集群部署方式） &emsp;&emsp;不使用分布式缓存，缓存的数据在各个服务单独存储，不方便开发。所以要使用分布式缓存对缓存数据进行集中式管理。&emsp;&emsp;Mybatis自身无法实现分布式缓存，需要和其它分布式缓存框架进行整合。 整合思路（重点）Mybatis提供了一个cache接口，同时它自己有一个默认的实现类PerpetualCache。 通过实现cache接口可以实现mybatis缓存数据通过其他缓存数据库整合，mybatis的特长是sql，缓存数据管理不是mybatis的特长，为了提高mybatis的性能，所以需要mybatis和第三方缓存数据库整合，比如ehcache、memcache、redis等 &emsp;Mybatis提供接口如下： &emsp;&emsp;Mybatis的默认实现类： 整合ehcache的步骤 引入ehcache的jar包； 在mapper映射文件中，配置cache标签的type为ehcache对cache接口的实现类类型。 加入ehcache的配置文件 第一步：引入ehcache的jar包 ehcache-core-2.6.5.jar mybatis-ehcache-1.0.2.jar 第二步：配置cache的type属性&lt;!-- 使用默认二级缓存 --&gt; &lt;cache type=_&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;_ /&gt; 第三步：添加ehcache的配置文件&emsp;&emsp;在classpath下添加ehcache.xml //&lt;ehcache xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;../config/ehcache.xsd&quot;&gt; &lt;!-- 缓存数据要存放的磁盘地址 --&gt; &lt;diskStore path=&quot;F:\develop\ehcache&quot; /&gt; &lt;!-- diskStore：指定数据在磁盘中的存储位置。  defaultCache：当借助CacheManager.add(&quot;demoCache&quot;)创建Cache时，EhCache便会采用&lt;defalutCache/&gt;指定的的管理策略 以下属性是必须的： maxElementsInMemory - 在内存中缓存的element的最大数目 maxElementsOnDisk - 在磁盘上缓存的element的最大数目，若是0表示无穷大  eternal - 设定缓存的elements是否永远不过期。如果为true，则缓存的数据始终有效，如果为false那么还要根据timeToIdleSeconds，timeToLiveSeconds判断 overflowToDisk - 设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上 以下属性是可选的： timeToIdleSeconds - 当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时，这些数据便会删除，默认值是0,也就是可闲置时间无穷大 timeToLiveSeconds - 缓存element的有效生命期，默认是0.,也就是element存活时间无穷大 diskSpoolBufferSizeMB-这个参数设置DiskStore(磁盘缓存)的缓存区大小.默认是30MB.每个Cache都应该有自己的一个缓冲区. diskPersistent - 在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false。 diskExpiryThreadIntervalSeconds - 磁盘缓存的清理线程运行间隔，默认是120秒。每个120s，相应的线程会进行一次EhCache中数据的清理工作 memoryStoreEvictionPolicy - 当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出） --&gt; &lt;defaultCache maxElementsInMemory=&quot;1000&quot; maxElementsOnDisk=&quot;10000000&quot; eternal=&quot;false&quot; overflowToDisk=&quot;false&quot; timeToIdleSeconds=&quot;120&quot; timeToLiveSeconds=&quot;120&quot; diskExpiryThreadIntervalSeconds=&quot;120&quot; memoryStoreEvictionPolicy=&quot;LRU&quot;&gt; &lt;/defaultCache&gt; &lt;/ehcache&gt; 应用场景&emsp;使用场景：对于访问响应速度要求高，但是实时性不高的查询，可以采用二级缓存技术。 注意：在使用二级缓存的时候，要设置一下刷新间隔（cache标签中有一个flashInterval属性）来定时刷新二级缓存，这个刷新间隔根据具体需求来设置，比如设置30分钟、60分钟等，单位为毫秒。 局限性 Mybatis二级缓存对细粒度的数据级别的缓存实现不好。&emsp;场景：对商品信息进行缓存，由于商品信息查询访问量大，但是要求用户每次查询都是最新的商品信息，此时如果使用二级缓存，就无法实现当一个商品发生变化只刷新该商品的缓存信息而不刷新其他商品缓存信息，因为二级缓存是mapper级别的，当一个商品的信息发送更新，所有的商品信息缓存数据都会清空。&emsp;&emsp;解决此类问题，需要在业务层根据需要对数据有针对性的缓存。比如可以对经常变化的数据操作单独放到另一个namespace的mapper中。 mybatis与spring集成集成思路 需要spring来管理数据源信息。 需要spring通过单例方式管理SqlSessionFactory。 使用SqlSessionFactory创建SqlSession。（spring和mybatis整合自动完成） 持久层的mapper都需要由spring进行管理，spring和mybatis整合生成mapper代理对象。 集成步骤 jar包集成； 配置文件集成（数据源）； SqlSessionFactory集成； Mapper接口集成； 开始集成搭建工程结构 包集成&emsp;&emsp;Jar包如下： Mybatis3.2.7 的jar包（mybatis核心包、依赖包） Spring3.2.0 的jar包 Spring与mybatis的集成包:mybatis-spring-1.2.2.jar 数据库驱动包:mysql-connector-java-5.1.7-bin.jar Junit包:junit-4.9.jar Dbcp连接池包 配置文件集成 注意：Mybatis的配置文件中的数据源配置去掉，由spring进行管理配置。 Mybatis的SqlMapConfig.xml//&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE configuration PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt; &lt;configuration&gt; &lt;!-- 设置全局参数 --&gt; &lt;settings&gt; &lt;!-- lazyLoadingEnabled：延迟加载的开关，默认是false --&gt; &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt; &lt;!-- aggressiveLazyLoading：默认为true，一旦为true上面的懒加载开关失效 --&gt; &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt; &lt;!-- cacheEnabled：二级缓存的总开关 默认是false--&gt; &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt; &lt;/settings&gt; &lt;!-- 定义别名 --&gt; &lt;typeAliases&gt; &lt;!-- 批量定义别名 --&gt; &lt;!-- name：指定需要别名定义的包的名称 它的别名就是类名（类名的首字母大小写都可）--&gt; &lt;package name=&quot;cn.itcast.ssm.po&quot;&gt;&lt;/package&gt; &lt;/typeAliases&gt; &lt;!-- 注意：与spring集成后，数据源和事务交给spring来管理 --&gt; &lt;!-- 加载mapper文件 --&gt; &lt;mappers&gt; &lt;mapper resource=&quot;mybatis/sqlmap/User.xml&quot;&gt;&lt;/mapper&gt; &lt;!-- 批量加载mapper 注意：mapper接口文件和mapper映射文件，名称相同，在同一个包下 --&gt; &lt;package name=&quot;cn.itcast.mybatis.mapper&quot;/&gt; &lt;/mappers&gt; &lt;/configuration&gt; Spring的applicationContext.xml//&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd &quot;&gt; &lt;!-- 引用java配置文件 --&gt; &lt;context:property-placeholder location=&quot;db.properties&quot;/&gt; &lt;!-- 配置数据源，使用dbcp连接池 --&gt; &lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot;&gt; &lt;property name=&quot;driverClassName&quot; value=&quot;${db.driver}&quot; /&gt; &lt;property name=&quot;url&quot; value=&quot;${db.url}&quot; /&gt; &lt;property name=&quot;username&quot; value=&quot;${db.username}&quot; /&gt; &lt;property name=&quot;password&quot; value=&quot;${db.password}&quot; /&gt; &lt;property name=&quot;maxActive&quot; value=&quot;10&quot; /&gt; &lt;property name=&quot;maxIdle&quot; value=&quot;5&quot; /&gt; &lt;/bean&gt; &lt;/beans&gt; Spring对SqlSessionFactory进行管理配置&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt; &lt;!-- mybatis的配置文件路径 --&gt; &lt;property name=&quot;configLocation&quot; value=&quot;sqlMapConfig.xml&quot;&gt;&lt;/property&gt; &lt;!-- SqlSessionFactory需要数据源信息，之前是写在sqlmapconfig.xml，现在需要重新指定 --&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt; &lt;/bean&gt; Mybatis程序编写原始dao方式编写dao接口//public interface UserDao { // 1、 根据用户ID来查询用户信息； public User findUserById(int id); // 2、 根据用户名称来模糊查询用户信息列表； public List&lt;User&gt; findUsersByName(String name); // 3、 添加用户； public void insertUser(User user); } 编写dao实现类（继承SqlSessionDaoSupport）//通过this.getSqlSession()获取sqlsession。 public class UserDaoImpl extends SqlSessionDaoSupport implements UserDao { @Override public User findUserById(int id) { return this.getSqlSession().selectOne(&quot;test.findUserById&quot;, id); } } 编写Mapper映射文件 Spring定义bean//&lt;!-- 由spring管理原始dao的实现 --&gt; &lt;bean id=&quot;userDao&quot; class=&quot;cn.itcast.mybatis.dao.UserDaoImpl&quot;&gt; &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;/&gt; &lt;/bean&gt; 编写测试代码//public class UserDaoTest { //spring上下文 private ApplicationContext ctx; @Before public void setUp() throws Exception { //读取spring的上下文，然后封装到ctx ctx = new ClassPathXmlApplicationContext(&quot;spring/applicationContext.xml&quot;); } @Test public void testFindUserById() { //创建userdao对象 UserDao userDao = (UserDao) ctx.getBean(&quot;userDao&quot;); //调用userdao对象的方法 User user = userDao.findUserById(1); System.out.println(user); } } Mapper代理方式编写mapper接口public interface UserMapper { // 1、 根据用户ID来查询用户信息 public User findUserById(int id); } 编写mapper映射文件 Spring定义bean&emsp;&emsp;Mapper代理开发方式有两种bean的定义方法，一种是MapperFactoryBean，一种是MapperScannerConfigurer（推荐）。 通过MapperFactoryBean创建代理对象（了解）&lt;!-- mapper代理开发方式之单个mapper配置 --&gt; &lt;bean id=&quot;userMapper&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt; &lt;property name=&quot;mapperInterface&quot; value=&quot;cn.itcast.mybatis.mapper.UserMapper&quot;&gt;&lt;/property&gt; &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt; &lt;/bean&gt; 通过MapperScannerConfigurer批量扫描创建代理对象（掌握）&emsp;&emsp;存在问题：一个mapper定义一个bean，很麻烦。 //&lt;!-- mapper代理开发方式之批量mapper配置 --&gt; &lt;!-- bean的名字默认为mapper接口类名的首字母小写 --&gt; &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt; &lt;!-- 指定批量mapper配置的包名 --&gt; &lt;property name=&quot;basePackage&quot; value=&quot;cn.itcast.mybatis.mapper&quot;&gt;&lt;/property&gt; &lt;!-- 指定使用的SqlSessionFactory --&gt; &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt; &lt;/bean&gt; 编写测试代码//private ApplicationContext ctx; @Before public void setUp() throws Exception { ctx = new ClassPathXmlApplicationContext( &quot;spring/applicationContext.xml&quot;); } @Test public void testFindUserById() { // 创建mapper对象 UserMapper userMapper = (UserMapper) ctx.getBean(&quot;userMapper&quot;); // 调用mapper对象的方法 User user = userMapper.findUserById(1); System.out.println(user); } Mybatis的逆向工程（会用）什么是逆向工程&emsp;&emsp;简单点说，就是通过数据库中的单表，自动生成java代码。&emsp;&emsp;Mybatis官方提供了逆向工程，可以针对单表自动生成mybatis代码（mapper.java\mapper.xml\po类）&emsp;&emsp;企业开发中，逆向工程是个很常用的工具。 ##下载逆向工程 https://github.com/mybatis/generator/releases/tag/mybatis-generator-1.3.2 使用方法 创建generator配置文件； 使用java类来执行逆向工程； 把生成的代码拷贝到项目中。 在正式项目中使用逆向工程生成的代码 第一步：创建generator配置文件&emsp;&emsp;在classpath下，创建generator.xml配置文件：（文件内容可以从逆向工程的jar包中docs目录下的index.html中找到相关代码） //&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE generatorConfiguration PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt; &lt;generatorConfiguration&gt; &lt;context id=&quot;testTables&quot; targetRuntime=&quot;MyBatis3&quot;&gt; &lt;commentGenerator&gt; &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt; &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot; /&gt; &lt;/commentGenerator&gt; &lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt; &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://localhost:3306/mybatis&quot; userId=&quot;root&quot; password=&quot;mysql&quot;&gt; &lt;/jdbcConnection&gt; &lt;!-- &lt;jdbcConnection driverClass=&quot;oracle.jdbc.OracleDriver&quot; connectionURL=&quot;jdbc:oracle:thin:@127.0.0.1:1521:yycg&quot; userId=&quot;yycg&quot; password=&quot;yycg&quot;&gt; &lt;/jdbcConnection&gt; --&gt; &lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal --&gt; &lt;javaTypeResolver&gt; &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot; /&gt; &lt;/javaTypeResolver&gt; &lt;!-- targetProject:生成PO类的位置 --&gt; &lt;javaModelGenerator targetPackage=&quot;cn.itcast.ssm.po&quot; targetProject=&quot;.\src&quot;&gt; &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt; &lt;!-- 从数据库返回的值被清理前后的空格 --&gt; &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt; &lt;/javaModelGenerator&gt; &lt;!-- targetProject:mapper映射文件生成的位置 --&gt; &lt;sqlMapGenerator targetPackage=&quot;cn.itcast.ssm.mapper&quot; targetProject=&quot;.\src&quot;&gt; &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt; &lt;/sqlMapGenerator&gt; &lt;!-- targetPackage：mapper接口生成的位置 --&gt; &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;cn.itcast.ssm.mapper&quot; targetProject=&quot;.\src&quot;&gt; &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt; &lt;/javaClientGenerator&gt; &lt;!-- 指定数据库表 --&gt; &lt;table tableName=&quot;items&quot;&gt;&lt;/table&gt; &lt;table tableName=&quot;orders&quot;&gt;&lt;/table&gt; &lt;table tableName=&quot;orderdetail&quot;&gt;&lt;/table&gt; &lt;table tableName=&quot;user&quot;&gt;&lt;/table&gt; &lt;/context&gt; &lt;/generatorConfiguration&gt; 第二步：使用java类来执行逆向工程//public class Generator { /** *@param args */ public static void main(String[] args) throws Exception{ List&lt;String&gt; warnings = new ArrayList&lt;String&gt;(); boolean overwrite = true; File configFile = new File(&quot;config/generator.xml&quot;); ConfigurationParser cp = new ConfigurationParser(warnings); Configuration config = cp.parseConfiguration(configFile); DefaultShellCallback callback = new DefaultShellCallback(overwrite); MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings); myBatisGenerator.generate(null); } } 第三步：把生成的代码拷贝到项目中 如果正式项目中已经有po类所在的包了，那么就只需要拷贝po类到指定包下就可以。 如果正式项目中没有po包，那么就把逆向工程中整个po类的包拷贝过去。 Mapper.xml和mapper.java的拷贝与po类一样。 第四步：使用生成的代码//public class ItemsMapperTest { // spring上下文 private ApplicationContext ctx; @Before public void setUp() throws Exception { // 读取spring的上下文，然后封装到ctx ctx = new ClassPathXmlApplicationContext( &quot;spring/applicationContext.xml&quot;); } @Test public void testSelectByExample() { ItemsMapper mapper = (ItemsMapper) ctx.getBean(&quot;itemsMapper&quot;); ItemsExample example = new ItemsExample(); //使用它进行参数封装传递 Criteria criteria = example.createCriteria(); //设置参数 criteria.andNameEqualTo(&quot;背包&quot;); List&lt;Items&gt; list = mapper.selectByExample(example); System.out.println(list); } } 注意事项&emsp;&emsp;Mapper.xml文件已经存在时，如果进行重新生成则mapper.xml文件时，内容不被覆盖而是进行内容追加，结果导致mybatis解析失败。 解决方法：删除原来已经生成的mapper.xml文件再进行生成。Mybatis自动生成的po及mapper.java文件不是内容而是直接覆盖没有此问题。]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Struts2学习笔记]]></title>
    <url>%2F2018%2F07%2F23%2FStruts2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[知识导入xml解析&emsp;&emsp; dom4j解析 反射&emsp;&emsp; 有完整类名，并且含有空参构造函数，如何创建出对象？ //使用反射创建对象 Class clazz = Class.forName(&quot;xxx&quot;); clazz.newInstance(); filter过滤器 过滤来自浏览器发送的请求.在请求到达访问资源之前.会先经过过滤器. 可以完成批处理. 还可以根据filterChain来决定是否放行. 也可以使用请求转发,或重定向,不让请求到目标路径. 自己定义一个struts-Mini Struts2框架相关 什么是框架？&emsp; 微观：由一个一个类构成的包，包再构成框架&emsp; 宏观：半成品的项目，我们需要执行什么业务时，为框架填写业务逻辑即可 三大框架：SSH=&gt;Struts,Spring,Hibernate&emsp; Struts的版本：&emsp;&emsp; Struts1（已经淘汰）&emsp;&emsp; Struts2（我们要学的）也叫xwork。 三大框架的作用？&emsp; 简化我们的开发，降低开发成本，提高开发效率&emsp;Struts=&gt; WEB层框架：&emsp;&emsp; 优势：&emsp;&emsp; &emsp; 1.不用侵入性比较高的Servlet.可以直接写普通java类作为处理请求逻辑的处理类.这样更易于测试.&emsp;&emsp; &emsp; 2.整合了一些之前需要手动来做的功能. 后台验证,表单回显,自动将表单参数封装,防止表单重复提交，如果不够用我们还可以扩展框架的功能. Struts2的HelloWorld//--------------------------------- //cn.pinzhi.action.HelloAction //----------------------------- package cn.pinzhi.action; public class HelloAction { public String execute(){ System.out.println(&quot;hello world&quot;); return &quot;success&quot;; // 结果页面命名 } } //----------------------------------------- //src下的struts.xml //------------------------------------------ &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE struts PUBLIC &quot;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN&quot; &quot;http://struts.apache.org/dtds/struts-2.3.dtd&quot;&gt; &lt;struts&gt; &lt;!-- name:单纯的给包起一个名字，不要与其他包名重复 namespace:为action访问加上一层或多层路径 etends：继承一个其他包，目的是引入其他包的配置 --&gt; &lt;package name=&quot;hello&quot; namespace=&quot;/&quot; extends=&quot;struts-default&quot;&gt; &lt;!--name:为action类加上一个标识，在访问时填入name名称，就可以找到action class：action完整类名 method：处理的方法 --&gt; &lt;action name=&quot;hello&quot; class=&quot;cn.pinzhi.action.HelloAction&quot; method=&quot;execute&quot;&gt; &lt;!--name：返回结果的标识，用于找到结果路径 type：可以决定跳转到结果的方式=》转发，重定向。。。 --&gt; &lt;result name=&quot;success&quot;&gt;/success.jsp&lt;/result&gt; &lt;/action&gt; &lt;/package&gt; &lt;/struts&gt; //------------------------------------ //web.xml //------------------------------------ &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot; version=&quot;3.0&quot;&gt; &lt;display-name&gt;helloStruts&lt;/display-name&gt; &lt;!-- 重要：配置struts2的核心过滤器 --&gt; &lt;!--配置struts2的过滤器，要放到其他过滤器后面，保证其他过滤器可以执行 --&gt; &lt;filter&gt; &lt;filter-name&gt;struts2&lt;/filter-name&gt; &lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&lt;/filter-class&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;struts2&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; &lt;/web-app&gt; //--------------------------- struts2的架构struts2的架构图解 struts2中的6个配置文件 default.properties ：用于配置struts 常量。例如：编码 struts-default.xml ：struts提供的默认核心配置文件，struts大部分功能都在此配置文件中。 struts-plugin.xml ： struts插件核心配置文件，struts整合其他框架或工具。 以上三个文件，用户自己不进行修改。 struts.xml ：用户自定义核心配置文件。&emsp; struts.xml 可以配置所有内容，包括：常量,如：&emsp;&emsp; &lt; constant name=”struts.i18n.encoding” value=”GBK”&gt; &lt; /constant&gt; //配置编码 struts.properties ： 用于自定义struts常量配置文件。一般不使用。 web.xml ：也可以配置struts常量@@@注意：如果配置常量，所有的配置文件存在优先级，编号越大优先级越高。 常见的struts常量 用于配置项目编码//struts.i18n.encoding=UTF-8 struts整合spring需要配置，默认注释掉了//struts.objectFactory = spring struts默认使用文件上传解析工具：apache-commons-fileuploadstruts.multipart.parser=jakarta 临时文件保存位置//struts.multipart.saveDir= 上传文件最大大小，默认值：2M，单位字节//struts.multipart.maxSize 用于设置action请求路径扩展名。默认：action或空。多个值使用逗号分隔//struts.action.extension=action,,例如：/hello/userAction 或 /hello/userAction.action 确定是否使用动态方法调用。默认关闭的。//struts.enable.DynamicMethodInvocation = false 设置开发模式，默认关闭。如果设置true：将提供更多提示信息，自动加载文件。//struts.devMode = false 自动重新加载国际化资源文件//struts.i18n.reload = true 自动冲洗加载xml配置文件。例如：struts.xml。但不会自动加载action类。//struts.configuration.xml.reload = true 设置struts标签主题，默认值：xhtml。取值：simple。//struts.ui.theme=xhtml//开发中常用simple。xhtml存在默认布局，开发中布局使用美工提供页面，布局自定义。 struts.xml详解 &lt; constant&gt; 用于配置struts常量—name：struts提供固定常量名称。此名称从 default.properties文件获得—value：常量值例如：&lt;constant name=”struts.devMode” value=”true”&gt; &lt;/constant&gt; &lt;package&gt; struts用于管理所有action类—name：给当前包进行唯一命名，必填项。用于其他包继承的。例如：struts-default.xml//&lt;package name=”struts-default” abstract=”true”&gt; //将struts已经完成的功能，作为一个包存在。名称是固定值struts-default。—namespace：action访问路径前缀。例如：”/““/hello”“/a/b/c”“”—extends：用于继承其他包的。例如：&lt;package extends=”struts-default”&gt; 当前action继承struts已经完成功能。—abstract：是否抽象，如果设置为true，表示没有具体action实现功能。(了解) &lt;action&gt; 用于配置action类（请求处理类）—name：action名称，用于在请求路径进行访问—class：action类全限定类名—method:用于确定action类中需要执行的方法，默认值：execute &lt;result&gt; 用于配置结果集—name：用于确定action类中，方法的返回值—text：标签体用于设置jsp路径—type:结果集类型&emsp; — dispatcher：请求转发，从一个action到jsp页面，默认值。&emsp;— redirect：重定向到jsp页面&emsp;— redirectAction：重定向到另一个action&emsp;— stream：以流的方法发送浏览器，用于文件下载。&emsp;— chain：链，在一次请求中，从一个action到另一个action &lt;result-types&gt; 用于配置结果集类型的，一般不用，但需要看的懂。 &lt;interceptors&gt; 用于配置拦截器— &lt;interceptor&gt; 用于注册拦截器的—&lt;interceptor-stack&gt; 拦截器栈，将已经注册的拦截器组合在一起，形成一个栈。例如：&lt;interceptor-stack name=”defaultStack”&gt; 声明一个拦截器栈，名称是：defaultStack &lt;default-interceptor-ref&gt; 用于确定当前默认拦截器的例如：&lt;default-interceptor-ref name=”defaultStack”/&gt; 将“defaultStack”拦截器栈，声明默认拦截器栈 &lt;default-action-ref&gt; 如果访问的action不存在，默认执行的aciton。例如：/a/b/c/d/oneAction 此aciton没有配置，默认情况返回action找不到!!!如果配置&lt;default-action-ref&gt; 如果存在404时，不显示action找不到，而是指定action &lt;default-class-ref &gt; 用于配置 默认action实现类例如：&lt;default-class-ref class=”com.opensymphony.xwork2.ActionSupport” /&gt;!!!如果编写配置文件时没有声明class属性，及&lt;action name=””&gt; 将执行ActionSupport类。 &lt;include&gt; 将多个struts配置文件组合成一个。struts.xml 入口配置文件，大家共用的。用于存放通用模块。&emsp;&lt;include file=”struts-user.xml” /&gt;&emsp;&lt;include file=”struts-book.xml” /&gt;提供子配置文件&emsp;struts-user.xml&emsp;struts-book.xml 动态方法调用]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>Struts2，ssh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hinernate学习笔记]]></title>
    <url>%2F2018%2F07%2F23%2FHinernate%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[hibernate Hibernate初印象ssh执行的基本流程 hibernate执行的基本流程 准备文件&emsp;download from hibernate.org:&emsp;&emsp; hibernate-annotation-3.4.0.GA.zip&emsp;&emsp; hibernate-distrubution-3.3.2.GA-dist.zip&emsp;&emsp; slf4j-1.5.8.zip 暂停，先学mybatis]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>ssh框架学习 hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown学习与文档]]></title>
    <url>%2F2018%2F07%2F22%2Fartical-title%2F</url>
    <content type="text"><![CDATA[第一篇markdown文档markdown语法标题标题1标题2 区块引用1 区块引用2 区块引用3 无序列表 1 2 3 1 2 3 有序列表 1 2 2 1 2 分割线 代码块* //两个tap代码块/8个空格+字符 int i = 0; int j =i; * 行内链接 行内参考式1 行内参考式2 强调1强调2强调3 句内代码 aa块Use the printf() function. http://www.baidu.com普通连接 转义符*> 表格 列1（右对齐） 列2（居中） 列3（左对齐） A B C D E F]]></content>
      <categories>
        <category>TestDoc</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F07%2F22%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>

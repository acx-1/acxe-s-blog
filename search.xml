<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>SpringMVC学习笔记</title>
      <link href="/2018/08/27/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/08/27/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote><p>Tips:本笔记主要信息来自于传智播客2015年胡斌SpringMVC备课笔记。笔记内容为：学习资料 + 个人补充；如有内容或排版方面的错误，欢迎纠正~</p></blockquote><h1 id="SpringMVC介绍"><a href="#SpringMVC介绍" class="headerlink" title="SpringMVC介绍"></a>SpringMVC介绍</h1><h2 id="为什么使用SpringMVC？"><a href="#为什么使用SpringMVC？" class="headerlink" title="为什么使用SpringMVC？"></a>为什么使用SpringMVC？</h2><p>&emsp;&emsp;很多应用程序的问题在于处理业务数据和显示业务数据的视图的对象之间存在紧密耦合。通常，更新业务对象的命令都是从视图本身发起的，使视图对任何业务对象更改都有高度敏感性。而且，当多个视图依赖于同一个业务对象时是没有灵活性的。<br>&emsp;&emsp;Spring Web MVC是一种基于Java的实现了Web MVC设计模式的请求驱动类型的轻量级Web框架，即使用了MVC架构模式的思想，将web层进行职责解耦，基于请求驱动指的就是使用请求-响应模型，框架的目的就是帮助我们简化开发，Spring Web MVC也是要简化我们日常Web开发的。<br><!-- moore --></p><h2 id="MVC设计模型"><a href="#MVC设计模型" class="headerlink" title="MVC设计模型"></a>MVC设计模型</h2><p>&emsp;&emsp;MVC 是一种著名的设计模式，特别是在 Web 应用程序领域。模式全都是关于将包含业务数据的模块与显示模块的视图解耦的。这是怎样发生的？视图（例如，JSP 页面）怎样能够与其模型（例如，包含数据的 JavaBean）解耦？记得这句格言么？一个层次的重定向几乎可以解决计算机业中的所有问题。确实，在模型和视图之间引入重定向层可以解决问题。此重定向层是控制器。控制器将接收请求，执行更新模型的操作，然后通知视图关于模型更改的消息。依赖于模型的状态并且依赖于请求的控制器可以决定要显示哪个视图。图 1 演示了这种模式。</p><p><img src="/images/SpringMVC/mvc%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.png" alt="mvc设计模式"></p><h2 id="SpringMVC的强大之处"><a href="#SpringMVC的强大之处" class="headerlink" title="SpringMVC的强大之处"></a>SpringMVC的强大之处</h2><ol><li>Spring MVC 实现了即用的 MVC 的核心概念。它为控制器和处理程序提供了大量与此模式相关的功能。并且当向 MVC 添加反转控制（Inversion of Control，IoC）时，它使应用程序高度解耦，提供了通过简单的配置更改即可动态更改组件的灵活性。Spring MVC 为您提供了完全控制应用程序的各个方面的力量。</li><li>Spring 的 Web MVC 模块是围绕 DispatcherServlet 而设计的。DispatcherServlet 给处理程序分派请求，执行视图解析，并且处理语言环境和主题解析，此外还为上传文件提供支持。</li><li>DispatcherServlet 通过使用处理程序映射来决定哪一个处理程序应当处理传入的请求。处理程序映射只是用于标识使用哪一个处理程序来处理特定 URL 模式的映射。处理程序是只有一种方法 ModelAndView handleRequest(request,response) 的控制器接口的实现。Spring 还有一些可用的高级处理程序实现；其中一个重要的高级处理程序实现是 SimpleFormController，它提供了将命令对象绑定到表单、对其执行验证等功能。</li><li>在本系列教程(传智播客黑马程序员系列)的先前教程中使用了 DispatcherServlet 和简单的处理程序。在下一个部分中，将使用 SimpleFormController 并说明 Spring MVC 提供的各种即用功能。</li></ol><h2 id="springMVC优势"><a href="#springMVC优势" class="headerlink" title="springMVC优势"></a>springMVC优势</h2><ul><li>清晰的角色划分：前端控制器（DispatcherServlet）、请求到处理器映射（HandlerMapping）、处理器适配器（HandlerAdapter）、视图解析器（ViewResolver）、处理器或页面控制器（Controller）、验证器（ Validator）、命令对象（Command  请求参数绑定到的对象就叫命令对象）、表单对象（Form Object 提供给表单展示和提交到的对象就叫表单对象）。</li><li>分工明确，而且扩展点相当灵活，可以很容易扩展，虽然几乎不需要；</li><li>由于命令对象就是一个POJO，无需继承框架特定API，可以使用命令对象直接作为业务对象；</li><li>和Spring 其他框架无缝集成，是其它Web框架所不具备的；</li><li>可适配，通过HandlerAdapter可以支持任意的类作为处理器；</li><li>可定制性，HandlerMapping、ViewResolver等能够非常简单的定制；</li><li>功能强大的数据验证、格式化、绑定机制；</li><li>利用Spring提供的Mock对象能够非常简单的进行Web层单元测试；</li><li>本地化、主题的解析的支持，使我们更容易进行国际化和主题的切换。</li><li>强大的JSP标签库，使JSP编写更容易。<br>………………还有比如RESTful风格的支持、简单的文件上传、约定大于配置的契约式编程支持、基于注解的零配置支持等等。</li></ul><h2 id="SpringMVC的运行原理"><a href="#SpringMVC的运行原理" class="headerlink" title="SpringMVC的运行原理"></a>SpringMVC的运行原理</h2><h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><p><img src="/images/SpringMVC/%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="架构图"></p><h3 id="传统的MVC架构"><a href="#传统的MVC架构" class="headerlink" title="传统的MVC架构"></a>传统的MVC架构</h3><p><img src="/images/SpringMVC/mvc%E6%9E%B6%E6%9E%841.png" alt="mvc架构1"></p><p>&emsp;&emsp;首先让我们了解下 MVC（Model-View-Controller）三元组的概念：</p><ul><li>Model（模型）：数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或 JavaBean 组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据） 和 服务层（行为）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。<br>领域模型，javaBean组件等价于 域模型层 + 业务逻辑层 + 持久层</li><li>View(视图):负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</li><li>Controller(控制器):接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。 也就是说控制器做了个调度员的工作，。<br>从上图我们还看到，在标准的 MVC 中模型能主动推数据给视图进行更新（观察者设计模式，在模型上注册视图，当模型更新时自动更新视图），但在 Web 开发中模型是无法主动推给视图（无法主动更新用户界面），因为在 Web 开发是请求-响应模型。<br><img src="/images/SpringMVC/mvc%E6%9E%B6%E6%9E%842.png" alt="mvc架构2"></li></ul><p>&emsp;&emsp;核心架构的具体流程步骤如下：</p><ol><li>首先用户发送请求——&gt;DispatcherServlet，前端控制器收到请求后自己不进行处理，而是委托给其他的解析器进行处理，作为统一访问点，进行全局的流程控制；</li><li>DispatcherServlet——&gt;HandlerMapping,HandlerMapping将会把请求映射为HandlerExecutionChain对象（包含一个Handler处理器（页面控制器）对象、多个HandlerInterceptor拦截器）对象，通过这种策略模式，很容易添加新的映射策略；</li><li>DispatcherServlet——&gt;HandlerAdapter，HandlerAdapter将会把处理器包装为适配器，从而支持多种类型的处理器，即适配器设计模式的应用，从而很容易支持很多类型的处理器；</li><li>HandlerAdapter——&gt;处理器功能处理方法的调用，HandlerAdapter将会根据适配的结果调用真正的处理器的功能处理方法，完成功能处理；并返回一个ModelAndView对象（包含模型数据、逻辑视图名）；</li><li>ModelAndView的逻辑视图名——&gt; ViewResolver， ViewResolver将把逻辑视图名解析为具体的View，通过这种策略模式，很容易更换其他视图技术；</li><li>View——&gt;渲染，View会根据传进来的Model模型数据进行渲染，此处的Model实际是一个Map数据结构，因此很容易支持其他视图技术；</li><li>返回控制权给DispatcherServlet，由DispatcherServlet返回响应给用户，到此一个流程结束。</li></ol><h2 id="DispatcherServlet核心代码分析"><a href="#DispatcherServlet核心代码分析" class="headerlink" title="DispatcherServlet核心代码分析"></a>DispatcherServlet核心代码分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前端控制器分派方法  </span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        HttpServletRequest processedRequest = request;  </span><br><span class="line">        HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;  </span><br><span class="line">        <span class="keyword">int</span> interceptorIndex = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            ModelAndView mv;  </span><br><span class="line">            <span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;    </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="comment">//检查是否是请求是否是multipart（如文件上传），如果是将通过MultipartResolver解析  </span></span><br><span class="line">                processedRequest = checkMultipart(request);  </span><br><span class="line">         <span class="comment">//步骤2、请求到处理器（页面控制器）的映射，通过HandlerMapping进行映射  </span></span><br><span class="line">                mappedHandler = getHandler(processedRequest, <span class="keyword">false</span>);  </span><br><span class="line">                <span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span> || mappedHandler.getHandler() == <span class="keyword">null</span>) &#123;  </span><br><span class="line">                    noHandlerFound(processedRequest, response);  </span><br><span class="line">                    <span class="keyword">return</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">         <span class="comment">//步骤3、处理器适配，即将我们的处理器包装成相应的适配器（从而支持多种类型的处理器）  </span></span><br><span class="line">                HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());    </span><br><span class="line">                <span class="comment">// 304 Not Modified缓存支持  </span></span><br><span class="line">                <span class="comment">//此处省略具体代码    </span></span><br><span class="line">                <span class="comment">// 执行处理器相关的拦截器的预处理（HandlerInterceptor.preHandle）  </span></span><br><span class="line">                <span class="comment">//此处省略具体代码    </span></span><br><span class="line">                <span class="comment">// 步骤4、由适配器执行处理器（调用处理器相应功能处理方法）  </span></span><br><span class="line">                mv = ha.handle(processedRequest, response, mappedHandler.getHandler());    </span><br><span class="line">                <span class="comment">// Do we need view name translation?  </span></span><br><span class="line">                <span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.hasView()) &#123;  </span><br><span class="line">                    mv.setViewName(getDefaultViewName(request));  </span><br><span class="line">                &#125;    </span><br><span class="line">                <span class="comment">// 执行处理器相关的拦截器的后处理（HandlerInterceptor.postHandle）  </span></span><br><span class="line">                <span class="comment">//此处省略具体代码  </span></span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">catch</span> (ModelAndViewDefiningException ex) &#123;  </span><br><span class="line">                logger.debug(<span class="string">"ModelAndViewDefiningException encountered"</span>, ex);  </span><br><span class="line">                mv = ex.getModelAndView();  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">catch</span> (Exception ex) &#123;  </span><br><span class="line">                Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);  </span><br><span class="line">                mv = processHandlerException(processedRequest, response, handler, ex);  </span><br><span class="line">                errorView = (mv != <span class="keyword">null</span>);  </span><br><span class="line">            &#125;    </span><br><span class="line">          <span class="comment">//步骤5 步骤6、解析视图并进行视图的渲染  </span></span><br><span class="line">          <span class="comment">//步骤5 由ViewResolver解析View（viewResolver.resolveViewName(viewName, locale)）  </span></span><br><span class="line">          <span class="comment">//步骤6 视图在渲染时会把Model传入（view.render(mv.getModelInternal(), request, response);）  </span></span><br><span class="line">            <span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;  </span><br><span class="line">                render(mv, processedRequest, response);  </span><br><span class="line">                <span class="keyword">if</span> (errorView) &#123;  </span><br><span class="line">                    WebUtils.clearErrorRequestAttributes(request);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;  </span><br><span class="line">                    logger.debug(<span class="string">"Null ModelAndView returned to DispatcherServlet with name '"</span> + getServletName() +  </span><br><span class="line">                            <span class="string">"': assuming HandlerAdapter completed request handling"</span>);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;    </span><br><span class="line">            <span class="comment">// 执行处理器相关的拦截器的完成后处理（HandlerInterceptor.afterCompletion）  </span></span><br><span class="line">            <span class="comment">//此处省略具体代码    </span></span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;  </span><br><span class="line">            <span class="comment">// Trigger after-completion for thrown exception.  </span></span><br><span class="line">            triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, ex)            <span class="keyword">throw</span> ex;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">catch</span> (Error err) &#123;  </span><br><span class="line">            ServletException ex = <span class="keyword">new</span> NestedServletException(<span class="string">"Handler processing failed"</span>, err);  </span><br><span class="line">            <span class="comment">// Trigger after-completion for thrown exception.  </span></span><br><span class="line">            triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, ex);  </span><br><span class="line">            <span class="keyword">throw</span> ex;  </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">finally</span> &#123;  </span><br><span class="line">            <span class="comment">// Clean up any resources used by a multipart request.  </span></span><br><span class="line">            <span class="keyword">if</span> (processedRequest != request) &#123;</span><br><span class="line">                cleanupMultipart(processedRequest);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="SpringMVC的第一个程序"><a href="#SpringMVC的第一个程序" class="headerlink" title="SpringMVC的第一个程序"></a>SpringMVC的第一个程序</h1><ol><li><p>创建一个javaweb工程<br> 包：cn.itcast.controller</p></li><li><p>导入Spring的jar包<br><img src="/images/SpringMVC/springmvc-first%E5%8C%85%E5%88%97%E8%A1%A8.png" alt="springmvc-first包列表"></p></li><li><p>配置DispatcherServlet核心分发器(web.xml)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--我们经常使用的配置文件加载方式--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  &lt;init-param&gt;</span></span><br><span class="line"><span class="comment">  &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span></span><br><span class="line"><span class="comment">  &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;</span></span><br><span class="line"><span class="comment">  &lt;/init-param&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载默认mvc配置文件：springname-servlet.xml ,必须放在WEB-INF下面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>//或者使用默认拦截/</span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>说明：/和<code>/*</code>的区别？<br>&emsp;&emsp;可以实现现在很流行的REST风格。很多互联网类型的应用很喜欢这种风格的URL。<br>&emsp;&emsp;弊端：会导致静态文件（jpg,js,css）被拦截后不能正常显示。想实现REST风格，事情就是麻烦一些。后面有解决办法还算简单。<br>&emsp;&emsp;拦截<code>/*</code>，这是一个错误的方式，请求可以走到Action中，但转到jsp时再次被拦截，不能访问到jsp。</p><ol start="4"><li><p>配置handlerMapping映射器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.1.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-3.1.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-3.1.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx-3.1.xsd "</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 处理器映射器 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 根据bean的name进行查找Handler 将action的url配置在bean的name中 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这是一个默认的映射处理器,即使不配置，那么也是默认就是这个 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置handlerAdapter适配器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//注意：这个适配器不是必须配置的，这是默认的、他在servlet容器已启动就被加载。</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写一个Controller类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class TestController implements Controller&#123;</span><br><span class="line">  @Override</span><br><span class="line">  public ModelAndView handleRequest(HttpServletRequest request,</span><br><span class="line">  HttpServletResponse response) throws Exception &#123;</span><br><span class="line">    /**</span><br><span class="line">    * 1.收集参数、验证参数</span><br><span class="line">    * 2.绑定参数到命令对象</span><br><span class="line">    * 3.将命令对象传入业务对象进行处理</span><br><span class="line">    * 4.选择视图</span><br><span class="line">    */</span><br><span class="line">    ModelAndView mv = new ModelAndView();</span><br><span class="line">    //添加模型数据，那么这个数据可以是任意的POJO对象。</span><br><span class="line">    mv.addObject("hello","hello world!!");</span><br><span class="line">    //设置逻辑视图名，视图解析器会根据该名字解析到具体的视图界面</span><br><span class="line">    mv.setViewName("/WEB-INF/jsps/hello.jsp");</span><br><span class="line">    return mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置自定义控制器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置自定义controller ,使用beanName:name=”/hello.do”进行进行请求映射匹配--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"/hello.do"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.test.TestController"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义一个响应页面(hello.jsp)</p></li><li><p>配置视图解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用视图解析器解析逻辑视图，这样跟方便，易于扩展。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--逻辑视图前缀--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsps/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--逻辑视图后缀，匹配模式：前缀+逻辑视图+后缀，形成完整路径名--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="程序执行流程"><a href="#程序执行流程" class="headerlink" title="程序执行流程"></a>程序执行流程</h2><p><img src="/images/SpringMVC/%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="程序执行流程"></p><p>1、  首先用户发送请求<code>http://localhost:9080/springmvc-01/hello`</code>——&gt;web容器，web容器根据“/hello”路径映射到DispatcherServlet（url-pattern为/）进行处理；<br>2、  DispatcherServlet——&gt;BeanNameUrlHandlerMapping进行请求到处理的映射，BeanNameUrlHandlerMapping将“/hello”路径直接映射到名字为“/hello”的Bean进行处理，即HelloWorldController，BeanNameUrlHandlerMapping将其包装为HandlerExecutionChain（只包括HelloWorldController处理器，没有拦截器)<br>3、DispatcherServlet——&gt; SimpleControllerHandlerAdapter，SimpleControllerHandlerAdapter将HandlerExecutionChain中的处理器(HelloWorldController)适配为SimpleControllerHandlerAdapter；<br>4、  SimpleControllerHandlerAdapter——&gt; HelloWorldController处理器功能处理方法的调用，SimpleControllerHandlerAdapter将会调用处理器的handleRequest方法进行功能处理，该处理方法返回一个ModelAndView给DispatcherServlet；<br>5、  hello（ModelAndView的逻辑视图名）——&gt;InternalResourceViewResolver， InternalResourceViewResolver使用JstlView，具体视图页面在/WEB-INF/jsp/hello.jsp；<br>6、  JstlView（/WEB-INF/jsp/hello.jsp）——&gt;渲染，将在处理器传入的模型数据(message=HelloWorld！)在视图中展示出来；<br>7、  返回控制权给DispatcherServlet，由DispatcherServlet返回响应给用户，到此一个流程结束。<br>到此HelloWorld就完成了，步骤是不是有点多？而且回忆下我们主要进行了如下配置：<br>1、  前端控制器DispatcherServlet；<br>2、  HandlerMapping<br>3、  HandlerAdapter<br>4、  ViewResolver<br>5、  处理器/页面控制器<br>6、  视图</p><h1 id="HandlerMapping"><a href="#HandlerMapping" class="headerlink" title="HandlerMapping"></a>HandlerMapping</h1><h2 id="BeanNameUrlHandlerMapping"><a href="#BeanNameUrlHandlerMapping" class="headerlink" title="BeanNameUrlHandlerMapping"></a>BeanNameUrlHandlerMapping</h2><p>&emsp;&emsp;根据url请求去匹配bean的name属性url，从而获取Controller。HandlerMapping 将会把请求映射为 HandlerExecutionChain 对象（包含一个 Handler 处理器（页面控制器）对象、多个 HandlerInterceptor 拦截器）对象，通过这种策略模式，很容易添加新的映射策略;<br>配置案例：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//默认映射器，即使不配置，默认就使用这个来映射请求。</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">//映射器把请求映射到controller</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testController"</span> <span class="attr">name</span>=<span class="string">"/hello.do"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.controller.TestController"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="SimpleUrlHandlerMapping"><a href="#SimpleUrlHandlerMapping" class="headerlink" title="SimpleUrlHandlerMapping"></a>SimpleUrlHandlerMapping</h2><p>&emsp;&emsp; 根据浏览器url匹配简单url的key，key又Controller的id找到Controller<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/hello1.do"</span>&gt;</span>testController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/a.do"</span>&gt;</span>testController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">//那么上面的这个映射配置：表示多个*.do文件可以访问多个Controller或者一个Controller。</span><br><span class="line">//前提是：都必须依赖自定义的控制器bean</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testController"</span> <span class="attr">name</span>=<span class="string">"/hello.do"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.controller.TestController"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="ControllerClassNameHandlerMapping"><a href="#ControllerClassNameHandlerMapping" class="headerlink" title="ControllerClassNameHandlerMapping"></a>ControllerClassNameHandlerMapping</h2><p>&emsp;&emsp; 根据类名（MyController）类名.do来访问,类名首字母小写<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//这个Mapping一配置：我们就可以使用Contrller的 [类名.do]来访问这个Controller.</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="HandlerMapping架构图"><a href="#HandlerMapping架构图" class="headerlink" title="HandlerMapping架构图"></a>HandlerMapping架构图</h2><p><img src="/images/SpringMVC/HandlerMapping%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="HandlerMapping架构图"><br><strong>总结：</strong>多个映射器可以共存。相互不影响。<br>&emsp;&emsp;测试策略：三个映射器全部存在于配置文件中，使用映射器的不同访问方式，全部可以访问成功。</p><h1 id="HandlerAdapter"><a href="#HandlerAdapter" class="headerlink" title="HandlerAdapter"></a>HandlerAdapter</h1><h2 id="SimpleControllerHandlerAdapter"><a href="#SimpleControllerHandlerAdapter" class="headerlink" title="SimpleControllerHandlerAdapter"></a>SimpleControllerHandlerAdapter</h2><p>SimpleControllerHandlerAdapter:    执行controller，调用controller里面方法，返回modelAndView。<br>&emsp;&emsp;表示所有实现了org.springframework.web.servlet.mvc.Controller 接口的Bean 可以作为Spring Web MVC 中的处理器。如果需要其他类型的处理器可以通过实现 HadlerAdapter 来解决。<br>案例分析：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">①　模拟一个handlerAdapter</span><br><span class="line"><span class="comment">//定义一个Adapter接口  </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerAdapter</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span></span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Object handler)</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">②　模拟一个Controller</span><br><span class="line"><span class="comment">//以下是三种Controller实现  </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Controller</span> </span>&#123;    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpController</span> <span class="keyword">implements</span> <span class="title">Controller</span></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doHttpHandler</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"http..."</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleController</span> <span class="keyword">implements</span> <span class="title">Controller</span></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSimplerHandler</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"simple..."</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationController</span> <span class="keyword">implements</span> <span class="title">Controller</span></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAnnotationHandler</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"annotation..."</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">③　适配器  </span><br><span class="line"><span class="comment">//下面编写适配器类 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleHandlerAdapter</span> <span class="keyword">implements</span> <span class="title">HandlerAdapter</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Object handler)</span> </span>&#123;  </span><br><span class="line">        ((SimpleController)handler).doSimplerHandler();  </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> (handler <span class="keyword">instanceof</span> Controller);  </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpHandlerAdapter</span> <span class="keyword">implements</span> <span class="title">HandlerAdapter</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Object handler)</span> </span>&#123;  </span><br><span class="line">        ((HttpController)handler).doHttpHandler();  </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> (handler <span class="keyword">instanceof</span> Controller);  </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationHandlerAdapter</span> <span class="keyword">implements</span> <span class="title">HandlerAdapter</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Object handler)</span> </span>&#123;  </span><br><span class="line">        ((AnnotationController)handler).doAnnotationHandler();  </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span> </span>&#123;            </span><br><span class="line">        <span class="keyword">return</span> (handler <span class="keyword">instanceof</span> Controller);  </span><br><span class="line">    &#125;    </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">④　DispatcherServlet</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dispatcher</span> </span>&#123;        </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;HandlerAdapter&gt; handlerAdapters = <span class="keyword">new</span> ArrayList&lt;HandlerAdapter&gt;();    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DispatchServlet</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        handlerAdapters.add(<span class="keyword">new</span> AnnotationHandlerAdapter());  </span><br><span class="line">        handlerAdapters.add(<span class="keyword">new</span> HttpHandlerAdapter());  </span><br><span class="line">        handlerAdapters.add(<span class="keyword">new</span> SimpleHandlerAdapter());  </span><br><span class="line">    &#125;       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">()</span></span>&#123;            </span><br><span class="line">        <span class="comment">//此处模拟SpringMVC从request取handler的对象，仅仅new出，可以出，               </span></span><br><span class="line">         <span class="comment">//不论实现何种Controller，适配器总能经过适配以后得到想要的结果  </span></span><br><span class="line">        <span class="comment">// HttpController controller = new HttpController();  </span></span><br><span class="line">      <span class="comment">// AnnotationController controller = new AnnotationController();  </span></span><br><span class="line">        SimpleController controller = <span class="keyword">new</span> SimpleController();  </span><br><span class="line">        <span class="comment">//得到对应适配器  </span></span><br><span class="line">        HandlerAdapter adapter = getHandler(controller);  </span><br><span class="line">        <span class="comment">//通过适配器执行对应的controller对应方法  </span></span><br><span class="line">        adapter.handle(controller);            </span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="function"><span class="keyword">public</span> HandlerAdapter <span class="title">getHandler</span><span class="params">(Controller controller)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">for</span>(HandlerAdapter adapter: <span class="keyword">this</span>.handlerAdapters)&#123;  </span><br><span class="line">            <span class="keyword">if</span>(adapter.supports(controller))&#123;  </span><br><span class="line">                <span class="keyword">return</span> adapter;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">new</span> DispatchServlet().doDispatch();  </span><br><span class="line">    &#125;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;通过一个简单的Adapter源码分析，发现原来适配器功能这么强大，设计的如此精妙，果然不同凡响。</p><h2 id="HttpRequestHandlerAdapter"><a href="#HttpRequestHandlerAdapter" class="headerlink" title="HttpRequestHandlerAdapter"></a>HttpRequestHandlerAdapter</h2><p>&emsp;&emsp;HTTP请求处理器适配器将http请求封装成HttpServletResquest 和HttpServletResponse对象，和servlet接口类似<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">第一步：配置HttpRequestHandlerAdapter适配器</span><br><span class="line">    &lt;!-- 配置HttpRequestHandlerAdapter适配器 --&gt;</span><br><span class="line">&lt;bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">第二步：编写Controller</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpRequestController</span> <span class="keyword">implements</span> <span class="title">HttpRequestHandler</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">request.setAttribute(<span class="string">"message"</span>, <span class="string">"我是中国人"</span>);</span><br><span class="line">request.getRequestDispatcher(<span class="string">"/WEB-INF/jsps/mess.jsp"</span>).forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">第三步：准备jsp页面</span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;这是我的第二个适配器&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;$&#123;message &#125;&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">第四步：调试运行</span><br></pre></td></tr></table></figure></p><p><strong>总结：</strong>适配器可以共存，只是控制器实现不同的接口使用不同的适配器而已。<br>&emsp;&emsp;注意：SimpleControllerHandlerAdapter是默认的适配器。如果使用后面这个适配器必须手动配置。否则将会访问失败。<br>&emsp;&emsp;实现了HttpRequestHandler接口：配置文件里面没有配置这个适配器报如下错误：<br>&emsp;&emsp;No adapter for handler [springMVC_01.HttpRequestController@12d527f]: Does your handler implement a supported interface like Controller?<br>&emsp;&emsp;通过这个错误,我们发现：实现Controller接口是默认的，既是说明：SimpleControllerHandlerAdapter是默认的适配器<br> &emsp;&emsp;还必须注意：实现HttpRequestHandler接口的控制器不支持ControllerClassNameHandlerMapping这个处理器映射器。</p><h1 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h1><h2 id="控制器架构图"><a href="#控制器架构图" class="headerlink" title="控制器架构图"></a>控制器架构图</h2><p><img src="/images/SpringMVC/%E6%8E%A7%E5%88%B6%E5%99%A8%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="控制器架构图"></p><h2 id="Controller-简介"><a href="#Controller-简介" class="headerlink" title="Controller 简介"></a>Controller 简介</h2><p>1、收集、验证请求参数并绑定到命令对象；<br>2、将命令对象交给业务对象，由业务对象处理并返回模型数据；<br>3、返回ModelAndView（Model部分是业务对象返回的模型数据，视图部分为逻辑视图名）。</p><h2 id="ServletForwardingController-转发控制器"><a href="#ServletForwardingController-转发控制器" class="headerlink" title="ServletForwardingController(转发控制器)"></a>ServletForwardingController(转发控制器)</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将接收到的请求转发到一个命名的servlet，具体示例如下：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForwardingServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;      </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span>  </span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;    </span><br><span class="line">        resp.getWriter().write(<span class="string">"Controller forward to Servlet"</span>);            </span><br><span class="line">    &#125;  &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;servlet&gt;  </span><br><span class="line">    &lt;servlet-name&gt;forwarding&lt;/servlet-name&gt;  </span><br><span class="line">    &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">cn</span>.<span class="title">javass</span>.<span class="title">chapter4</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">ForwardingServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;  </span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>&gt; </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//当我们请求/<span class="title">forwardToServlet</span>时，会被转发到名字为“<span class="title">forwarding</span>”的<span class="title">servlet</span>处理，该<span class="title">sevlet</span>的<span class="title">servlet</span>-<span class="title">mapping</span>标签配置是可选的。</span></span><br><span class="line"><span class="class">&lt;!— 在<span class="title">springmvc</span>.<span class="title">xml</span>配置处理器 --&gt;     </span></span><br><span class="line"><span class="class">&lt;<span class="title">bean</span> <span class="title">name</span></span>=<span class="string">"/forwardToServlet"</span>   </span><br><span class="line"><span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.mvc.ServletForwardingController"</span>&gt;  </span><br><span class="line">        &lt;property name="servletName" value="forwarding"&gt;&lt;/property&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="命令控制器-AbstractCommandController"><a href="#命令控制器-AbstractCommandController" class="headerlink" title="命令控制器(AbstractCommandController)"></a>命令控制器(AbstractCommandController)</h2><h3 id="通过get请求方式传递参数"><a href="#通过get请求方式传递参数" class="headerlink" title="通过get请求方式传递参数"></a>通过get请求方式传递参数</h3><p>①　命令控制器编写<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandController</span> <span class="keyword">extends</span> <span class="title">AbstractCommandController</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommandController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setCommandClass(Student.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * command:命令对象</span></span><br><span class="line"><span class="comment">     * errors：数据绑定出现错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletResponse response, Object command, BindException errors)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    Student s = (Student) command;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    mv.setViewName(<span class="string">"add/success"</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>②　配置bean<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置命令控制器bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"/add.do"</span> <span class="attr">class</span>=<span class="string">"springMVC_01.CommandController"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>③　编写JSP页面(add/add.jsp)</p><p>④　传递参数<br>访问路径：<code>localhost:8080/springmvc/add.do?name=zhangsan&amp;password=123</code></p><h3 id="使用post请求进行表单提交"><a href="#使用post请求进行表单提交" class="headerlink" title="使用post请求进行表单提交"></a>使用post请求进行表单提交</h3><p>模拟提交学生表单信息：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">①　编写跳转命令控制器(跳转到添加页面)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * command:命令对象</span></span><br><span class="line"><span class="comment"> * errors：数据绑定出现错误</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, Object command, BindException errors)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">mv.setViewName(<span class="string">"add/add"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> mv;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">②　编写编辑页面控制器(填写添加数据)</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * command:命令对象</span></span><br><span class="line"><span class="comment"> * errors：数据绑定出现错误</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, Object command, BindException errors)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Student s = (Student) command;</span><br><span class="line">System.out.println(s);</span><br><span class="line">ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">mv.setViewName(<span class="string">"add/success"</span>);</span><br><span class="line"><span class="keyword">return</span> mv;&#125; </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">ServletRequestDataBinder binder)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 设置将页面字符串类型的数据转换成命令对象中Date属性,注意：这里的Date类型和命令对象的Date都使用Java.util.Date</span></span><br><span class="line">binder.registerCustomEditor(Date.class, <span class="keyword">new</span> CustomDateEditor(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>), <span class="keyword">true</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//也可以进行条件判断：进行时间类型各种格式的覆盖</span></span><br><span class="line"> </span><br><span class="line">③　添加页面</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath &#125;/add.do"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line"> 姓名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>&gt;&lt;br/&gt;</span><br><span class="line"> 密码:&lt;input type=<span class="string">"text"</span> name=<span class="string">"password"</span>&gt;&lt;br/&gt;</span><br><span class="line"> 日期:&lt;input type=<span class="string">"text"</span> name=<span class="string">"birthday"</span>&gt;&lt;br/&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt; &lt;br/&gt;</span><br><span class="line"> &lt;/form&gt;</span><br><span class="line">④　成功页面</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;成功提示页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;恭喜登陆！！！&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p><h2 id="参数控制器-ParameterizableViewController"><a href="#参数控制器-ParameterizableViewController" class="headerlink" title="参数控制器(ParameterizableViewController)"></a>参数控制器(ParameterizableViewController)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span><span class="attr">name</span>=<span class="string">"/toIndex.do"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.ParameterizableViewController"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置你所要跳转到视图的名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewName"</span> <span class="attr">value</span>=<span class="string">"index"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>//跳转到index页面</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">//注意：使用参数控制器：不用自己定义Controller，可以直接使用toIndex进行访问</span><br></pre></td></tr></table></figure><h1 id="使用注解的方式实现SpringMVC"><a href="#使用注解的方式实现SpringMVC" class="headerlink" title="使用注解的方式实现SpringMVC"></a>使用注解的方式实现SpringMVC</h1><h2 id="注解快速入门"><a href="#注解快速入门" class="headerlink" title="注解快速入门"></a>注解快速入门</h2><ul><li><p>新建一个web工程并导入jar包</p></li><li><p>配置springMVC配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.1.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-3.1.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-3.1.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx-3.1.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加注解扫描!!! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.itcast"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加注解映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注解适配器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsps/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 注解映射器和注解适配器可以使用&lt;mvc:annotation-driven /&gt;代替。</span></span><br><span class="line"><span class="comment">      &lt;mvc:annotation-driven /&gt;默认注册了注解映射器和注解适配器等bean。</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置web.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>springMVC_01<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>character<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>character<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyOneController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/fun"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写hello的JSP页面</p></li></ul><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><ul><li>@Controller：用于标识是处理器类.表示把我的控制器对象交给spring来创建。</li><li>Controller起作用：只需要扫描即可。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加注解扫描!!! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.itcast"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h2><p>&emsp;    &emsp;@RequestMapping：请求到处理器功能方法的映射规则；<br>&emsp;&emsp;URL路径映射：<code>@RequestMapping(value=&quot;/user&quot;)或@RequestMapping(&quot;/user&quot;)</code></p><p>&emsp;&emsp;RequestMapping请求方法限定：get、post</p><ul><li><p>Get请求乱码<br>&emsp;&emsp;对于get请求中文参数出现乱码解决方法有两个：<br>&emsp;&emsp;修改tomcat配置文件添加编码与工程编码一致，如下：<br><code>&lt;Connector URIEncoding=&quot;utf-8&quot; connectionTimeout=&quot;20000&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; redirectPort=&quot;8443&quot;/&gt;</code><br>&emsp;&emsp;另外一种方法对参数进行重新编码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String userName =new</span><br><span class="line">String(request.getParamter("userName").getBytes("ISO8859-1"),"utf-8")</span><br><span class="line">ISO8859-1是tomcat默认编码，需要将tomcat编码后的内容按utf-8编码</span><br></pre></td></tr></table></figure></li><li><p>Post请求<br>&emsp;&emsp;在web.xml中加入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;URL模板映射</p><ul><li>需求：将修改请求方式改变<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value="/useredit/&#123;userId&#125;")：&#123;×××&#125;占位符，请求的URL可以是“/useredit/001”或“/useredit/abc”，通过在方法中使用@PathVariable获取&#123;×××&#125;中的×××变量</span><br><span class="line"></span><br><span class="line">    @RequestMapping("/useredit/&#123;userid&#125;")</span><br><span class="line">public String useredit(@PathVariable String userid,Model model) throws Exception&#123;</span><br><span class="line">//方法中使用@PathVariable获取useried的值，使用model传回页面</span><br><span class="line">model.addAttribute("userid", userid);</span><br><span class="line">return"/user/useredit";</span><br><span class="line">&#125;</span><br><span class="line">//实现restFul,所有的url都是一个资源的链接，有利于搜索引擎对网址收录。</span><br><span class="line"></span><br><span class="line">//多个占位符：</span><br><span class="line">    @RequestMapping("/useredit/&#123;groupid&#125;/&#123;userid&#125;")</span><br><span class="line">    public String useredit(@PathVariable String groupid,@PathVariable String userid,Model model) throws Exception&#123;</span><br><span class="line">    //方法中使用@PathVariable获取useried的值，使用model传回页面</span><br><span class="line">    model.addAttribute("groupid", groupid);</span><br><span class="line">    model.addAttribute("userid", userid);</span><br><span class="line">    return"/user/useredit";</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;根路径+子路径<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">根路径：</span><br><span class="line">    @RequestMapping放在类名上边，如下：</span><br><span class="line">    @Controller</span><br><span class="line">    @RequestMapping("/user")</span><br><span class="line">子路径</span><br><span class="line">    @RequestMapping放在方法名上边，如下：</span><br><span class="line">    @RequestMapping("/useradd")</span><br><span class="line">    public String useradd(…</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;请求方法限定<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">•@RequestMapping(method = RequestMethod.GET)</span><br><span class="line">如果通过Post访问则报错：</span><br><span class="line">HTTP Status 405 - Request method 'POST' not supported</span><br><span class="line">例如：</span><br><span class="line">@RequestMapping(value="/useredit/&#123;userid&#125;",method=RequestMethod.GET)</span><br><span class="line"></span><br><span class="line">•限定POST方法</span><br><span class="line">@RequestMapping(method = RequestMethod.POST)</span><br><span class="line">如果通过Post访问则报错：</span><br><span class="line">HTTP Status 405 - Request method 'GET' not supported</span><br><span class="line"></span><br><span class="line">•GET和POST都可以</span><br><span class="line">@RequestMapping(method=&#123;RequestMethod.GET,RequestMethod.POST&#125;)</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;需要注解映射器(默认使用)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加注解映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;需要使用注解适配器(默认使用)<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注解适配器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;参数传递【请求参数绑定】<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////默认支持的参数类型////</span></span><br><span class="line">HttpServletRequest、HttpResponse，HttpSession、Model………….</span><br><span class="line"></span><br><span class="line"><span class="comment">////基本类型参数(Integer、Long、boolean)////</span></span><br><span class="line">布尔型：</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td&gt;用户状态：&lt;/td&gt;</span><br><span class="line">  &lt;td&gt;</span><br><span class="line">    &lt;input type=<span class="string">"radio"</span> name=<span class="string">"userstate"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">    &lt;input type="radio" name="userstate" value="false"/&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/fun"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fun</span><span class="params">(String userName,Integer age)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">////Pojo对象(Object)////</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/fun"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fun</span><span class="params">(Model model,User user)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对比Struts2使用属性驱动进行封装参数</span></span><br><span class="line">业务需求：</span><br><span class="line">假如：现在有多个pojo、并且里面具有相同的属性，如果现在还使用基本的对象封装方式，那么将会出现错误。</span><br><span class="line">那么这个问题怎么解决呢？</span><br><span class="line">解析：我们使用包装类来包装pojo、经过包装的pojo相当于加了一层包结构。所以后面即使具有相同的属性也无所谓。</span><br><span class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">UserVo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Public <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">页面定义：</span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"user.age"</span> /&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"user.birthday"</span> /&gt;</span><br><span class="line">Controller方法定义如下：</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useraddsubmit</span><span class="params">(Model model,UserVo userVo)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    System.out.println(userVo.getUser());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">////数组(Array)////</span></span><br><span class="line">页面定义如下：</span><br><span class="line">页面选中多个checkbox向controller方法传递</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"ids"</span> value=<span class="string">"001"</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">" ids "</span> value=<span class="string">"002"</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">" ids "</span> value=<span class="string">"002"</span>/&gt;</span><br><span class="line"><span class="comment">//修改时可以采用循环模式</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/fun"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fun</span><span class="params">(Model model,Integer[] ids)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">////集合(collection)////</span></span><br><span class="line">集合页面：</span><br><span class="line">    List中存放对象，并将定义的List放在包装类中，controller使用包装对象接收。</span><br><span class="line">List中对象：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentScore</span> </span>&#123;<span class="comment">//成绩对象</span></span><br><span class="line"><span class="keyword">private</span> String coursename;<span class="comment">//课程名称</span></span><br><span class="line"><span class="keyword">private</span> Float score;<span class="comment">//成绩</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCoursename</span><span class="params">()</span> </span>&#123;</span><br><span class="line">returncoursename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Public <span class="keyword">void</span> <span class="title">setCoursename</span><span class="params">(String coursename)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.coursename = coursename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Float <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">returnscore;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Public <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(Float score)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">UserVo</span> </span>&#123;</span><br><span class="line">  Private List&lt;StudentScore&gt; scores;<span class="comment">//成绩</span></span><br><span class="line">    <span class="comment">//get/set方法..</span></span><br><span class="line">&#125;</span><br><span class="line">页面：</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td&gt;课程成绩：&lt;/td&gt;</span><br><span class="line">  &lt;td&gt;</span><br><span class="line">    课程名：&lt;input type=<span class="string">"text"</span>name=<span class="string">"scores[0].coursename"</span>/&gt;成绩：&lt;input type=<span class="string">"text"</span>name=<span class="string">"scores[0].score"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    课程名：&lt;input type=<span class="string">"text"</span>name=<span class="string">"scores[1].coursename"</span>/&gt;成绩：&lt;input type=<span class="string">"text"</span>name=<span class="string">"scores[1].score"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    课程名：&lt;input type=<span class="string">"text"</span>name=<span class="string">"scores[2].coursename"</span>/&gt;成绩：&lt;input type=<span class="string">"text"</span>name=<span class="string">"scores[2].score"</span>/&gt;&lt;br/&gt;</span><br><span class="line">  &lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">Contrller方法定义如下：</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useraddsubmit</span><span class="params">(Model model,UserVo userVo)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">  System.out.println(userVo.getScores ());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">////Map////</span></span><br><span class="line">  在包装类中定义Map对象，并添加get/set方法，action使用包装对象接收。</span><br><span class="line">  包装类中定义Map对象如下：</span><br><span class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">UserVo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Map&lt;String, Object&gt;studentinfo = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    <span class="comment">//get/set方法..</span></span><br><span class="line">&#125;</span><br><span class="line">页面定义如下：</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td&gt;学生信息：&lt;/td&gt;</span><br><span class="line">  &lt;td&gt;</span><br><span class="line">    姓名：&lt;inputtype=<span class="string">"text"</span>name=<span class="string">"studentinfo['name']"</span>/&gt;</span><br><span class="line">    年龄：&lt;inputtype=<span class="string">"text"</span>name=<span class="string">"studentinfo['age']"</span>/&gt;</span><br><span class="line">    .. .. ..</span><br><span class="line">  &lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">Contrller方法定义如下：</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useraddsubmit</span><span class="params">(Model model,UserVo userVo)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">  System.out.println(userVo.getStudentinfo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="RequestParam"></a>RequestParam</h2><p>-value：参数名字，即入参的请求参数名字，如value=“studentid”表示请求的参数区中的名字为studentid的参数的值将传入；<br>-required：是否必须，默认是true，表示请求中一定要有相应的参数，否则将报400错误码；<br>-defaultValue：默认值，表示如果请求中没有同名参数时的默认值<br>定义如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">userlist</span><span class="params">(@RequestParam(defaultValue=<span class="string">"2"</span>,value=<span class="string">"group"</span>,required=<span class="keyword">true</span>)</span> String groupid)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//形参名称为groupid，但是这里使用value="group"限定参数名为group，所以页面传递参数的名必须为group。这里通</span></span><br><span class="line"><span class="comment">//过required=true限定groupid参数为必需传递，如果不传递则报400错误，由于使用了defaultvalue=”2”默认值即使</span></span><br><span class="line"><span class="comment">//不传group参数它的值为”2”，所以页面不传递group也不会报错，如果去掉defaultvalue=”2”且定义required=true</span></span><br><span class="line"><span class="comment">//则如果页面不传递group则会报错。</span></span><br></pre></td></tr></table></figure></p><h2 id="Redirect"><a href="#Redirect" class="headerlink" title="Redirect"></a>Redirect</h2><p>&emsp;&emsp;Contrller方法返回结果重定向到一个url地址，如下方式：<br><code>return &quot;redirect:/user/userlist.do&quot;;</code><br>&emsp;&emsp;注意：</p><ul><li><p>redirect:add.do 与 redirect:/user/add.do” 同一个类</p><pre><code>在同一个类里面进行跳转。上面2个都可以实现跳转。但是有区别：第一个是同一个根路径下面跳转。第二个是在项目路径下进行跳转。</code></pre></li><li><p>不同的类进行跳转<br>&emsp;&emsp;不同的类进行跳转只能使用：redirect:/user/add.do进行跳转。即是从项目路径下来查询。<br>&emsp;&emsp;redirect方式相当于“response.sendRedirect()”，转发后浏览器的地址栏变为转发后的地址，因为转发即执行了一个新的request和response。<br>&emsp;&emsp;由于新发起一个request原来的参数在转发时就不能传递到下一个url，如果要传参数可以/user/userlist.do后边加参数，如下：<br><code>/user/userlist.action?groupid=2&amp;…..</code></p></li></ul><h2 id="Forward"><a href="#Forward" class="headerlink" title="Forward"></a>Forward</h2><p>&emsp;&emsp;controller方法执行后继续执行另一个controller方法。<br><code>return &quot;forward:/user/userlist.action&quot;;</code><br>&emsp;&emsp;forward方式相当于<code>request.getRequestDispatcher().forward(request,response)</code>，转发后浏览器地址栏还是原来的地址。转发并没有执行新的request和response，而是和转发前的请求共用一个request和response。所以转发前请求的参数在转发后仍然可以读取到。<br>如下例子：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping("/c")</span><br><span class="line">public String c(String groupid,UserVo userVo)throws Exception&#123;</span><br><span class="line">System.out.println("...c...."+groupid+"...user..."+userVo.getUser());</span><br><span class="line">return "forward:/to/d.action";</span><br><span class="line">&#125;</span><br><span class="line">@RequestMapping("/d")</span><br><span class="line">public String d(String groupid,UserVo userVo)throws Exception&#123;</span><br><span class="line">System.out.println("...d...."+groupid+"...user..."+userVo.getUser());</span><br><span class="line">return "success";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="RequestBody-ResponseBody处理Json数据"><a href="#RequestBody-ResponseBody处理Json数据" class="headerlink" title="RequestBody/ResponseBody处理Json数据"></a>RequestBody/ResponseBody处理Json数据</h2><ul><li>作用：<br>@RequestBody注解用于读取http请求的内容(字符串)，通过springmvc提供的HttpMessageConverter接口将读到的内容转换为json、xml等格式的数据并绑定到controller方法的参数上。<br>本例子应用：<br>@RequestBody注解实现接收http请求的json数据，将json数据转换为java对象</li></ul><h3 id="请求Json响应Json"><a href="#请求Json响应Json" class="headerlink" title="请求Json响应Json"></a>请求Json响应Json</h3><ol><li><p>添加处理json数据配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注解适配器 ：添加json转换器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写代码【请求json、返回json】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"json"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJsonController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"requestJson.do"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">User <span class="title">requestJson</span><span class="params">(Model model,@RequestBody User u)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"用户信息:"</span>+u);</span><br><span class="line"><span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写页面ajax</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">  &lt;script type="text/javascript" src="$&#123;pageContext.request.contextPath &#125;/js/jquery-1.9.1.min.js"&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">//请求json，返回json</span></span><br><span class="line">     <span class="function">function <span class="title">request_json</span><span class="params">()</span></span>&#123;</span><br><span class="line">    var user = JSON.stringify(&#123;userName:<span class="string">"张思德"</span>,age:<span class="number">21</span>&#125;);</span><br><span class="line">     $.ajax(&#123; </span><br><span class="line">     type:<span class="string">'POST'</span>,</span><br><span class="line">     url: <span class="string">'$&#123;pageContext.request.contextPath&#125;/json/requestJson.do'</span>,</span><br><span class="line">     contentType:<span class="string">'application/json;charset=utf-8'</span>,</span><br><span class="line">     data:user,</span><br><span class="line">     success : function(data)&#123; </span><br><span class="line">     alert(data.userName+<span class="string">":"</span>+data.age);</span><br><span class="line">     &#125; </span><br><span class="line">     &#125;) </span><br><span class="line">     &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;input type=<span class="string">"button"</span> onclick=<span class="string">"request_json()"</span> value=<span class="string">"请求json，返回json"</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="请求pojo响应json"><a href="#请求pojo响应json" class="headerlink" title="请求pojo响应json"></a>请求pojo响应json</h3><ol><li><p>添加处理json数据配置【同上】<br>前台请求数据构造：<code>key=value&amp;key=value.</code></p></li><li><p>编写Controller代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"json"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJsonController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"responseJson.do"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">User <span class="title">responseJson</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写页面代码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="$&#123;pageContext.request.contextPath &#125;/js/jquery-1.9.1.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">      <span class="comment">//请求pojo，返回json</span></span><br><span class="line">       <span class="function">function <span class="title">response_json</span><span class="params">()</span></span>&#123;</span><br><span class="line">         $.ajax(&#123; </span><br><span class="line">         type:<span class="string">'POST'</span>,</span><br><span class="line">         url: <span class="string">'$&#123;pageContext.request.contextPath&#125;/json/responseJson.do'</span>,</span><br><span class="line">         data:<span class="string">'userName=张三&amp;age=12'</span>,</span><br><span class="line">         success : function(data)&#123; </span><br><span class="line">         alert(data.userName+<span class="string">":"</span>+data.age);</span><br><span class="line">         &#125; </span><br><span class="line">         &#125;) </span><br><span class="line">     &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> onclick=<span class="string">"response_json()"</span> value=<span class="string">"请求pojo，返回json"</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="lt-mvc-annotation-driven-gt-配置："><a href="#lt-mvc-annotation-driven-gt-配置：" class="headerlink" title="&lt;mvc:annotation-driven /&gt;配置："></a><code>&lt;mvc:annotation-driven /&gt;</code>配置：</h3><p>注解映射器和注解适配器可以使用<code>&lt;mvc:annotation-driven /&gt;</code>代替。<br><code>&lt;mvc:annotation-driven /&gt;</code>默认注册了注解映射器和注解适配器等bean。<br>如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">以下配置可用<span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span>代替：</span><br><span class="line"><span class="comment">&lt;!--注解映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注解适配器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="多视图"><a href="#多视图" class="headerlink" title="多视图"></a>多视图</h2><p>###未完待续</p>]]></content>
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> ssm </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>杂项</title>
      <link href="/2018/08/15/%E6%9D%82%E9%A1%B9/"/>
      <url>/2018/08/15/%E6%9D%82%E9%A1%B9/</url>
      <content type="html"><![CDATA[<h1 id="java相关"><a href="#java相关" class="headerlink" title="java相关"></a>java相关</h1><h2 id="Class类中的getCanonicalName-getName-getSimpleName"><a href="#Class类中的getCanonicalName-getName-getSimpleName" class="headerlink" title="Class类中的getCanonicalName(), getName(), getSimpleName()"></a>Class类中的getCanonicalName(), getName(), getSimpleName()</h2><ol><li>getCanonicalName() 是获取所传类从java语言规范定义的格式输出。 //getCanonicalName()=com.pinzhi.test.dao.DaoEntity</li><li>getName() 是返回实体类型名称 //getName()=com.pinzhi.test.dao.DaoEntity</li><li>getSimpleName() 返回从源代码中返回实例的名称。//getSimpleName()=DaoEntity</li></ol>]]></content>
      
      <categories>
          
          <category> 待整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 零散知识 </tag>
            
            <tag> 待整理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>j2ee开发相关工具的配置与使用</title>
      <link href="/2018/08/03/j2ee%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/08/03/j2ee%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h1><a id="more"></a><h1 id="SVN"><a href="#SVN" class="headerlink" title="SVN"></a>SVN</h1><p>略，待补充</p><h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="maven简介"><a href="#maven简介" class="headerlink" title="maven简介"></a>maven简介</h2><ol><li><p>什么是maven？<br>&emsp;&emsp;Maven是基于项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。Maven是跨平台的项目管理工具。主要服务于基于Java平台的项目构建，依赖管理和项目信息管理。<br>Maven主要有两个功能：</p><ol><li>项目构建</li><li>依赖管理</li></ol></li><li><p>什么是构建？<br><img src="/images/j2eeTools/%E6%9E%84%E5%BB%BA.png" alt="构建"></p></li><li><p>项目构建的3种方式</p></li></ol><ul><li><p>Eclipse<br>&emsp;&emsp;手工操作较多，项目的构建过程都是独立的，很难一步完成。比如：编译、测试、部署等。开发时每个人的IDE配置都不同，很容易出现本地代码换个地方编译就出错</p></li><li><p>Ant<br>  &emsp;&emsp;Ant只是一个项目构建工具，它没有集成依赖管理。Ant在进行项目构建时，它没有对项目目录结构进行约定，需要手动指定源文件、类文件等目录地址。同时它执行task时，需要显示指定依赖的task，这样会造成大量的代码重复。</p></li><li><p>Maven<br>  &emsp;&emsp;Maven不仅是一个项目构建工具，更是一个项目管理工具。它在项目构建工程中，比ant更全面，更灵活。Maven在进行项目构建时，它对项目目录结构拥有约定，知道你的源代码在哪里，类文件应该放到哪里去。它拥有生命周期的概念，maven的生命周期是有顺序的，在执行后面的生命周期的任务时，不需要显示的配置前面任务的生命周期。例如执行 mvn install 就可以自动执行编译，测试，打包等构建过程</p></li></ul><ol start="4"><li>maven模型<br><img src="/images/j2eeTools/maven%E6%A8%A1%E5%9E%8B.png" alt="maven模型"></li></ol><h2 id="maven基本结构"><a href="#maven基本结构" class="headerlink" title="maven基本结构"></a>maven基本结构</h2><h3 id="maven的工程结构"><a href="#maven的工程结构" class="headerlink" title="maven的工程结构"></a>maven的工程结构</h3><p>Project<br>  |-src<br>  | &emsp;  |-main<br>  |  &emsp; |  &emsp;  |-java        —— 存放项目的.java文件<br>  |  &emsp; |  &emsp;  |-resources   —— 存放项目资源文件，如spring, hibernate配置文件<br>  |  &emsp; |-test<br>  |       &emsp;&emsp;&emsp;|-java        ——存放所有测试.java文件，如JUnit测试类<br>  |       &emsp;&emsp;&emsp;|-resources   —— 测试资源文件<br>  |-target             —— 目标文件输出位置例如.class、.jar、.war文件<br>  |-pom.xml           ——maven项目核心配置文件</p><h3 id="maven的命令"><a href="#maven的命令" class="headerlink" title="maven的命令"></a>maven的命令</h3><p>需要在pom.xml所在目录中执行以下命令。</p><h4 id="Mvn-compile"><a href="#Mvn-compile" class="headerlink" title="Mvn compile"></a>Mvn compile</h4><p>&emsp;&emsp;执行 mvn compile命令，完成编译操作<br>&emsp;&emsp;执行完毕后，会生成target目录，该目录中存放了编译后的字节码文件。</p><h4 id="Mvn-clean"><a href="#Mvn-clean" class="headerlink" title="Mvn clean"></a>Mvn clean</h4><p>&emsp;&emsp;执行 mvn clean命令<br>&emsp;&emsp;执行完毕后，会将target目录删除。</p><h4 id="Mvn-test"><a href="#Mvn-test" class="headerlink" title="Mvn test"></a>Mvn test</h4><p>&emsp;&emsp;执行 mvn test命令，完成单元测试操作<br>&emsp;&emsp;执行完毕后，会在target目录中生成三个文件夹：surefire、surefire-reports（测试报告）、test-classes（测试的字节码文件）</p><h4 id="Mvn-package"><a href="#Mvn-package" class="headerlink" title="Mvn package"></a>Mvn package</h4><p>&emsp;&emsp;执行 mvn package命令，完成打包操作<br>&emsp;&emsp;执行完毕后，会在target目录中生成一个文件，该文件可能是jar、war</p><h4 id="Mvn-install"><a href="#Mvn-install" class="headerlink" title="Mvn install"></a>Mvn install</h4><p>&emsp;&emsp;执行 mvn install命令，完成将打好的jar包安装到本地仓库的操作<br>&emsp;&emsp;执行完毕后，会在本地仓库中出现安装后的jar包，方便其他工程引用</p><h4 id="mvn-clean-compile命令"><a href="#mvn-clean-compile命令" class="headerlink" title="mvn clean compile命令"></a>mvn clean compile命令</h4><p>&emsp;&emsp;cmd 中录入 mvn clean compile命令<br>&emsp;&emsp;组合指令，先执行clean，再执行compile，通常应用于上线前执行，清除测试类</p><h4 id="mvn-clean-test命令"><a href="#mvn-clean-test命令" class="headerlink" title="mvn clean test命令"></a>mvn clean test命令</h4><p>&emsp;&emsp;cmd 中录入 mvn clean test命令<br>&emsp;&emsp;组合指令，先执行clean，再执行test，通常应用于测试环节</p><h4 id="mvn-clean-package命令"><a href="#mvn-clean-package命令" class="headerlink" title="mvn clean package命令"></a>mvn clean package命令</h4><p>&emsp;&emsp;cmd 中录入 mvn clean package命令<br> &emsp;&emsp; 组合指令，先执行clean，再执行package，将项目打包，通常应用于发布前</p><ul><li>执行过程：<br>清理————清空环境<br>编译————编译源码<br>测试————测试源码<br>打包————将编译的非测试类打包</li></ul><h4 id="mvn-clean-install命令"><a href="#mvn-clean-install命令" class="headerlink" title="mvn clean install命令"></a>mvn clean install命令</h4><p>&emsp;&emsp;cmd 中录入 mvn clean install 查看仓库，当前项目被发布到仓库中<br> &emsp;&emsp; 组合指令，先执行clean，再执行install，将项目打包，通常应用于发布前</p><ul><li>执行过程：<br>清理————清空环境<br>编译————编译源码<br>测试————测试源码<br>打包————将编译的非测试类打包<br>部署————将打好的包发布到资源仓库中</li></ul><h2 id="M2eclipse"><a href="#M2eclipse" class="headerlink" title="M2eclipse"></a>M2eclipse</h2><p>&emsp;&emsp;M2Eclipse是eclipse中的maven插件</p><h3 id="安装配置M2Eclipse"><a href="#安装配置M2Eclipse" class="headerlink" title="安装配置M2Eclipse"></a>安装配置M2Eclipse</h3><p><strong>若是版本较老的Eclipse，没有集成maven插件需要进行以下步骤：</strong></p><ol><li>将包中的插件复制到eclipse中的dropins目录中</li><li>在eclipse的“preference”查看eclipse中是否有maven插件</li><li>在maven–&gt;installation中设置maven安装目录</li><li>在maven–&gt;user setting中设置用户配置</li></ol><h3 id="创建maven工程的基本流程"><a href="#创建maven工程的基本流程" class="headerlink" title="创建maven工程的基本流程"></a>创建maven工程的基本流程</h3><ol><li>选择new→maven→Maven Project</li><li>一直next，选择maven的工程骨架，这里我们选择quickstart。<br><img src="/images/j2eeTools/%E9%80%89%E6%8B%A9%E9%AA%A8%E6%9E%B6.png" alt="选择骨架"></li><li>输入GroupId、ArtifactId、Version、Package信息点击finish完成。<br><img src="/images/j2eeTools/gav.png" alt="gav"></li></ol><h2 id="maven核心概念"><a href="#maven核心概念" class="headerlink" title="maven核心概念"></a>maven核心概念</h2><h3 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h3><ol><li><p>坐标的概念<br>&emsp;&emsp;和在平面几何中坐标（x,y）可以标识平面中唯一的一点相似。在maven中坐标就是为了定位一个唯一确定的jar包。Maven世界拥有大量构建，我们需要找一个用来唯一标识一个构建的统一规范拥有了统一规范，就可以把查找工作交给机器。</p></li><li><p>maven坐标的组成<br>groupId:定义当前Maven组织名称<br>artifactId:定义实际项目名称//如cn.itcast.maven<br>version:定义当前项目的当前版本</p></li></ol><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><p>&emsp;&emsp;就是对项目中jar包的管理，可以在pom文件中定义jar包的GAV坐标，管理依赖。<br>依赖声明主要包括如下元素：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">denpendency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h4><p><img src="/images/j2eeTools/maven-%E4%BE%9D%E8%B5%96%E8%8C%83%E5%9B%B4.jpg" alt="maven-依赖范围"></p><p>&emsp;&emsp;其中，依赖范围scope 用来控制依赖和编译，测试，运行的classpath的关系. 主要的是三种依赖关系如下：</p><ol><li>compile： 默认编译依赖范围。对于编译，测试，运行三种classpath都有效</li><li>test：测试依赖范围。只对于测试classpath有效</li><li>provided：已提供依赖范围。对于编译，测试的classpath都有效，但对于运行无效。因为由容器已经提供，例如servlet-api</li><li>runtime:运行时提供。例如:jdbc驱动</li></ol><h4 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h4><ul><li>直接依赖和间接依赖<br>&emsp;&emsp;若B中使用A，C中使用B，则称B是C的直接依赖，而称A是C的间接依赖。<ul><li>C-&gt;B        B-&gt;A  //C直接依赖B,C间接依赖A<br><img src="/images/j2eeTools/maven-%E9%97%B4%E6%8E%A5%E4%BE%9D%E8%B5%96.png" alt="maven-间接依赖"></li></ul></li></ul><h4 id="依赖范围对传递依赖的影响"><a href="#依赖范围对传递依赖的影响" class="headerlink" title="依赖范围对传递依赖的影响"></a>依赖范围对传递依赖的影响</h4><p><img src="/images/j2eeTools/maven-%E4%BE%9D%E8%B5%96%E5%BD%B1%E5%93%8D.jpg" alt="maven-依赖影响"></p><ul><li><p>左边第一列表示第一直接依赖范围<br>上面第一行表示第二直接依赖范围<br>中间的交叉单元格表示传递性依赖范围。</p></li><li><p><strong>总结：</strong></p><ul><li>当第二依赖的范围是compile的时候，传递性依赖的范围与第一直接依赖的范围一致。<ul><li>当第二直接依赖的范围是test的时候，依赖不会得以传递。</li><li>当第二依赖的范围是provided的时候，只传递第一直接依赖范围也为provided的依赖，且传递性依赖的范围同样为 provided；</li><li>当第二直接依赖的范围是runtime的时候，传递性依赖的范围与第一直接依赖的范围一致，但compile例外，此时传递的依赖范围为runtime；</li></ul></li></ul></li></ul><h4 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h4><ul><li>若直接与间接依赖中包含有同一个坐标不同版本的依赖，以直接依赖的版本为准（就近原则）</li><li>从如下例子可以看出：<ul><li>Maven-first工程依赖log4j-1.2.8版本, Maven-second无依赖，那么maven-third中依赖的是log4j-1.2.8</li><li>若在前面的基础上，Maven-second依赖log4j-1.2.9，那么maven-third中依赖的是log4j-1.2.9</li><li>若直接依赖中包含同一坐标不同版本的资源依赖，以配置文件下方的为准</li></ul></li></ul><h4 id="可选依赖"><a href="#可选依赖" class="headerlink" title="可选依赖"></a>可选依赖</h4><p>&emsp;&emsp;在依赖中添加optional选项决定此依赖是否向下传递，如果是true则不传递，如果是false就传递，默认为false。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">denpendencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-first<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 决定此依赖是否向下传递，true不传递，false传递 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h4><p>&emsp;&emsp;排除依赖包中所包含的依赖关系，不需要添加版本号。如果在本次依赖中有一些多余的jar包也被传递依赖过来，如果想把这些jar包排除的话可以配置exclusions进行排除。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-first<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置要排除的jar包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 此处只需要groupId和artifactId，不需要版本号，</span></span><br><span class="line"><span class="comment">            此配置将排除所有版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-first<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><h4 id="什么是生命周期？"><a href="#什么是生命周期？" class="headerlink" title="什么是生命周期？"></a>什么是生命周期？</h4><p>&emsp;&emsp;Maven生命周期就是为了对所有的构建过程进行抽象和统一。包括项目清理、初始化、编译、打包、测试、部署等几乎所有构建步骤。生命周期可以理解为构建工程的步骤。<br>&emsp;&emsp;在Maven中有三套相互独立的生命周期，请注意这里说的是“三套”，而且“相互独立”，这三套生命周期分别是： </p><ul><li>Clean Lifecycle： 在进行真正的构建之前进行一些清理工作。 </li><li>Default Lifecycle： 构建的核心部分，编译，测试，打包，部署等等。 </li><li>Site Lifecycle： 生成项目报告，站点，发布站点。 </li></ul><p>&emsp;&emsp;再次强调一下它们是相互独立的，你可以仅仅调用clean来清理工作目录，仅仅调用site来生成站点。当然你也可以直接运行 mvn clean install site 运行所有这三套生命周期。</p><h4 id="Maven三大生命周期"><a href="#Maven三大生命周期" class="headerlink" title="Maven三大生命周期"></a>Maven三大生命周期</h4><ol><li>clean：清理项目<br>&emsp;&emsp;每套生命周期都由一组阶段(Phase)组成，我们平时在命令行输入的命令总会对应于一个特定的阶段。比如，运行mvn clean ，这个的clean是Clean生命周期的一个阶段。有Clean生命周期，也有clean阶段。Clean生命周期一共包含了三个阶段： <ul><li>pre-clean 执行一些需要在clean之前完成的工作 </li><li>clean 移除所有上一次构建生成的文件 </li><li>post-clean 执行一些需要在clean之后立刻完成的工作 </li></ul></li></ol><ul><li>&emsp;&emsp;mvn clean 中的clean就是上面的clean，在一个生命周期中，运行某个阶段的时候，它之前的所有阶段都会被运行，也就是说，mvn clean 等同于 mvn pre-clean clean ，如果我们运行 mvn post-clean ，那么 pre-clean，clean 都会被运行。这是Maven很重要的一个规则，可以大大简化命令行的输入。</li></ul><ol start="2"><li>default:构建项目<br>&emsp;&emsp;Default生命周期是Maven生命周期中最重要的一个，绝大部分工作都发生在这个生命周期中。这里，只解释一些比较重要和常用的阶段： <ul><li>validate </li><li>initialize</li><li>generate-sources </li><li>process-sources :处理项目主资源文件。一般来说，是对src/main/resource目录的内容进行变量替换等工作后，复制到项目输出的主classpath目录中</li><li>generate-resources </li><li>process-resources 复制并处理资源文件，至目标目录，准备打包。 </li><li>compile 编译项目的源代码。一般来说，就是编译src/main/java目录下的java文件到项目输出的主classpath目录中 </li><li>process-classes </li><li>generate-test-sources </li><li>process-test-sources ：处理项目测试资源文件，一般来说，是对src/test/resource目录的内容进行变量替换等工作后，复制到项目输出的测试classpath目录中</li><li>generate-test-resources </li><li>process-test-resources 复制并处理资源文件，至目标测试目录。 </li><li>test-compile 编译测试源代码。 </li><li>process-test-classes </li><li>test 使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。 </li><li>prepare-package </li><li>package 接受编译好的代码，打包成可发布的格式，如 JAR 。 </li><li>pre-integration-test </li><li>integration-test </li><li>post-integration-test </li><li>verify </li><li>install 将包安装至本地仓库，以让其它项目依赖。 </li><li>deploy 将最终的包复制到远程的仓库，以让其它开发人员与项目共享。 </li></ul></li></ol><ul><li>&emsp;&emsp;运行任何一个阶段的时候，它前面的所有阶段都会被运行，这也就是为什么我们运行mvn install 的时候，代码会被编译，测试，打包。此外，Maven的插件机制是完全依赖Maven的生命周期的，因此理解生命周期至关重要。</li></ul><ol start="3"><li>site：生成项目站点<br>&emsp;&emsp;Site生命周期：<ul><li>pre-site 执行一些需要在生成站点文档之前完成的工作 </li><li>site 生成项目的站点文档 </li><li>post-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备 </li><li>site-deploy 将生成的站点文档部署到特定的服务器上 </li></ul></li></ol><ul><li>&emsp;&emsp;这里经常用到的是site阶段和site-deploy阶段，用以生成和发布Maven站点，这可是Maven相当强大的功能，Manager比较喜欢，文档及统计数据自动生成，很好看。</li></ul><h3 id="Maven插件"><a href="#Maven插件" class="headerlink" title="Maven插件"></a>Maven插件</h3><p>&emsp;&emsp;Maven的核心仅仅定义了抽象的生命周期，具体的任务都是交由插件完成的。每个插件都能实现一个功能，每个功能就是一个插件目标。Maven的生命周期与插件目标相互绑定，以完成某个具体的构建任务。<br>例如compile就是插件maven-compiler-plugin的一个插件目标</p><h4 id="Maven编译插件"><a href="#Maven编译插件" class="headerlink" title="Maven编译插件"></a>Maven编译插件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在dependencies标签后 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 指定编译java1.7版本的源文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Tomcat插件"><a href="#Tomcat插件" class="headerlink" title="Tomcat插件"></a>Tomcat插件</h4><p>&emsp;&emsp;写完以下配置后，可通过tomcat7:run 运行tomcat7（推荐，但是需要添加插件）<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>&emsp;&emsp;继承是为了消除重复，可以把很多相同的配置提取出来。例如：grouptId，version等，具体步骤如下：</p><ol><li>创建父工程（即创建一个packaging为pom的工程）</li><li>创建子工程<br>&emsp;&emsp;创建方式有两种：<br> &emsp;&emsp;&emsp;&emsp;一种是创建新工程为子工程，在创建时设置父工程的GAV。<br> &emsp;&emsp;&emsp;&emsp;一种是修改原有的工程为子工程，在子工程的pom.xml文件中手动添加父工程的GAV。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在pom.xml中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">....</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置父工程gav --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-subt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>父工程可以做到的操作如下：<ol><li>父工程中对依赖进行的配置，在子工程中都会继承此依赖</li><li>使用<code>&lt;dependencyManagement&gt;</code>可以管理依赖的版本号（即若子工程中有相同的依赖，可以不指定版本号，使用父工程中指定的版本号） </li><li>父工程可以使用<code>&lt;properties&gt;&lt;log4j.version&gt;1.2.9&lt;/log4j.version&gt;...&lt;/properties&gt;</code>的形式定义版本号，在<code>&lt;dependencyManagement&gt;</code>中通过<code>&lt;version&gt;${log4j.version}&lt;/version&gt;</code>的形式统一管理版本号</li></ol></li></ul><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>&emsp;&emsp;聚合一般是一个工程拆分成多个模块开发，每个模块是一个独立的工程，但是要是运行时必须把所有模块聚合到一起才是一个完整的工程，此时可以使用maven的聚合工程。<br>例如电商项目中，包括商品模块、订单模块、用户模块等。就可以对不同的模块单独创建工程，最终在打包时，将不同的模块聚合到一起。<br>例如同一个项目中的表现层、业务层、持久层，也可以分层创建不同的工程，最后打包运行时，再聚合到一起。</p><h4 id="创建聚合工程的步骤"><a href="#创建聚合工程的步骤" class="headerlink" title="创建聚合工程的步骤"></a>创建聚合工程的步骤</h4><ol><li>创建聚合工程，打包方式为pom(用来放置子模块)</li><li>通过<code>new- - - Maven Module</code>创建子模块工程（若为表现层要将打包方式设置为war）</li><li>修改聚合工程的pom.xml文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在gav下添加如下内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>模块的artifactId<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    ...  </span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Maven仓库管理"><a href="#Maven仓库管理" class="headerlink" title="Maven仓库管理"></a>Maven仓库管理</h2><h3 id="什么是Maven仓库？"><a href="#什么是Maven仓库？" class="headerlink" title="什么是Maven仓库？"></a>什么是Maven仓库？</h3><p>&emsp;&emsp;用来统一存储所有Maven共享构建的位置就是仓库。根据Maven坐标定义每个构建在仓库中唯一存储路径大致为：groupId/artifactId/version/artifactId-version.packaging</p><h3 id="仓库的分类"><a href="#仓库的分类" class="headerlink" title="仓库的分类"></a>仓库的分类</h3><ol><li>本地仓库(每个用户只有一个本地仓库)<br><code>~/.m2/repository</code></li><li>远程仓库<ul><li>中央仓库：Maven默认的远程仓库，不包含版权资源<a href="http://repo1.maven.org/maven2" target="_blank" rel="noopener">http://repo1.maven.org/maven2</a></li><li>私服：是一种特殊的远程仓库，它是架设在局域网内的仓库<br><img src="/images/j2eeTools/maven-%E4%BB%93%E5%BA%93.png" alt="maven-仓库"></li></ul></li></ol><h3 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h3><h3 id="安装nexus"><a href="#安装nexus" class="headerlink" title="安装nexus"></a>安装nexus</h3><p>&emsp;&emsp;为所有来自中央仓库的构建安装提供本地缓存。下载网站：<a href="http://nexus.sonatype.org/" target="_blank" rel="noopener">http://nexus.sonatype.org/</a><br>&emsp;&emsp;安装版本：nexus-2.7.0-06.war</p><ul><li>第一步：将下载的nexus的war包复制到tomcat下的webapps目录。</li><li>第二步：启动tomcat。nexus将在c盘创建sonatype-work目录【C:\Users\当前用户\sonatype-work\nexus】。<br>目录结构如下：<br><img src="/images/j2eeTools/maven-nexus%E7%BB%93%E6%9E%841.png" alt="maven-nexus结构1"><br><img src="/images/j2eeTools/maven-nexus%E7%BB%93%E6%9E%842.png" alt="maven-nexus结构2"></li></ul><h3 id="nexus的仓库简介"><a href="#nexus的仓库简介" class="headerlink" title="nexus的仓库简介"></a>nexus的仓库简介</h3><p>仓库有4种类型 :</p><ul><li>group(仓库组)：一组仓库的集合</li><li>hosted(宿主)：配置第三方仓库 （包括公司内部私服 ） </li><li>proxy(代理)：私服会对中央仓库进行代理，用户连接私服，私服自动去中央仓库下载jar包或者插件 </li><li>virtual(虚拟)：兼容Maven1 版本的jar或者插件</li></ul><p>Nexus的仓库和仓库组介绍:</p><ul><li>3rd party: 一个策略为Release的宿主类型仓库，用来部署无法从公共仓库获得的第三方发布版本构建</li><li>Apache Snapshots: 一个策略为Snapshot的代理仓库，用来代理Apache Maven仓库的快照版本构建</li><li>Central: 代理Maven中央仓库</li><li>Central M1 shadow: 代理Maven1 版本 中央仓库</li><li>Codehaus Snapshots: 一个策略为Snapshot的代理仓库，用来代理Codehaus Maven仓库的快照版本构件</li><li>Releases: 一个策略为Release的宿主类型仓库，用来部署组织内部的发布版本构件</li><li>Snapshots: 一个策略为Snapshot的宿主类型仓库，用来部署组织内部的快照版本构件</li><li>Public Repositories:该仓库组将上述所有策略为Release的仓库聚合并通过一致的地址提供服务</li></ul><h3 id="nexus的使用"><a href="#nexus的使用" class="headerlink" title="nexus的使用"></a>nexus的使用</h3><ol><li><p>访问<br>访问URL: <a href="http://localhost:8080/nexus-2.7.0-06/" target="_blank" rel="noopener">http://localhost:8080/nexus-2.7.0-06/</a><br>默认账号:<br>&emsp;&emsp;用户名： admin<br>&emsp;&emsp;密码： admin123</p></li><li><p>在本地仓库的setting.xml中配置如下(即配置所有构建均从私服下载) </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--此处配置所有的构建均从私有仓库中下载 *代表所有，也可以写central --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/nexus-2.7.0-06/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>#未完待续</p>]]></content>
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svn </tag>
            
            <tag> maven </tag>
            
            <tag> ssh </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring学习笔记</title>
      <link href="/2018/07/30/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/07/30/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote><p>Tips:本笔记主要信息来源为传智播客的《<a href="https://www.bilibili.com/video/av14839030/" target="_blank" rel="noopener">60集精通java教程Spring框架开发</a>》,笔记内容为：学习资料 + 个人补充；如有内容或排版方面的错误，欢迎纠正~</p></blockquote><hr><p><strong> 内容分布</strong></p><ol><li>spring概念和ioc入门（ioc操作xml配置文件）</li><li>spring的ioc操作（注解）和aop概念</li><li>jdbcTemplate和spring管理事务</li><li>ssh框架整合<a href="qqqqq">开发</a></li></ol><hr><a id="more"></a><h1 id="Spring概念与IOC入门"><a href="#Spring概念与IOC入门" class="headerlink" title="Spring概念与IOC入门"></a>Spring概念与IOC入门</h1><h2 id="Spring概念"><a href="#Spring概念" class="headerlink" title="Spring概念"></a>Spring概念</h2><ol><li><p>Spring是开源的轻量级框架</p></li><li><p>Spring的核心包括两个部分<br>&emsp;&emsp;-aop：面向切面编程，扩展功能不是修改源代码实现<br>&emsp;&emsp;-ioc：控制反转<br>&emsp;&emsp;&emsp;&emsp;- 比如有一个类，在类里面有方法（不是静态的方法），调用类里面的方法，创建类的对象，使用对象调用方法，创建类对象的过程，需要new出来对象。在这里，对象的创建不是通过new方式实现，而是交给spring配置创建类对象</p></li><li><p>spring是一站式框架<br>&emsp;&emsp;spring在javaee三层结构中，每一层都提供不同的解决技术<br>&emsp;&emsp;&emsp;&emsp;- web层：springMVC<br>&emsp;&emsp;&emsp;&emsp;- service层：spring的ioc<br>&emsp;&emsp;&emsp;&emsp;- dao层：spring的jdbcTemplate</p></li><li><p>Spring的版本<br>&emsp;&emsp;-hibernate：5.x<br>&emsp;&emsp;-Spring4.x（这里学习的版本）</p></li></ol><h2 id="Spring的ioc操作"><a href="#Spring的ioc操作" class="headerlink" title="Spring的ioc操作"></a>Spring的ioc操作</h2><ol><li>把对象的创建交给spring进行管理</li><li>ioc操作两部分：<br>1）ioc的配置文件方式<br>2）ioc的注解方式</li></ol><h3 id="IOC底层原理"><a href="#IOC底层原理" class="headerlink" title="IOC底层原理"></a>IOC底层原理</h3><ol><li><p>ioc底层原理使用技术<br>（1）xml配置文件<br>（2）dom4j解决xml<br>（3）工厂设计模式<br>（4）反射</p></li><li><p>画图分析ioc实现原理</p></li></ol><p><img src="/images/Spring/1.1.png" alt="1.1"><br><img src="/images/Spring/1.2.png" alt="1.2"></p><h3 id="IOC和DI区别"><a href="#IOC和DI区别" class="headerlink" title="IOC和DI区别"></a>IOC和DI区别</h3><ol><li>IOC: 控制反转，把对象创建交给spring进行配置</li><li>DI: 依赖注入，向类里面的属性中设置值</li><li>关系：依赖注入不能单独存在，需要在ioc基础之上完成操作</li></ol><h2 id="Spring整合web项目原理"><a href="#Spring整合web项目原理" class="headerlink" title="Spring整合web项目原理"></a>Spring整合web项目原理</h2><h3 id="Spring整合web项目原理-1"><a href="#Spring整合web项目原理-1" class="headerlink" title="Spring整合web项目原理"></a>Spring整合web项目原理</h3><ol><li><p>加载spring核心配置文件<br><code>ApplicationContext context = new ClasssPathXmlApplicationContext(&quot;xml路径&quot;)</code>//new 对象;的方法，功能可以实现，效率很低</p></li><li><p>实现思想：把加载配置文件和创建对象过程，在服务器启动时候完成</p></li><li><p>实现原理<br>（1）ServletContext对象<br>（2）监听器<br>（3）具体使用：</p><ul><li>在服务器启动时候，为每个项目创建一个ServletContext对象</li><li>在ServletContext对象创建时候，使用监听器可以具体到ServletContext对象在什么时候创建</li><li>使用监听器监听到ServletContext对象创建时候，<ul><li>加载spring配置文件，把配置文件配置对象创建</li><li>把创建出来的对象放到ServletContext域对象里面（setAttribute方法）</li></ul></li><li>获取对象时候，到ServletContext域得到（getAttribute方法）</li></ul></li></ol><h3 id="Spring整合web项目演示"><a href="#Spring整合web项目演示" class="headerlink" title="Spring整合web项目演示"></a>Spring整合web项目演示</h3><ol><li><p>导包</p><ul><li>struts2相关jar包：<br><img src="/images/Spring/struts2%E7%9B%B8%E5%85%B3jar%E5%8C%85.png" alt="struts2相关jar包"></li><li>Spring相关jar包<br><img src="/images/Spring/Spring%E7%9B%B8%E5%85%B3jar%E5%8C%85.png" alt="Spring相关jar包"></li><li>Spring-web整合包:<br>Spring-web-3.0.7.jar(myeclipse2015可支持的最高版本)</li></ul></li><li><p>代码实现之准备部分</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---UserService.java---</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"service........"</span>);</span><br><span class="line">userDao.add();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> UserDao <span class="title">getUserDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userDao;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---UserDao.java---</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"dao........"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>代码实现之Spring与struts2配置文件   </li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!------ applicationContext.xml ------&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置userDao和userService --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.pinzhi.dao.UserDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.pinzhi.service.UserService"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!------ struts.xml------&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"spring_web"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"userAction"</span> <span class="attr">class</span>=<span class="string">"cn.pinzhi.action.UserAction"</span>  <span class="attr">method</span>=<span class="string">"execute"</span>&gt;</span><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>代码实现之spring与struts2的整合</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------web.xml------</span></span><br><span class="line">&lt;web-app xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span><br><span class="line">    xmlns=<span class="string">"http://java.sun.com/xml/ns/javaee"</span>  </span><br><span class="line">    xsi:schemaLocation=<span class="string">"http://java.sun.com/xml/ns/javaee </span></span><br><span class="line"><span class="string">    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> id=<span class="string">"WebApp_ID"</span> version=<span class="string">"2.5"</span>&gt;</span><br><span class="line">  &lt;display-name&gt;spring_web&lt;/display-name&gt;</span><br><span class="line">  &lt;!-- 重要：配置struts2的核心过滤器 --&gt;</span><br><span class="line">  &lt;!--配置struts2的过滤器，要放到其他过滤器后面，保证其他过滤器可以执行  --&gt;</span><br><span class="line">  &lt;filter&gt;</span><br><span class="line">&lt;filter-name&gt;struts2&lt;/filter-name&gt;</span><br><span class="line">&lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">apache</span>.<span class="title">struts2</span>.<span class="title">dispatcher</span>.<span class="title">ng</span>.<span class="title">filter</span>.<span class="title">StrutsPrepareAndExecuteFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">struts2</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;!-- 指定<span class="title">Spring</span>配置文件的位置 --&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">context</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">contextConfigLocation</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line">  &lt;param-value&gt;classpath:bean2.xml&lt;/param-value&gt;</span><br><span class="line">  &lt;/context-param&gt;</span><br><span class="line"> &lt;listener&gt;</span><br><span class="line"> &lt;listener-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">context</span>.<span class="title">ContextLoaderListener</span>&lt;/<span class="title">listener</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class"> &lt;/<span class="title">listener</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">web</span>-<span class="title">app</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//-----<span class="title">UserAction</span>.<span class="title">java</span>----</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"action...."</span>);</span><br><span class="line">ApplicationContext ctx = WebApplicationContextUtils.getWebApplicationContext(ServletActionContext.getServletContext());</span><br><span class="line">UserService userService = (UserService)ctx.getBean(<span class="string">"userService"</span>);</span><br><span class="line">userService.add();</span><br><span class="line"><span class="keyword">return</span> NONE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>验证<br>通过访问 localhost:8080\项目名\UserAction.action 验证 </li></ol><h1 id="Spring的bean管理（xml）"><a href="#Spring的bean管理（xml）" class="headerlink" title="Spring的bean管理（xml）"></a>Spring的bean管理（xml）</h1><h2 id="bean实例化的方式"><a href="#bean实例化的方式" class="headerlink" title="bean实例化的方式"></a>bean实例化的方式</h2><p>&emsp;&emsp;在Spring中通过配置文件创建对象</p><ul><li><p>bean实例化的三种方式</p><p>&emsp;&emsp;&emsp;1.使用类的无参构造方法创建（重点）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   若类中没有无参构造方法，会出现异常。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">“user”</span> <span class="attr">class</span>=<span class="string">“cn.itcast.ioc.User”</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;&emsp;2.使用静态工厂创建</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//创建静态的方法，返回类对象</span></span><br><span class="line"> <span class="comment">//Bean2Factory.java</span></span><br><span class="line">      <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean2Factory</span></span>&#123;</span><br><span class="line">      <span class="comment">//静态的方法，返回Bean2对象</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bean2 <span class="title">getBean2</span><span class="params">()</span></span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">new</span> Bean2();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//applicationContext.xml</span></span><br><span class="line">      &lt;!--  使用静态工厂创建对象 --&gt;</span><br><span class="line">      &lt;bean id=“bean2” class=“cn.itcast.bean.Bean2Factory” factory-method=“getBean2”&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;&emsp;3.使用实例工厂创建</p>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// Bean3Factory.java</span></span><br><span class="line"><span class="comment">//创建非静态方法，返回类对象</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean3Factory</span></span>&#123;</span><br><span class="line">        <span class="comment">//普通的方法，返回Bean3对象</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Bean3 <span class="title">getBean3</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Bean3();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//applicationContext.xml</span></span><br><span class="line">&lt;!-- 使用实例工厂创建对象--&gt;</span><br><span class="line">&lt;bean id="bean3Factory" class="cn.itcast.bean.Bean3Factory"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean id="bean3" factory-bean="bean3Factory" factory-method="getBean3"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="Bean标签常用属性"><a href="#Bean标签常用属性" class="headerlink" title="Bean标签常用属性"></a>Bean标签常用属性</h3><ol><li>id属性：起名称，id属性值名称任意命名<ul><li>id属性值，不能包含特殊符号</li><li>根据id值得到配置对象</li></ul></li><li>class属性：创建对象所在类的全路径</li><li><p>name属性：功能和id属性一样的，id属性值不能包含特殊符号，但是在name属性值里面可以包含特殊符号</p></li><li><p>scope属性</p><ul><li>singleton：默认值，单例  </li><li>prototype：多例</li><li>request：创建对象把对象放到request域里面</li><li>session：创建对象把对象放到session域里面</li><li>globalSession：创建对象把对象放到globalSession里面</li></ul></li></ol><h1 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h1><h2 id="属性注入介绍"><a href="#属性注入介绍" class="headerlink" title="属性注入介绍"></a>属性注入介绍</h2><p>&emsp;&emsp;创建对象时候，向类里面属性里面设置值</p><h2 id="属性注入的方式的三种方式"><a href="#属性注入的方式的三种方式" class="headerlink" title="属性注入的方式的三种方式"></a>属性注入的方式的三种方式</h2><ol><li>使用set方法注入(重点)</li><li>使用有参数构造注入</li><li><p>使用接口注入<br>!  在spring框架里面，支持前两种方式</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//使用有参数构造注入属性</span></span><br><span class="line">&lt;!-- 第一种：构造方法的方式 --&gt; </span><br><span class="line">&lt;bean id=<span class="string">"car"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.itcast.spring.demo4.Car"</span>&gt; </span><br><span class="line">        &lt;constructor-arg name=<span class="string">"name"</span> value=<span class="string">" 保 时 捷 "</span>/&gt;  </span><br><span class="line">        &lt;constructor-arg name="price" value="1000000"/&gt; &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------</span></span><br><span class="line"><span class="comment">//使用set方法注入属性（重点）</span></span><br><span class="line">&lt;!-- 第二种：set方法的方式 --&gt;</span><br><span class="line"> &lt;bean id=<span class="string">"car2"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.itcast.spring.demo4.Car2"</span>&gt;</span><br><span class="line">          &lt;property name=<span class="string">"name"</span> value=<span class="string">" 奇 瑞 QQ"</span>/&gt;</span><br><span class="line">           &lt;property name=<span class="string">"price"</span> value=<span class="string">"40000"</span>/&gt; </span><br><span class="line">   &lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="注入对象类型属性（重点）"><a href="#注入对象类型属性（重点）" class="headerlink" title="注入对象类型属性（重点）"></a>注入对象类型属性（重点）</h2><ul><li>具体实现过程<br>（1）在service里面把dao作为类型属性<br>（2）生成dao类型属性的set方法<br>（3）配置文件中注入关系</li></ul><p>相关代码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">  <span class="comment">//定义一个service类，dao类为类的属性</span></span><br><span class="line">  <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">  <span class="comment">//在service类中包含dao属性的set方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao=userDao;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------------------------</span></span><br><span class="line">&lt;bean id=<span class="string">"userDao"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.itcast.dao.UserDao"</span> /&gt;</span><br><span class="line">&lt;!-- 注入对象类型的属性 --&gt;</span><br><span class="line"> &lt;bean id=<span class="string">"person"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.itcast.spring.demo4.Person"</span>&gt;</span><br><span class="line">      &lt;property name=<span class="string">"name"</span> value=<span class="string">" 会 希 "</span>/&gt; </span><br><span class="line">      &lt;!-- ref属性：引用另一个 bean的id或name --&gt; </span><br><span class="line">      &lt;property name=<span class="string">"car2"</span> ref=<span class="string">"car2"</span>/&gt; </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h2 id="P名称空间注入-Spring2-x-版本后提供的方式"><a href="#P名称空间注入-Spring2-x-版本后提供的方式" class="headerlink" title="P名称空间注入(Spring2.x 版本后提供的方式)"></a>P名称空间注入(Spring2.x 版本后提供的方式)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一步:引入p名称空间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第二步:使用p名称空间.</span></span><br><span class="line"><span class="comment">        * 普通属性: p:属性名称=””</span></span><br><span class="line"><span class="comment">        * 对象类型属性: p:属性名称-ref=””</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- p名称空间的属性注入的方式 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car2"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.demo4.Car2"</span> <span class="attr">p:name</span>=<span class="string">" 宝 马 7"</span> <span class="attr">p:price</span>=<span class="string">"1200000"</span>/&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.demo4.Person"</span> <span class="attr">p:name</span>=<span class="string">" 思 聪 "</span> <span class="attr">p:car2-ref</span>=<span class="string">"car2"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpEL-的方式的属性注入-Spring3-x-版本后提供的方式"><a href="#SpEL-的方式的属性注入-Spring3-x-版本后提供的方式" class="headerlink" title="SpEL 的方式的属性注入(Spring3.x 版本后提供的方式)"></a>SpEL 的方式的属性注入(Spring3.x 版本后提供的方式)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpEL：Spring Expression Language. </span></span><br><span class="line"><span class="comment">  语法:#&#123; SpEL &#125;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SpEL的注入的方式 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car2"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.demo4.Car2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#&#123;' 奔 驰 '&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"#&#123;800000&#125;"</span>/&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.demo4.Person"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#&#123;'冠希'&#125;"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"car2"</span> <span class="attr">value</span>=<span class="string">"#&#123;car2&#125;"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"carInfo"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.demo4.CarInfo"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引用了另一个类的属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car2"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.demo4.Car2"</span>&gt;</span> <span class="comment">&lt;!-- &lt;property name="name" value="#&#123;'奔驰'&#125;"/&gt; --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#&#123;carInfo.carName&#125;"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"#&#123;carInfo.calculatePrice()&#125;"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注入复杂类型属性"><a href="#注入复杂类型属性" class="headerlink" title="注入复杂类型属性"></a>注入复杂类型属性</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring 的复杂类型的注入===================== --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"collectionBean"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.demo5.CollectionBean"</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 数组类型的属性 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arrs"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>会希<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>冠希<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>天一<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入List集合的数据 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>芙蓉<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>如花<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>凤姐<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入Map集合 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"aaa"</span> <span class="attr">value</span>=<span class="string">"111"</span>/&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"bbb"</span> <span class="attr">value</span>=<span class="string">"222"</span>/&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ccc"</span> <span class="attr">value</span>=<span class="string">"333"</span>/&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Properties 的注入 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">props</span>&gt;</span> </span><br><span class="line">             <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span> </span><br><span class="line">             <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Spring的Bean管理（注解）"><a href="#Spring的Bean管理（注解）" class="headerlink" title="Spring的Bean管理（注解）"></a>Spring的Bean管理（注解）</h1><p><strong>注解介绍：</strong></p><ol><li>代码里面特殊标记，使用注解可以完成功能</li><li>注解写法 @注解名称(属性名称=属性值)</li><li>注解使用在类上面，方法上面 和 属性上面</li></ol><h2 id="Spring注解开发准备"><a href="#Spring注解开发准备" class="headerlink" title="Spring注解开发准备"></a>Spring注解开发准备</h2><ol><li><p>导入jar包</p><ul><li><p>基本的jar包<br><img src="/images/Spring/4.1.png" alt="4.1"></p></li><li><p>aop的jar包:Spring-aop-4.3.4.RELEASE.jar</p></li></ul></li><li><p>创建类，创建方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        System.out.println(<span class="string">"Hello Spring..."</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建spring配置文件，引入约束<br>（1）第一天做ioc基本功能，引入约束beans<br>（2）做spring的ioc注解开发，引入新的约束<br><img src="/images/Spring/4.2.png" alt="4.2"></p></li></ol><ol start="4"><li>开启注解扫描<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring 的注解开发:组件扫描(类上注解: 可以直接使用属性注入的注解) --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.itheima.spring.demo1"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="注解创建对象"><a href="#注解创建对象" class="headerlink" title="注解创建对象"></a>注解创建对象</h2><ol><li><p>在创建对象的类上面使用注解实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过注解注册Bean</span></span><br><span class="line"><span class="meta">@Component</span>(value=<span class="string">"userDao"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Hello Spring Annotation..."</span>); </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试方法中获取bean对象</span></span><br><span class="line"><span class="meta">@Test</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext( <span class="string">"applicationContext.xml"</span>); </span><br><span class="line">    UserDao userDao = (UserDao) applicationContext.getBean(<span class="string">"userDao"</span>); userDao.sayHello(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建对象有四个注解（目前这四个注解功能是一样的，都创建对象）<br>（1）@Component<br>（2）@Controller：web层<br>（3）@Service：业务层<br>（4）@Repository：持久层</p></li></ol><p>！ 指定创建对象单实例还是多实例的方法<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注解的方式</span></span><br><span class="line"><span class="meta">@Service</span>(value=<span class="string">"user"</span>)<span class="comment">//注解bean对象</span></span><br><span class="line"><span class="meta">@Scope</span>(value=<span class="string">"prototype"</span>)<span class="comment">//指定对象是多例，默认是单例：Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置文件的方式</span></span><br><span class="line">&lt;bean id="" class="" scope="singleton"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h2 id="注解注入属性-使用注解注入的方式-可以不用提供-set-方法"><a href="#注解注入属性-使用注解注入的方式-可以不用提供-set-方法" class="headerlink" title="注解注入属性:(使用注解注入的方式,可以不用提供 set 方法.)"></a>注解注入属性:(使用注解注入的方式,可以不用提供 set 方法.)</h2><ul><li>@Value :用于注入普通类型.</li><li>@Autowired :自动装配: * 默认按类型进行装配. <ul><li>按名称注入: </li><li>@Qualifier:强制使用名称注入.</li></ul></li><li>@Resource相当于:  <ul><li>@Autowired和@Qualifier一起使用.</li></ul></li></ul><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建dao和service对象</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"userDao"</span>)<span class="comment">//value值可以省略</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)<span class="comment">//目前功能与Component相同</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span><span class="comment">//根据类名自动匹配属性</span></span><br><span class="line">  <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">  <span class="meta">@Resource</span>(name=<span class="string">"userDao"</span>)<span class="comment">//通过bean名字匹配属性</span></span><br><span class="line">  <span class="keyword">private</span> UserDao userDao2;</span><br></pre></td></tr></table></figure></p><h2 id="配置文件和注解混合使用"><a href="#配置文件和注解混合使用" class="headerlink" title="配置文件和注解混合使用"></a>配置文件和注解混合使用</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//使用配置文件方式实现创建对象操作</span><br><span class="line"><span class="comment">&lt;!-- 配置对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookDao"</span> <span class="attr">class</span>=<span class="string">"xxx.xx.xxx.bookDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookService"</span> <span class="attr">class</span>=<span class="string">"xx.xx.xx.BookService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//使用注解方式注入属性</span><br><span class="line">public class BookService&#123;</span><br><span class="line">  @Resource(name="bookDao")</span><br><span class="line">  private BookDao bookDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><h2 id="AOP相关概念"><a href="#AOP相关概念" class="headerlink" title="AOP相关概念"></a>AOP相关概念</h2><ol><li>AOP：面向切面（方面）编程，在不修改源码的情况下扩展功能</li><li>AOP采取横向抽取机制，取代了传统纵向继承体系重复性代码</li><li>AOP底层使用动态代理实现<ul><li>第一种情况，有接口情况，（JDK 的动态代理 ）使用动态代理创建接口实现类代理对象</li><li>第二种情况，没有接口情况，（ Cglib 的动态代理）使用动态代理创建类的子类代理对象</li></ul></li></ol><h2 id="AOP原理"><a href="#AOP原理" class="headerlink" title="AOP原理"></a>AOP原理</h2><p><img src="/images/Spring/5.1.png" alt="5.1"><br><img src="/images/Spring/5.2.png" alt="5.2"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Cglib 动态代理增强一个类中的方法:</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CustomerDao customerDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCglibProxy</span><span class="params">(CustomerDao customerDao)</span></span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.customerDao = customerDao;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">// 生成代理的方法: </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CustomerDao <span class="title">createProxy</span><span class="params">()</span></span>&#123; </span><br><span class="line">        <span class="comment">// 创建Cglib的核心类: </span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer(); <span class="comment">// 设置父类:</span></span><br><span class="line">         enhancer.setSuperclass(CustomerDao.class); <span class="comment">// 设置回调: </span></span><br><span class="line">         enhancer.setCallback(<span class="keyword">this</span>); <span class="comment">// 生成代理：</span></span><br><span class="line">        CustomerDao customerDaoProxy = (CustomerDao) enhancer.create(); </span><br><span class="line">        <span class="keyword">return</span> customerDaoProxy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"delete"</span>.equals(method.getName()))&#123; </span><br><span class="line">            Object obj = methodProxy.invokeSuper(proxy, args); </span><br><span class="line">            System.out.println(<span class="string">"日志记录================"</span>); </span><br><span class="line">            <span class="keyword">return</span> obj; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> methodProxy.invokeSuper(proxy, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-的基于-AspectJ-的-AOP-开发"><a href="#Spring-的基于-AspectJ-的-AOP-开发" class="headerlink" title="Spring 的基于 AspectJ 的 AOP 开发"></a>Spring 的基于 AspectJ 的 AOP 开发</h2><ul><li><p>在spring里面进行aop操作，使用aspectj实现<br> （1）aspectj不是spring一部分，和spring一起使用进行aop操作<br> （2）Spring2.0以后新增了对AspectJ支持</p></li><li><p>使用aspectj实现aop有两种方式<br>（1）基于aspectj的xml配置<br>（2）基于aspectj的注解方式</p></li></ul><h3 id="AOP操作术语"><a href="#AOP操作术语" class="headerlink" title="AOP操作术语"></a>AOP操作术语</h3><ol><li>Joinpoint(连接点): 类里面可以被增强的方法，这些方法称为连接点</li><li>Pointcut(切入点):所谓切入点是指我们要对哪些Joinpoint进行拦截的定义.</li><li>Advice(通知/增强):所谓通知是指拦截到Joinpoint之后所要做的事情就是通知.<br>通知分为:前置通知；后置通知；异常通知；最终通知；环绕通知(切面要完成的功能)</li><li>Aspect(切面): 是切入点和通知（引介）的结合</li><li>Introduction(引介):引介是一种特殊的通知在不修改类代码的前提下, Introduction可以在运行期为类动态地添加一些方法或Field.</li><li>Target(目标对象):代理的目标对象(要增强的类)</li><li>Weaving(织入):是把增强应用到目标的过程.把advice 应用到 target的过程</li><li>Proxy（代理）:一个类被AOP织入增强后，就产生一个结果代理类</li></ol><h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><p>&emsp;切入点，即实际增强的方法</p><ul><li>表达式格式为<br>execution(&lt;访问修饰符&gt;?&lt;返回类型&gt;&lt;方法名&gt;(&lt;参数&gt;)&lt;异常&gt;)<br>（1）execution(* cn.itcast.aop.Book.add(..))<br>（2）execution(* cn.itcast.aop.Book.*(..))<br>（3）execution(* *.*(..))<br>（4） 匹配所有save开头的方法 execution(* save*(..))</li></ul><h3 id="Spring-使用-AspectJ-进行-AOP-的开发：XML-的方式（-）"><a href="#Spring-使用-AspectJ-进行-AOP-的开发：XML-的方式（-）" class="headerlink" title="Spring 使用 AspectJ 进行 AOP 的开发：XML 的方式（*）"></a>Spring 使用 AspectJ 进行 AOP 的开发：XML 的方式（<strong>*</strong>）</h3><ol><li><p>导包<br>&emsp;除了导入基本的jar包之外，还需要导入aop相关的jar包<br><img src="/images/Spring/5.3.png" alt="5.3"></p></li><li><p>创建配置文件，导入aop约束</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写切面类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspectXml</span> </span>&#123; </span><br><span class="line">  <span class="comment">// 定义前置增强方法 </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123; </span><br><span class="line">      System.out.println(<span class="string">"前置增强==========="</span>); </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="comment">// 定义后置增强方法 </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodName</span><span class="params">()</span></span>&#123; </span><br><span class="line">      System.out.println(<span class="string">"后置增强==========="</span>); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置切入点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置切面类 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAspectXml"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.demo3.MyAspectXml"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 进行 aop的配置 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 配置切入点表达式:哪些类的哪些方法需要进行增强 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.itcast.spring.demo3.OrderDao.*(..))"</span> <span class="attr">id</span>=<span class="string">"pointcut1"</span>/&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 配置切面 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myAspectXml"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"methodName"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut1"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写测试程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOrderDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取applicationContext</span></span><br><span class="line">ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean2.xml"</span>);</span><br><span class="line"><span class="comment">//使用接口类取得Bean</span></span><br><span class="line">OrderDao orderDao = (OrderDao)ctx.getBean(<span class="string">"orderDao"</span>);</span><br><span class="line">orderDao.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Spring-使用-AspectJ-进行-AOP-的开发：注解的方式"><a href="#Spring-使用-AspectJ-进行-AOP-的开发：注解的方式" class="headerlink" title="Spring 使用 AspectJ 进行 AOP 的开发：注解的方式"></a>Spring 使用 AspectJ 进行 AOP 的开发：注解的方式</h3><ol><li>创建对象</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"cn.pinzhi.aop.Book"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myBook"</span> <span class="attr">class</span>=<span class="string">"cn.pinzhi.aop.MyBook"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>在配置文件中开启aop操作</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启aop操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在增强类上使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBook</span></span>&#123;</span><br><span class="line">  <span class="comment">//在方法上使用注解完成增强配置</span></span><br><span class="line">  <span class="meta">@Before</span>(value=<span class="string">"execution(* cn.itcast.aop.Book.*(..)）"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Before1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"before..."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Spring的jdbcTemplate操作"><a href="#Spring的jdbcTemplate操作" class="headerlink" title="Spring的jdbcTemplate操作"></a>Spring的jdbcTemplate操作</h1><h2 id="jdbcTemplate引入"><a href="#jdbcTemplate引入" class="headerlink" title="jdbcTemplate引入"></a>jdbcTemplate引入</h2><ol><li><p>spring框架一站式框架<br>（1）针对javaee三层，每一层都有解决技术<br>（2）在dao层，使用 jdbcTemplate</p></li><li><p>spring对不同的持久化层技术都进行封装<br><img src="/images/Spring/6.1.png" alt="6.1"></p></li><li><p>jdbcTemplate使用和dbutils使用很相似，都数据库进行crud操作</p></li></ol><h2 id="用jdbcTemplate实现增删改"><a href="#用jdbcTemplate实现增删改" class="headerlink" title="用jdbcTemplate实现增删改"></a>用jdbcTemplate实现增删改</h2><ol><li>导入jdbcTemplate使用的jar包<ul><li>spring-jdbc-4.2.4.RELEASE.jar</li><li>spring-tx-4.2.4.RELEASE.jar</li><li>jdbc-connector-xx.jar(依赖包)</li></ul></li><li><p>创建对象，设置数据库信息</p></li><li><p>创建jdbcTemplate对象，设置数据源</p></li><li><p>调用jdbcTemplate对象里面的方法实现操作</p><ul><li>int update(String sql,Object… args);</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//设置数据库信息</span></span><br><span class="line">    DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">    dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    dataSource.setUrl(<span class="string">"jdbc:mysql://localhost:3306/Spring_day03"</span>);</span><br><span class="line">    dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">    dataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建jdbcTemplate对象，设置数据源</span></span><br><span class="line">    JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用jdbcTemplate里的方法实现操作</span></span><br><span class="line">    <span class="comment">//增</span></span><br><span class="line">    String sql1 = <span class="string">"insert into user values(?,?)"</span>;</span><br><span class="line">    <span class="keyword">int</span> rows1 = jdbcTemplate.update(sql1,<span class="string">"lucy"</span>,<span class="string">"250"</span>);</span><br><span class="line">    System.out.println(rows1);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//删</span></span><br><span class="line">    String sql2 = <span class="string">"delete from user where name=？"</span>;</span><br><span class="line">    <span class="keyword">int</span> rows2 = jdbcTemplate.update(sql1,<span class="string">"lucy"</span>);</span><br><span class="line">    System.out.println(rows2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增改</span></span><br><span class="line">    String sql3 = <span class="string">"update user set password=？where name =?"</span>;</span><br><span class="line">    <span class="keyword">int</span> rows3 = jdbcTemplate.update(sql3,<span class="string">"250"</span>,<span class="string">"lucy"</span>);</span><br><span class="line">    System.out.println(rows3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用jdbcTemplate实现查询操作"><a href="#用jdbcTemplate实现查询操作" class="headerlink" title="用jdbcTemplate实现查询操作"></a>用jdbcTemplate实现查询操作</h2><h3 id="回顾：jdbc上的查询操作"><a href="#回顾：jdbc上的查询操作" class="headerlink" title="回顾：jdbc上的查询操作"></a>回顾：jdbc上的查询操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> Connection conn = <span class="keyword">null</span>;</span><br><span class="line"> PrepareStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line"> ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);<span class="comment">//加载驱动</span></span><br><span class="line">    <span class="comment">//创建连接</span></span><br><span class="line">    conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/Spring_day03"</span>,<span class="string">"root"</span>,<span class="string">"root"</span>);</span><br><span class="line">    <span class="comment">//编写sql语句</span></span><br><span class="line">    String sql = <span class="string">"seelect * from user where username=?"</span>;</span><br><span class="line">    <span class="comment">//预编译sql</span></span><br><span class="line">    pstmt = conn.prepareStatement(sql);</span><br><span class="line">    <span class="comment">//设置参数</span></span><br><span class="line">    pstmt.setString(<span class="number">1</span>,<span class="string">"lucy"</span>);</span><br><span class="line">    <span class="comment">//执行sql语句</span></span><br><span class="line">    rs = pstmt.excuteQuery();</span><br><span class="line">    <span class="comment">//遍历结果集</span></span><br><span class="line">    <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">        <span class="comment">//得到返回的结果</span></span><br><span class="line">        String username = rs.getString(<span class="string">"username"</span>);</span><br><span class="line">        String password = rs.getString(<span class="string">"password"</span>);</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setPassword(password);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        rs.close();</span><br><span class="line">        pstmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="jdbcTemplate上的查询操作"><a href="#jdbcTemplate上的查询操作" class="headerlink" title="jdbcTemplate上的查询操作"></a>jdbcTemplate上的查询操作</h3><ul><li>查询的种类<ul><li>返回结果为一个值<br>使用方法：<code>T queryForObject(String sql,Class&lt;t&gt; re quiredType);</code><br>//参数1：sql语句；参数2：返回值类型.class</li><li>返回结果为一个对象<br>使用方法：<code>T queryForObject(String sqlRowMapper&lt;T&gt; rowMapper,Object... args);</code><br>//参数1：sql语句；参数2：RowMapper接口(要自己写);参数3：可变参数</li><li>返回结果为List集合<br>使用方法：<code>List&lt;T&gt; query(String sqlRowMapper&lt;T&gt; rowMapper,Object... args);</code><br>//参数1：sql语句；参数2：RowMapper接口(要自己写);参数3：可变参数</li></ul></li></ul><p><strong>实现过程：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//创建dataSource（略）</span></span><br><span class="line">  <span class="comment">//创建jdbaTemplate对象</span></span><br><span class="line">  JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//单值查询</span></span><br><span class="line">  String sql = <span class="string">"select count(*) from user"</span>;</span><br><span class="line">  <span class="keyword">int</span> count = jdbcTemplate.queryForObject(sql,Interger.class);</span><br><span class="line">  System.out.println(count);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//对象查询</span></span><br><span class="line">  String sql = <span class="string">"select * from user where name=?"</span>;</span><br><span class="line">  User user = jdbcTemplate.queryForObject(sql,<span class="keyword">new</span> MyRowMapper(),<span class="string">"marry"</span>);</span><br><span class="line">  System.out.println(user);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//对象集合查询</span></span><br><span class="line">    String sql = <span class="string">"select * from user"</span>;</span><br><span class="line">  List&lt;User&gt; users = jdbcTemplate.queryForObject(sql,<span class="keyword">new</span> MyRowMapper());</span><br><span class="line">  System.out.println(users);</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------Mapper.java---------</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRowMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">User</span>&gt;</span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">mapRow</span><span class="params">(ResultSet rs,<span class="keyword">int</span> num)</span><span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">    <span class="comment">//从结果集中得到数据</span></span><br><span class="line">    String username = rs.getString(<span class="string">"username"</span>);</span><br><span class="line">    String password = rs.getString(<span class="string">"password"</span>);</span><br><span class="line">    <span class="comment">//把得到的数据封装到对象中</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(username);</span><br><span class="line">    user.setPassword(password);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Spring配置连接池和dao使用jdbcTemplate"><a href="#Spring配置连接池和dao使用jdbcTemplate" class="headerlink" title="Spring配置连接池和dao使用jdbcTemplate"></a>Spring配置连接池和dao使用jdbcTemplate</h2><h3 id="Spring配置c3p0连接池"><a href="#Spring配置c3p0连接池" class="headerlink" title="Spring配置c3p0连接池"></a>Spring配置c3p0连接池</h3><ol><li><p>导包<br> c3p0-0.9.2.1.jar<br> mchange-commons-java-0.2.3.4.jar</p></li><li><p>在Spring配置文件中配置连接池</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置c3p0连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入属性值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/Spring_day03"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在dao中使用jdbcTemplate"><a href="#在dao中使用jdbcTemplate" class="headerlink" title="在dao中使用jdbcTemplate"></a>在dao中使用jdbcTemplate</h3><p>配置xml文件后就可以直接使用连接池<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//---- 创建service和dao，配置service和dao对象----</span><br><span class="line">//--------applicationContext.xml-------</span><br><span class="line"><span class="comment">&lt;!-- 注入JdbcTemplate对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframwork.jdbc.core.JdbaTemplate"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入dataSource --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.c3p0.UserDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入jdbcTemplate对象  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">ref</span>=<span class="string">"jdbcTemplate"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.c3p0.UserService"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入dao对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h1><h2 id="回顾：事务"><a href="#回顾：事务" class="headerlink" title="回顾：事务"></a>回顾：事务</h2><ol><li><p>什么是事务？<br>事务逻辑上的一组操作,组成这组操作的各个逻辑单元,要么一起成功,要么一起失败.</p></li><li><p>事务特性:</p><ul><li>原子性 :强调事务的不可分割. </li><li>一致性 :事务的执行的前后数据的完整性保持一致.</li><li>隔离性 :一个事务执行的过程中,不应该受到其他事务的干扰</li><li>持久性 :事务一旦结束,数据就持久到数据库</li></ul></li><li><p>如果不考虑隔离性引发安全性问题:</p><ul><li>脏读 :一个事务读到了另一个事务的未提交的数据 </li><li>不可重复读 :一个事务读到了另一个事务已经提交的 update 的数据导致多次查询结果不一致. </li><li>虚读 :一个事务读到了另一个事务已经提交的 insert 的数据导致多次查询结果不一致.</li></ul></li><li><p>解决读问题:设置事务隔离级别</p><ul><li>未提交读 :脏读，不可重复读，虚读都有可能发生 </li><li>已提交读 :避免脏读。但是不可重复读和虚读有可能发生 </li><li>可重复读 :避免脏读和不可重复读.但是虚读有可能发生. </li><li>串行化的 :避免以上所有读问题.</li></ul></li></ol><h2 id="Spring事务管理api"><a href="#Spring事务管理api" class="headerlink" title="Spring事务管理api"></a>Spring事务管理api</h2><ul><li>spring事务管理两种方式<ul><li>第一种 编程式事务管理（不用）</li><li>第二种  声明式事务管理<br>（1） 基于xml配置文件实现<br>（2） 基于注解实现</li></ul></li></ul><p>相关代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//------基于配置文件实现------</span><br><span class="line">//---Spring配置文件---</span><br><span class="line"><span class="comment">&lt;!-- 第一步：配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=</span></span><br><span class="line"><span class="tag">    "<span class="attr">org.springframework.jdbc.datasource.DataSourceTransactionManager</span>"&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入dataSource --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第二步：配置事务增强(前提：引入tx约束) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txadvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transaction"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 做事务操作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置进行事务操作的方法匹配规则 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:meyhod</span> <span class="attr">name</span>=<span class="string">"acount*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第三步 配置切面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 切入点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execute(* cn.itcast.service.OrderService.*(..))"</span> <span class="attr">id</span>=<span class="string">"ponitcut1"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 切面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txadvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//------注解方式实现事务------</span><br><span class="line"><span class="comment">&lt;!-- 第一步：配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=</span></span><br><span class="line"><span class="tag">    "<span class="attr">org.springframework.jdbc.datasource.DataSourceTransactionManager</span>"&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入dataSource --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第2步：开启事务注解 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第3步：在要使用事务方法所在类上面添加注解 --&gt;</span></span><br><span class="line">@Transactional</span><br><span class="line">public class OrderService&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ol><li>Spring分模块开发（将配置文件中的一部分分出去）<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在主配置文件中，引入其他配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:user.xml"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="在最后"><a href="#在最后" class="headerlink" title="在最后"></a>在最后</h1><p>&emsp;&emsp;Spring的基本内容已结束，随后还有ssh的整合部分，暂时不会去写，因为hibernate还没学习。谢谢你们的阅读</p><p>#To be continue…</p><hr>]]></content>
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> ssm </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mybatis学习笔记</title>
      <link href="/2018/07/25/mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/07/25/mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote><p>Tips：本笔记的内容主要来自传智播客mybatis学习视频的相关资料，以及一些实操后的补充。如有内容或排版方面的错误，欢迎纠正~篇幅较长，建议结合目录阅读</p></blockquote><h1 id="Mybatis是什么？"><a href="#Mybatis是什么？" class="headerlink" title="Mybatis是什么？"></a>Mybatis是什么？</h1><p>&emsp;&emsp;    MyBatis 本是<a href="http://baike.baidu.com/view/28283.htm" target="_blank" rel="noopener">apache</a>的一个开源项目<a href="http://baike.baidu.com/view/628102.htm" target="_blank" rel="noopener">iBatis</a>, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis，实质上Mybatis对ibatis进行一些改进。<br>&emsp;&emsp;    MyBatis是一个优秀的持久层框架，它对jdbc的操作数据库的过程进行封装，使开发者只需要关注 SQL 本身，而不需要花费精力去处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等jdbc繁杂的过程代码。<br><a id="more"></a><br>&emsp;&emsp;    Mybatis通过xml或注解的方式将要执行的各种statement（statement、preparedStatemnt、CallableStatement）配置起来，并通过java对象和statement中的sql进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射成java对象并返回。</p><h1 id="分析原生态jdbc程序中存在的问题"><a href="#分析原生态jdbc程序中存在的问题" class="headerlink" title="分析原生态jdbc程序中存在的问题"></a>分析原生态jdbc程序中存在的问题</h1><h2 id="原生态Jdbc程序代码"><a href="#原生态Jdbc程序代码" class="headerlink" title="原生态Jdbc程序代码"></a>原生态Jdbc程序代码</h2><pre><code>//原生态Jdbc程序代码public static void** main(String[] args) {    Connection connection = null;    PreparedStatement preparedStatement = null;    ResultSet resultSet = **null**;    try{        //1、加载数据库驱动       Class.forName(&quot;com.mysql.jdbc.Driver&quot;);        //2、通过驱动管理类获取数据库链接       connection =DriverManager._getConnection_(&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8&quot;, &quot;root&quot;, &quot;root&quot;);       //3、定义sql语句 ?表示占位符       String sql = &quot;select * from user where username = ?&quot;;           //4、获取预处理statement           preparedStatement = connection.prepareStatement(sql);            //5、设置参数，第一个参数为sql语句中参数的序号（从1开始），第二个参数为设置的参数值           preparedStatement.setString(1, &quot;王五&quot;);            //6、向数据库发出sql执行查询，查询出结果集           resultSet = preparedStatement.executeQuery();           //7、遍历查询结果集            while(resultSet.next()){                                      System._out_.println(resultSet.getString(&quot;id&quot;)+&quot;&quot;+resultSet.getString(&quot;username&quot;));           }       } catch(Exception e) {             e.printStackTrace();       }finally{            //8、释放资源            if(resultSet!=null){               try{                   resultSet.close();                } catch(SQLException e) {                   e.printStackTrace();               }           }            if(preparedStatement!=null){              try {                 preparedStatement.close();               } catch(SQLException e) {                      e.printStackTrace();               }             }            if(connection!=null){                try{                   connection.close();                 } catch (SQLException e) {                     e.printStackTrace();                 }             }       }    }</code></pre><h2 id="Jdbc问题总结"><a href="#Jdbc问题总结" class="headerlink" title="Jdbc问题总结"></a>Jdbc问题总结</h2><ul><li>数据库连接频繁开启和关闭，会严重影响数据库的性能。</li><li>代码中存在硬编码，分别是数据库部分的硬编码和SQL执行部分的硬编码。</li></ul><h1 id="Mybatis框架原理（核心）"><a href="#Mybatis框架原理（核心）" class="headerlink" title="Mybatis框架原理（核心）"></a>Mybatis框架原理（核心）</h1><h2 id="框架图"><a href="#框架图" class="headerlink" title="框架图"></a>框架图</h2><p><img src="/images/mybatis/mybatis%E6%A1%86%E6%9E%B6%E5%9B%BE.png" alt="mybatis框架图"></p><h2 id="分析结论"><a href="#分析结论" class="headerlink" title="分析结论"></a>分析结论</h2><ol><li>mybatis配置文件，包括Mybatis全局配置文件和Mybatis映射文件，其中全局配置文件配置了数据源、事务等信息；映射文件配置了SQL执行相关的信息。</li><li>mybatis通过读取配置文件信息（全局配置文件和映射文件），构造出SqlSessionFactory，即会话工厂。</li><li>通过SqlSessionFactory，可以创建SqlSession即会话。Mybatis是通过SqlSession来操作数据库的。</li><li>SqlSession本身不能直接操作数据库，它是通过底层的Executor执行器接口来操作数据库的。Executor接口有两个实现类，一个是普通执行器，一个是缓存执行器（默认）。</li><li>Executor执行器要处理的SQL信息是封装到一个底层对象MappedStatement中。该对象包括：SQL语句、输入参数映射信息、输出结果集映射信息。其中输入参数和输出结果的映射类型包括java的简单类型、HashMap集合对象、POJO对象类型。</li></ol><h1 id="Mybatis入门程序"><a href="#Mybatis入门程序" class="headerlink" title="Mybatis入门程序"></a>Mybatis入门程序</h1><p>Mybatis课程的所有代码程序将通过一个订单商品案例来进行讲解。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>&emsp;&emsp;  对用户信息的增删改查操作。</p><ol><li>根据用户ID来查询用户信息；</li><li>根据用户名称来模糊查询用户信息列表；</li><li>添加用户</li><li>删除用户（练习）</li><li>修改用户（练习）</li></ol><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>Jdk环境：jdk1.7.0_72</li><li>Ide环境：eclipse indigo</li><li>数据库环境：MySQL 5.1</li><li>Mybatis：3.2.7</li></ul><h3 id="数据库初始化"><a href="#数据库初始化" class="headerlink" title="数据库初始化"></a>数据库初始化</h3><h4 id="数据库脚本"><a href="#数据库脚本" class="headerlink" title="数据库脚本"></a>数据库脚本</h4><ol><li>执行sql_table.sql脚本，创建数据库表；</li><li>执行sql_data.sql初始化测试数据。</li></ol><h4 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h4><p>订单商品案例的数据库脚本中，总共包含四张表，其中入门程序只使用user表.<br>用户表的表结构如下：<br><img src="/images/mybatis/4.2user%E8%A1%A8%E7%BB%93%E6%9E%84.png" alt="4.2user表结构"></p><h3 id="下载mybatis"><a href="#下载mybatis" class="headerlink" title="下载mybatis"></a>下载mybatis</h3><p>mybaits的代码由github.com管理，下载地址：<a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/releases</a><br><img src="/images/mybatis/4.2mybatis%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.png" alt="4.2mybatis文件结构"></p><ul><li>Lib：mybatis的依赖包</li><li>Mybatis-3.2.7.jar：mybatis的核心包</li><li>Mybatis-3.2.7.pdf：mybatis的使用指南</li></ul><h2 id="工程搭建（三步）"><a href="#工程搭建（三步）" class="headerlink" title="工程搭建（三步）"></a>工程搭建（三步）</h2><h3 id="第一步：创建java工程"><a href="#第一步：创建java工程" class="headerlink" title="第一步：创建java工程"></a>第一步：创建java工程</h3><p>用eclipse创建一个java工程，jdk使用1.7.0_72。</p><h3 id="第二步：加入jar包"><a href="#第二步：加入jar包" class="headerlink" title="第二步：加入jar包"></a>第二步：加入jar包</h3><p>加入以下四部分jar包，其中junit的jar包，是非必须的。</p><ul><li><p>Mybatis核心包:mybaties-3.2.7.jar</p></li><li><p>Mybatis依赖包<br><img src="/images/mybatis/mybatis%E4%BE%9D%E8%B5%96%E5%8C%85.png" alt="mybatis依赖包"></p></li><li><p>MySQL驱动包: mysql-connector-*</p></li><li><p>Junit单元测试包（单元测试需要的包）:junit-4.9.jar</p></li></ul><h3 id="第三步：添加log4j-properties文件"><a href="#第三步：添加log4j-properties文件" class="headerlink" title="第三步：添加log4j.properties文件"></a>第三步：添加log4j.properties文件</h3><p>Mybatis使用的日志包是log4j的，所以需要添加log4j.properties。<br>在classpath下创建log4j.properties如下：</p><pre><code> //文件内容可以从mybatis-3.2.7.pdf中拷贝 # Global logging configurationlog4j.rootLogger=DEBUG, stdout    # Console output...log4j.appender.stdout=org.apache.log4j.ConsoleAppender    log4j.appender.stdout.layout=org.apache.log4j.PatternLayout    log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</code></pre><ul><li>日志级别在开发阶段设置成DEBUG，在生产阶段设置成INFO或者ERROR。</li></ul><h2 id="编程步骤"><a href="#编程步骤" class="headerlink" title="编程步骤"></a>编程步骤</h2><ol><li>创建PO类，根据需求创建；</li><li>创建全局配置文件SqlMapConfig.xml；</li><li>编写映射文件；</li><li>加载映射文件，在SqlMapConfig.xml中进行加载；</li><li>编写测试程序，即编写Java代码，连接并操作数据库。</li></ol><p>&emsp; 思路：</p><ul><li>读取配置文件；</li><li>通过SqlSessionFactoryBuilder创建SqlSessionFactory会话工厂。</li><li>通过SqlSessionFactory创建SqlSession。</li><li>调用SqlSession的操作数据库方法。</li><li>关闭SqlSession。</li></ul><h2 id="代码开发"><a href="#代码开发" class="headerlink" title="代码开发"></a>代码开发</h2><h3 id="创建PO类"><a href="#创建PO类" class="headerlink" title="创建PO类"></a>创建PO类</h3><p>&emsp; 创建的po类的属性要和数据库中表的列名一致（如果表中的列名是带有下划线，那么po类中对应的的属性名要采用驼峰式命名）<br>&emsp;User.java类如下：</p><pre><code>//Public class User {    private int id;    private String username;// 用户姓名    private String sex;// 性别    private Date birthday;// 生日    private String address;// 地址get/set……</code></pre><h3 id="创建SqlMapConfig-xml配置文件"><a href="#创建SqlMapConfig-xml配置文件" class="headerlink" title="创建SqlMapConfig.xml配置文件"></a>创建SqlMapConfig.xml配置文件</h3><p>&emsp; 在classpath下，创建SqlMapConfig.xml文件</p><pre><code>//SqlMapConfig.xml（文件头可以从mybatis-3.2.7.pdf文档的2.1.2小节中拷贝）：&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configurationPUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;&lt;!-- 配置mybatis的环境信息 --&gt;&lt;environments default=&quot;development&quot;&gt;    &lt;environment id=&quot;development&quot;&gt;        &lt;!-- 配置JDBC事务控制，由mybatis进行管理 --&gt;        &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;        &lt;!-- 配置数据源，采用dbcp连接池 --&gt;        &lt;dataSource type=&quot;POOLED&quot;&gt;            &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;            &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;            &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;            &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;        &lt;/dataSource&gt;    &lt;/environment&gt;&lt;/environments&gt;&lt;/configuration&gt;</code></pre><h3 id="需求开发"><a href="#需求开发" class="headerlink" title="需求开发"></a>需求开发</h3><p>&emsp;在classpath下，创建sqlmap文件夹。在sqlmap目录下，创建User.xml映射文件。</p><pre><code>//Mybatis的映射文件头（可以从mybatis-3.2.7.pdf文件中拷贝）：&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper    PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;    &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</code></pre><h4 id="根据用户ID来查询用户信息"><a href="#根据用户ID来查询用户信息" class="headerlink" title="根据用户ID来查询用户信息"></a>根据用户ID来查询用户信息</h4><h5 id="编写映射文件"><a href="#编写映射文件" class="headerlink" title="编写映射文件"></a>编写映射文件</h5><p>&emsp;在User.xml中添加以下代码：</p><pre><code>//&lt;!--     namespace：命名空间，它的作用就是对SQL进行分类化管理，可以理解为SQL隔离    注意：使用mapper代理开发时，namespace有特殊且重要的作用 --&gt;&lt;mapper namespace=&quot;test&quot;&gt;        &lt;!-- 根据用户ID，查询用户信息 --&gt;    &lt;!--         [id]：statement的id，要求在命名空间内唯一          [parameterType]：入参的java类型        [resultType]：查询出的单条结果集对应的java类型        [#{}]： 表示一个占位符?        [#{id}]：表示该占位符待接收参数的名称为id。注意：如果参数为简单类型时，#{}里面的参数名称可以是任意定义     --&gt;    &lt;select id=&quot;findUserById&quot; parameterType=&quot;int&quot; resultType=&quot;cn.itcast.mybatis.po.User&quot;&gt;        SELECT * FROM USER WHERE id = #{id}    &lt;/select&gt;&lt;/mapper&gt;</code></pre><h5 id="加载映射文件"><a href="#加载映射文件" class="headerlink" title="加载映射文件"></a>加载映射文件</h5><pre><code>//在SqlMapConfig.xml中，添加以下代码：&lt;!-- 加载mapper --&gt;&lt;mappers&gt;    &lt;mapper resource=&quot;sqlmap/User.xml&quot;/&gt;&lt;/mappers&gt;</code></pre><h5 id="编写测试程序"><a href="#编写测试程序" class="headerlink" title="编写测试程序"></a>编写测试程序</h5><pre><code>//public class MybatisFirst {                @Test        public void findUserByIdTest() throws Exception{                            //1、读取配置文件            String resource = &quot;SqlMapConfig.xml&quot;;            InputStream inputStream = Resources.getResourceAsStream(resource);            //2、根据配置文件创建SqlSessionFactory            SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);            //3、SqlSessionFactory创建SqlSession            SqlSession sqlSession = sqlSessionFactory.openSession();            //4、SqlSession执行statement，并返回映射结果            //第一个参数：statement的id，建议：namespace.statementId（确保唯一）            //第二个参数：入参的值，它的类型要和映射文件中对应的statement的入参类型一致            User user = sqlSession.selectOne(&quot;findUserById&quot;, 1);                            //打印输出结果集            System.out.println(user);                            //5、关闭SqlSession            sqlSession.close();        }    }</code></pre><h4 id="根据用户名称来模糊查询用户信息列表"><a href="#根据用户名称来模糊查询用户信息列表" class="headerlink" title="根据用户名称来模糊查询用户信息列表"></a>根据用户名称来模糊查询用户信息列表</h4><h5 id="编写映射文件-1"><a href="#编写映射文件-1" class="headerlink" title="编写映射文件"></a>编写映射文件</h5><pre><code>//在User.xml中，添加以下内容&lt;!-- 根据用户名称模糊查询用户信息列表 --&gt;&lt;!--     [${}]：表示拼接SQL字符串    [${value}]：表示要拼接的是简单类型参数。    注意：      1、如果参数为简单类型时，${}里面的参数名称必须为value       2、${}会引起SQL注入，一般情况下不推荐使用。但是有些场景必须使用${}，比如order by ${colname}--&gt;&lt;select id=&quot;findUsersByName&quot; parameterType=&quot;String&quot; resultType=&quot;cn.itcast.mybatis.po.User&quot;&gt;    SELECT * FROM USER WHERE username LIKE &apos;%${value}%&apos;&lt;/select&gt;</code></pre><h5 id="加载映射文件-1"><a href="#加载映射文件-1" class="headerlink" title="加载映射文件"></a>加载映射文件</h5><pre><code>//已配置，此处无需再次配置</code></pre><h5 id="编写测试程序-1"><a href="#编写测试程序-1" class="headerlink" title="编写测试程序"></a>编写测试程序</h5><pre><code>//@Testpublic void findUsersByNameTest() throws Exception {    // 1、读取配置文件    String resource = &quot;SqlMapConfig.xml&quot;;    InputStream inputStream = Resources.getResourceAsStream(resource);    // 2、根据配置文件创建SqlSessionFactory    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);    // 3、SqlSessionFactory创建SqlSession    SqlSession sqlSession = sqlSessionFactory.openSession();    // 4、SqlSession执行statement，并返回映射结果    // 第一个参数：statement的id，建议：namespace.statementId（确保唯一）    // 第二个参数：入参的值，它的类型要和映射文件中对应的statement的入参类型一致    List&lt;User&gt; users = sqlSession.selectList(&quot;test.findUsersByName&quot;, &quot;小明&quot;);    // 打印输出结果集    System.out.println(users);    // 5、关闭SqlSession    sqlSession.close();}</code></pre><h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><h5 id="编写映射文件-2"><a href="#编写映射文件-2" class="headerlink" title="编写映射文件"></a>编写映射文件</h5><pre><code>//&lt;!-- 添加用户 --&gt;&lt;!-- 如果主键的值是通过MySQL自增机制生成的，那么我们此处不需要再显示的给ID赋值 --&gt;&lt;insert id=&quot;insertUser&quot; parameterType=&quot;cn.itcast.mybatis.po.User&quot;&gt;    INSERT INTO USER(username,sex,birthday,address) VALUES (#{username},#{sex},#{birthday},#{address})&lt;/insert&gt;</code></pre><h5 id="加载映射文件-2"><a href="#加载映射文件-2" class="headerlink" title="加载映射文件"></a>加载映射文件</h5><pre><code>//已配置，此处无需再次配置</code></pre><h5 id="编写测试程序-2"><a href="#编写测试程序-2" class="headerlink" title="编写测试程序"></a>编写测试程序</h5><pre><code>//注意：增删改操作要对SqlSession执行commit操作。@Test    public void insertUserTest() throws Exception {        // 1、读取配置文件        String resource = &quot;SqlMapConfig.xml&quot;;        InputStream inputStream = Resources.getResourceAsStream(resource);        // 2、根据配置文件创建SqlSessionFactory        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder()                .build(inputStream);        // 3、SqlSessionFactory创建SqlSession        SqlSession sqlSession = sqlSessionFactory.openSession();        // 4、SqlSession执行statement，并返回映射结果        //构建user参数，没有赋值的属性采取默认值        User user = new User();        user.setUsername(&quot;东哥1&quot;);        user.setAddress(&quot;清河宝盛西里&quot;);        // 第一个参数：statement的id，建议：namespace.statementId（确保唯一）        // 第二个参数：入参的值，它的类型要和映射文件中对应的statement的入参类型一致        sqlSession.insert(&quot;insertUser&quot;, user);        //切记：增删改操作时，要执行commit操作        sqlSession.commit();        // 5、关闭SqlSession        sqlSession.close();    }</code></pre><h5 id="主键返回之MySQL自增主键"><a href="#主键返回之MySQL自增主键" class="headerlink" title="主键返回之MySQL自增主键"></a>主键返回之MySQL自增主键</h5><p>思路：</p><ul><li>MySQL自增主键，是指在insert之前MySQL会自动生成一个自增的主键。</li><li>我们可以通过MySQL的函数获取到刚插入的自增主键:LAST_INSERT_ID()</li><li>这个函数是在insert语句之后去调用。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//修改映射文件：</span><br><span class="line"><span class="comment">&lt;!-- 添加用户之自增主键返回（selectKey方式） --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">[selectKey标签]：通过select查询来生成主键</span></span><br><span class="line"><span class="comment">[keyProperty]：指定存放生成主键的属性</span></span><br><span class="line"><span class="comment">[resultType]：生成主键所对应的Java类型</span></span><br><span class="line"><span class="comment">[order]：指定该查询主键SQL语句的执行顺序，相对于insert语句</span></span><br><span class="line"><span class="comment">[last_insert_id]：MySQL的函数，要配合insert语句一起使用</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"cn.itcast.mybatis.po.User"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span>&gt;</span></span><br><span class="line">SELECT LAST_INSERT_ID()</span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">INSERT INTO USER(username,sex,birthday,address) VALUES (#&#123;username&#125;,#&#123;sex&#125;,#&#123;birthday&#125;,#&#123;address&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="主键返回之MySQL函数UUID"><a href="#主键返回之MySQL函数UUID" class="headerlink" title="主键返回之MySQL函数UUID"></a>主键返回之MySQL函数UUID</h5><pre><code>// 注意：使用mysql的uuid()函数生成主键，需要修改表中id字段类型为string，长度设置成35位。&lt;!-- 添加用户之UUID主键返回 --&gt;&lt;!--     [uuid]：MySQL的函数，生成的主键是35位的字符串，所以使用它时要修改id的类型为字符类型    注意：        1、此时order采用BEFORE，因为需要先生成出主键，再执行insert语句        2、显式的给ID赋值--&gt;&lt;insert id=&quot;insertUser&quot; parameterType=&quot;cn.itcast.mybatis.po.User&quot;&gt;    &lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;string&quot; order=&quot;BEFORE&quot;&gt;        SELECT UUID()    &lt;/selectKey&gt;    INSERT INTO USER(id,username,sex,birthday,address) VALUES (#{id},#{username},#{sex},#{birthday},#{address})&lt;/insert&gt;</code></pre><h5 id="主键返回之Oracle序列返回"><a href="#主键返回之Oracle序列返回" class="headerlink" title="主键返回之Oracle序列返回"></a>主键返回之Oracle序列返回</h5><pre><code>//&lt;!-- 添加用户之sequence返回 --&gt;&lt;!--     通过Oracle的sequence获取主键方式与MySQL的uuid方式基本一致    --&gt;&lt;insert id=&quot;insertUser&quot; parameterType=&quot;cn.itcast.mybatis.po.User&quot;&gt;    &lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;int&quot; order=&quot;BEFORE&quot;&gt;        SELECT user_seq.nextval() FROM dual    &lt;/selectKey&gt;    INSERT INTO USER(id,username,sex,birthday,address) VALUES (#{id},#{username},#{sex},#{birthday},#{address})&lt;/insert&gt;</code></pre><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><h5 id="编写映射文件-3"><a href="#编写映射文件-3" class="headerlink" title="编写映射文件"></a>编写映射文件</h5><pre><code>//&lt;!-- 根据ID删除用户 --&gt;&lt;delete id=&quot;deleteUser&quot; parameterType=&quot;int&quot;&gt;    DELETE FROM USER WHERE id= #{id}&lt;/delete&gt;</code></pre><h5 id="加载映射文件-3"><a href="#加载映射文件-3" class="headerlink" title="加载映射文件"></a>加载映射文件</h5><pre><code>//已配置，此处无需再次配置。</code></pre><h5 id="编写测试程序-3"><a href="#编写测试程序-3" class="headerlink" title="编写测试程序"></a>编写测试程序</h5><pre><code>//@Testpublic void deleteUserTest() throws Exception{    // 1、读取配置文件    String resource = &quot;SqlMapConfig.xml&quot;;    InputStream inputStream = Resources.getResourceAsStream(resource);    // 2、根据配置文件创建SqlSessionFactory    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder()                .build(inputStream);    // 3、SqlSessionFactory创建SqlSession    SqlSession sqlSession = sqlSessionFactory.openSession();    // 4、SqlSession执行statement，并返回映射结果    // 第一个参数：statement的id，建议：namespace.statementId（确保唯一）    // 第二个参数：入参的值，它的类型要和映射文件中对应的statement的入参类型一致    sqlSession.delete(&quot;test.deleteUser&quot;, 30);                //切记：增删改操作时，要执行commit操作    sqlSession.commit();       // 5、关闭SqlSession    sqlSession.close();}</code></pre><h4 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h4><h5 id="编写映射文件-4"><a href="#编写映射文件-4" class="headerlink" title="编写映射文件"></a>编写映射文件</h5><pre><code>//&lt;!-- 根据传入的用户信息修改用户 --&gt;&lt;update id=&quot;updateUser&quot; parameterType=&quot;cn.itcast.mybatis.po.User&quot;&gt;    UPDATE USER SET username = #{username},sex=#{sex} WHERE id=#{id}&lt;/update&gt;</code></pre><h5 id="加载映射文件-4"><a href="#加载映射文件-4" class="headerlink" title="加载映射文件"></a>加载映射文件</h5><pre><code>//已配置，此处无需再次配置。</code></pre><h5 id="编写测试程序-4"><a href="#编写测试程序-4" class="headerlink" title="编写测试程序"></a>编写测试程序</h5><pre><code>//@Testpublic void updateUserTest() throws Exception{    // 1、读取配置文件    String resource = &quot;SqlMapConfig.xml&quot;;    InputStream inputStream = Resources.getResourceAsStream(resource);    // 2、根据配置文件创建SqlSessionFactory    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);    // 3、SqlSessionFactory创建SqlSession    SqlSession sqlSession = sqlSessionFactory.openSession();    // 4、SqlSession执行statement，并返回映射结果               //构建user参数，没有赋值的属性采取默认值    User user = new User();    user.setId(28);    user.setUsername(&quot;东哥11&quot;);    user.setAddress(&quot;清河宝盛西里&quot;);                // 第一个参数：statement的id，建议：namespace.statementId（确保唯一）    // 第二个参数：入参的值，它的类型要和映射文件中对应的statement的入参类型一致    sqlSession.update(&quot;test.updateUser&quot;, user);                //切记：增删改操作时，要执行commit操作    sqlSession.commit();        // 5、关闭SqlSession    sqlSession.close();}</code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h3 id="parameterType和resultType"><a href="#parameterType和resultType" class="headerlink" title="parameterType和resultType"></a>parameterType和resultType</h3><ul><li>parameterType指定输入参数的java类型，可以填写别名或Java类的全限定名。</li><li>resultType指定输出结果的java类型，可以填写别名或Java类的全限定名。</li></ul><h3 id="和"><a href="#和" class="headerlink" title="#{}和${}"></a>#{}和${}</h3><ul><li>#{}：相当于预处理中的占位符？。</li><li>#{}里面的参数表示接收java输入参数的名称。</li><li>#{}可以接受HashMap、简单类型、POJO类型的参数。</li><li>当接受简单类型的参数时，#{}里面可以是value，也可以是其他。</li><li>#{}可以防止SQL注入。</li><li>${}：相当于拼接SQL串，对传入的值不做任何解释的原样输出。</li><li>${}会引起SQL注入，所以要谨慎使用。</li><li>${}可以接受HashMap、简单类型、POJO类型的参数。</li><li>当接受简单类型的参数时，${}里面只能是value。</li></ul><h3 id="selectOne和selectList"><a href="#selectOne和selectList" class="headerlink" title="selectOne和selectList"></a>selectOne和selectList</h3><ul><li>selectOne：只能查询0或1条记录，大于1条记录的话，会报错；</li><li>selectList：可以查询0或N条记录</li></ul><h1 id="Mybatis开发dao"><a href="#Mybatis开发dao" class="headerlink" title="Mybatis开发dao"></a>Mybatis开发dao</h1><p>&emsp;&emsp;Mybatis在项目中主要使用的地方就是开发dao（数据访问层），所以下面讲解一下mybatis开发dao的方法。有两种方式：原始dao开发方式、mapper代理开发方式（推荐）。</p><h2 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h2><ol><li>根据用户ID来查询用户信息；</li><li>根据用户名称来模糊查询用户信息列表；</li><li>添加用户； </li></ol><h2 id="原始dao开发方式"><a href="#原始dao开发方式" class="headerlink" title="原始dao开发方式"></a>原始dao开发方式</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>程序员需要写dao接口和dao实现类。</li></ul><h3 id="编程步骤-1"><a href="#编程步骤-1" class="headerlink" title="编程步骤"></a>编程步骤</h3><ol><li>根据需求创建po类</li><li>编写全局配置文件</li><li>根据需求编写映射文件</li><li>加载映射文件</li><li>编写dao接口</li><li>编写dao实现类</li><li>编写测试代码</li></ol><h3 id="程序编写"><a href="#程序编写" class="headerlink" title="程序编写"></a>程序编写</h3><p>&emsp;&emsp;步骤中的1、2、3、4都在入门程序中进行了编写，此处不需要重新编写。</p><h4 id="开发dao接口"><a href="#开发dao接口" class="headerlink" title="开发dao接口"></a>开发dao接口</h4><pre><code>//public interface UserDao {           public User findUserById(int id);//根据用户ID来查询用户信息            public List&lt;User&gt; findUsersByName(String username);//根据用户名称来模糊查询用户信息列表    public void insertUser(User user);//添加用户}</code></pre><h4 id="开发dao实现类"><a href="#开发dao实现类" class="headerlink" title="开发dao实现类"></a>开发dao实现类</h4><h5 id="SqlSession使用范围"><a href="#SqlSession使用范围" class="headerlink" title="SqlSession使用范围"></a>SqlSession使用范围</h5><p>&emsp;&emsp;通过入门程序，大家可以看出，在测试代码中，有大量的重复代码。所以我们第一反应就是想给它抽取出共性的部分，但是SqlSession、SqlSessionFactory、SqlSessionFactoryBuilder有着各自的生命周期，因为这些生命周期的不同，抽取时要有针对性的处理。</p><p>&emsp;&emsp;所以在抽取之前，我们先来了解并总结下它们三个的生命周期。</p><ul><li>SqlSessionFactoryBuilder</li></ul><p>&emsp;&emsp;它的作用只是通过配置文件创建SqlSessionFactory，所以只要创建出SqlSessionFactory，它就可以销毁了。所以说，它的生命周期是在方法之内。</p><ul><li>SqlSessionFactory</li></ul><p>&emsp;&emsp;它的作用是创建SqlSession的工厂，工厂一旦创建，除非应用停掉，不要销毁。<br>所以说它的生命周期是在应用范围内。这里可以通过单例模式来管理它。<br>&emsp;&emsp;在mybatis整合spring之后，最好的处理方式是把SqlSessionFactory交由spring来做单例管理。</p><ul><li>SqlSession</li></ul><p>&emsp;&emsp;SqlSession是一个面向用户（程序员）的接口，它的默认实现是DefaultSqlSession。<br>&emsp;&emsp;Mybatis是通过SqlSession来操作数据库的。SqlSession中不仅包含要处理的SQL信息，还包括一些数据信息，所以说它是线程不安全的，因此它最佳的生命周期范围是在方法体之内。</p><h5 id="Dao实现类代码"><a href="#Dao实现类代码" class="headerlink" title="Dao实现类代码"></a>Dao实现类代码</h5><ul><li>需要向dao实现类中注入SqlSessionFactory，在方法体内通过SqlSessionFactory创建SqlSession</li><li>要注意SqlSession和SqlSessionFactory的生命周期。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//public class UserDaoImpl implements UserDao &#123;    </span></span><br><span class="line"><span class="comment">//注入SqlSessionFactory</span></span><br><span class="line"><span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"><span class="comment">//使用构造方法来初始化SqlSessionFactory</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">&#125;    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="comment">//通过工厂，在方法内部获取SqlSession，这样就可以避免线程不安全</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//返回结果集</span></span><br><span class="line"><span class="keyword">return</span> sqlSession.selectOne(<span class="string">"test.findUserById"</span>, id);</span><br><span class="line">&#125;    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUsersByName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="comment">//通过工厂，在方法内部获取SqlSession，这样就可以避免线程不安全</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">return</span> sqlSession.selectList(<span class="string">"test.findUsersByName"</span>, username);</span><br><span class="line">&#125;    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line"><span class="comment">//通过工厂，在方法内部获取SqlSession，这样就可以避免线程不安全</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">sqlSession.insert(<span class="string">"test.insertUser"</span>, user);</span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h5><pre><code>//public class UserDaoTest {    //声明全局的SqlSessionFactory    private SqlSessionFactory sqlSessionFactory;            @Before    public void setUp() throws Exception {        // 1、读取配置文件        String resource = &quot;SqlMapConfig.xml&quot;;        InputStream inputStream = Resources.getResourceAsStream(resource);        // 2、根据配置文件创建SqlSessionFactory        sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);    }        @Test    public void testFindUserById() {        //构造UserDao对象        UserDao userDao = new UserDaoImpl(sqlSessionFactory);        //调用UserDao对象的方法        User user = userDao.findUserById(1);                    System.out.println(user);    }       @Test    public void testFindUsersByName() {        //构造UserDao对象        UserDao userDao = new UserDaoImpl(sqlSessionFactory);        //调用UserDao对象的方法        List&lt;User&gt; list = userDao.findUsersByName(&quot;小明&quot;);                    System.out.println(list);    }        @Test    public void testInsertUser() {        //构造UserDao对象        UserDao userDao = new UserDaoImpl(sqlSessionFactory);        //构造User对象        User user = new User();        user.setUsername(&quot;东哥3&quot;);        user.setAddress(&quot;清河宝盛西里3&quot;);                    //调用UserDao对象的方法        userDao.insertUser(user);                    System.out.println(user.getId());    }    }</code></pre><h3 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h3><p>&emsp;原始dao开发存在一些问题：</p><ul><li>存在一定量的模板代码。比如：通过SqlSessionFactory创建SqlSession；调用SqlSession的方法操作数据库；关闭Sqlsession。</li><li>存在一些硬编码。调用SqlSession的方法操作数据库时，需要指定statement的id，这里存在了硬编码。</li></ul><h2 id="Mapper代理开发方式（推荐）"><a href="#Mapper代理开发方式（推荐）" class="headerlink" title="Mapper代理开发方式（推荐）"></a>Mapper代理开发方式（推荐）</h2><p>&emsp;&emsp;Mapper代理的开发方式，程序员只需要编写mapper接口（相当于dao接口）即可。Mybatis会自动的为mapper接口生成动态代理实现类。<br>&emsp;&emsp;不过要实现mapper代理的开发方式，需要遵循一些开发规范。</p><h3 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h3><ol><li>mapper接口的全限定名要和mapper映射文件的namespace的值相同。</li><li>mapper接口的方法名称要和mapper映射文件中的statement的id相同；<br>3.mapper接口的方法参数只能有一个，且类型要和mapper映射文件中statement的parameterType的值保持一致。</li><li>mapper接口的返回值类型要和mapper映射文件中statement的resultType值或resultMap中的type值保持一致；</li></ol><p>&emsp;注：通过规范式的开发mapper接口，可以解决原始dao开发当中存在的问题：</p><ul><li>模板代码已经去掉；</li><li>剩下去不掉的操作数据库的代码，其实就是一行代码。这行代码中硬编码的部分，通过第一和第二个规范就可以解决。</li></ul><h3 id="编程步骤-2"><a href="#编程步骤-2" class="headerlink" title="编程步骤"></a>编程步骤</h3><ol><li>根据需求创建po类</li><li>编写全局配置文件</li><li>根据需求编写映射文件</li><li>加载映射文件</li><li>编写mapper接口</li><li>编写测试代码</li></ol><h3 id="程序编写-1"><a href="#程序编写-1" class="headerlink" title="程序编写"></a>程序编写</h3><p>&emsp;&emsp;步骤中的1、2都在入门程序中进行了编写，此处不需要重新编写。</p><h4 id="编写mapper映射文件"><a href="#编写mapper映射文件" class="headerlink" title="编写mapper映射文件"></a>编写mapper映射文件</h4><p>&emsp;&emsp;重新定义mapper映射文件UserMapper.xml（内容同Users.xml，除了namespace的值），放到新创建的目录mapper下。</p><pre><code>//&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper    PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;    &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;!-- namespace：此时用mapper代理方式，它的值必须等于对应mapper接口的全限定名  --&gt;&lt;mapper namespace=&quot;cn.itcast.mybatis.mapper.UserMapper&quot;&gt;        &lt;!-- 根据用户ID，查询用户信息 --&gt;    &lt;!--         [id]：statement的id，要求在命名空间内唯一          [parameterType]：入参的java类型，可是是简单类型、POJO、HashMap        [resultType]：查询出的单条结果集对应的java类型        [#{}]： 表示一个占位符?        [#{id}]：表示该占位符待接收参数的名称为id。注意：如果参数为简单类型时，#{}里面的参数名称可以是任意定义     --&gt;    &lt;select id=&quot;findUserById&quot; parameterType=&quot;int&quot; resultType=&quot;cn.itcast.mybatis.po.User&quot;&gt;        SELECT * FROM USER WHERE id = #{id}    &lt;/select&gt;                    &lt;!-- 根据用户名称模糊查询用户信息列表 --&gt;    &lt;!--         [${}]：表示拼接SQL字符串，即不加解释的原样输出         [${value}]：表示要拼接的是简单类型参数。         注意：        1、如果参数为简单类型时，${}里面的参数名称必须为value         2、${}会引起SQL注入，一般情况下不推荐使用。但是有些场景必须使用${}，比如order by ${colname}    --&gt;    &lt;select id=&quot;findUsersByName&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;cn.itcast.mybatis.po.User&quot;&gt;        SELECT * FROM USER WHERE username LIKE &apos;%${value}%&apos;    &lt;/select&gt;            &lt;!-- 添加用户之自增主键返回（selectKey方式） --&gt;    &lt;!--         [selectKey标签]：通过select查询来生成主键        [keyProperty]：指定存放生成主键的属性        [resultType]：生成主键所对应的Java类型        [order]：指定该查询主键SQL语句的执行顺序，相对于insert语句，此时选用AFTER        [last_insert_id]：MySQL的函数，要配合insert语句一起使用     --&gt;    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;cn.itcast.mybatis.po.User&quot;&gt;        &lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;int&quot; order=&quot;AFTER&quot;&gt;            SELECT LAST_INSERT_ID()        &lt;/selectKey&gt;        INSERT INTO USER(username,sex,birthday,address) VALUES (#{username},#{sex},#{birthday},#{address})    &lt;/insert&gt;        &lt;/mapper&gt;</code></pre><h4 id="加载mapper映射文件"><a href="#加载mapper映射文件" class="headerlink" title="加载mapper映射文件"></a>加载mapper映射文件</h4><pre><code>//&lt;!-- 加载mapper --&gt;&lt;mappers&gt;    &lt;mapper resource=&quot;sqlmap/User.xml&quot;/&gt;    &lt;mapper resource=&quot;mapper/UserMapper.xml&quot;/&gt;&lt;/mappers&gt;</code></pre><h4 id="编写mapper接口"><a href="#编写mapper接口" class="headerlink" title="编写mapper接口"></a>编写mapper接口</h4><p>&emsp;&emsp;内容同UserDao接口一样：</p><pre><code>//public interface UserMapper {    //根据用户ID来查询用户信息    public User findUserById(int id);    //根据用户名称来模糊查询用户信息列表    public List&lt;User&gt; findUsersByName(String username);    //添加用户    public void insertUser(User user);}</code></pre><h4 id="编写测试代码-1"><a href="#编写测试代码-1" class="headerlink" title="编写测试代码"></a>编写测试代码</h4><pre><code>//public class UserMapperTest {        // 声明全局的SqlSessionFactory    private SqlSessionFactory sqlSessionFactory;        @Before    public void setUp() throws Exception {        // 1、读取配置文件        String resource = &quot;SqlMapConfig.xml&quot;;        InputStream inputStream = Resources.getResourceAsStream(resource);        // 2、根据配置文件创建SqlSessionFactory        sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);    }        @Test    public void testFindUserById() {        // 创建SqlSession        SqlSession sqlSession = sqlSessionFactory.openSession();        // 通过SqlSession，获取mapper接口的动态代理对象        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);        // 调用mapper对象的方法        User user = userMapper.findUserById(1);            System.out.println(user);        // 关闭SqlSession        sqlSession.close();        }        @Test    public void testFindUsersByName() {        // 创建SqlSession        SqlSession sqlSession = sqlSessionFactory.openSession();        // 通过SqlSession，获取mapper接口的动态代理对象        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);        // 调用mapper对象的方法        List&lt;User&gt; list = userMapper.findUsersByName(&quot;小明&quot;);            System.out.println(list);        // 关闭SqlSession        sqlSession.close();    }        @Test    public void testInsertUser() {        // 创建SqlSession        SqlSession sqlSession = sqlSessionFactory.openSession();        // 通过SqlSession，获取mapper接口的动态代理对象        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);                    //构造User对象        User user = new User();        user.setUsername(&quot;东哥4&quot;);        user.setAddress(&quot;清河宝盛西里4&quot;);                    // 调用mapper对象的方法        userMapper.insertUser(user);            System.out.println(user.getId());                    //执行SqlSession的commit操作        sqlSession.commit();        // 关闭SqlSession        sqlSession.close();    }    }</code></pre><h1 id="Mybatis全局配置文件"><a href="#Mybatis全局配置文件" class="headerlink" title="Mybatis全局配置文件"></a>Mybatis全局配置文件</h1><p>&emsp;&emsp;SqlMapConfig.xml是mybatis的全局配置文件，它的名称可以是任意命名的。</p><h2 id="全部配置内容"><a href="#全部配置内容" class="headerlink" title="全部配置内容"></a>全部配置内容</h2><p>&emsp;SqlMapConfig.xml的配置内容和顺序如下（顺序不能乱）：</p><ul><li>Properties（属性）</li><li>Settings（全局参数设置）</li><li>typeAliases（类型别名）</li><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins（插件）</li><li>environments（环境信息集合）</li><li><ul><li>environment（单个环境信息）</li></ul></li><li><ul><li><ul><li>transactionManager（事物）</li></ul></li></ul></li><li><ul><li><ul><li>dataSource（数据源）</li></ul></li></ul></li><li>mappers（映射器）</li></ul><h2 id="常用配置详解"><a href="#常用配置详解" class="headerlink" title="常用配置详解"></a>常用配置详解</h2><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><p>&emsp;SqlMapConfig.xml文件中可以引用java属性文件中的配置信息<br>&emsp;&emsp;db.properties配置信息如下：</p><pre><code>//db.driver=com.mysql.jdbc.Driverdb.url=jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf8db.username=rootdb.password=root</code></pre><p>SqlMapConfig.xml使用properties标签后，如下所示：</p><pre><code>//&lt;!-- 通过properties标签，读取java配置文件的内容 --&gt;&lt;properties resource=&quot;db.properties&quot; /&gt;    &lt;!-- 配置mybatis的环境信息 --&gt;&lt;environments default=&quot;development&quot;&gt;    &lt;environment id=&quot;development&quot;&gt;        &lt;!-- 配置JDBC事务控制，由mybatis进行管理 --&gt;        &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;        &lt;!-- 配置数据源，采用dbcp连接池 --&gt;        &lt;dataSource type=&quot;POOLED&quot;&gt;            &lt;property name=&quot;driver&quot; value=&quot;${db.driver}&quot;/&gt;            &lt;property name=&quot;url&quot; value=&quot;${db.url}&quot;/&gt;            &lt;property name=&quot;username&quot; value=&quot;${db.username}&quot;/&gt;            &lt;property name=&quot;password&quot; value=&quot;${db.password}&quot;/&gt;        &lt;/dataSource&gt;    &lt;/environment&gt;&lt;/environments&gt;              </code></pre><p>&emsp;使用${}，可以引用已经加载的java配置文件中的信息。</p><p>&emsp;&emsp;注意：mybatis将按照下面的顺序加载属性：</p><ul><li>Properties标签体内定义的属性首先被读取</li><li>Properties引用的属性会被读取，如果发现上面已经有同名的属性了，那后面会覆盖前面的值</li><li>parameterType接收的值会最后被读取，如果发现上面已经有同名的属性了，那后面会覆盖前面的值</li></ul><p>&emsp;所以说，mybatis读取属性的顺序由高到低分别是：parameterType接收的属性值、properties引用的属性、properties标签内定义的属性。</p><h3 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h3><p>&emsp;&emsp;mybatis全局配置参数，全局参数将会影响mybatis的运行行为。详细如下：</p><p><img src="/images/mybatis/setting%E9%85%8D%E7%BD%AE1.png" alt="setting配置1"><br><img src="/images/mybatis/setting%E9%85%8D%E7%BD%AE2.png" alt="setting配置2"></p><h3 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h3><p>&emsp;&emsp;别名是使用是为了在映射文件中，更方便的去指定入参和结果集的类型，不再用写很长的一段全限定名。</p><h4 id="mybatis支持的别名"><a href="#mybatis支持的别名" class="headerlink" title="mybatis支持的别名"></a>mybatis支持的别名</h4><table><thead><tr><th style="text-align:center">别名</th><th style="text-align:center">映射的类型</th></tr></thead><tbody><tr><td style="text-align:center">_byte</td><td style="text-align:center">byte</td></tr><tr><td style="text-align:center">_long</td><td style="text-align:center">long</td></tr><tr><td style="text-align:center">_short</td><td style="text-align:center">short</td></tr><tr><td style="text-align:center">_int</td><td style="text-align:center">int</td></tr><tr><td style="text-align:center">_integer</td><td style="text-align:center">int</td></tr><tr><td style="text-align:center">_double</td><td style="text-align:center">double</td></tr><tr><td style="text-align:center">_float</td><td style="text-align:center">float</td></tr><tr><td style="text-align:center">_boolean</td><td style="text-align:center">boolean</td></tr><tr><td style="text-align:center">string</td><td style="text-align:center">String</td></tr><tr><td style="text-align:center">byte</td><td style="text-align:center">Byte</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">Long</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">Short</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">Integer</td></tr><tr><td style="text-align:center">integer</td><td style="text-align:center">Integer</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">Double</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">Float</td></tr><tr><td style="text-align:center">boolean</td><td style="text-align:center">Boolean</td></tr><tr><td style="text-align:center">date</td><td style="text-align:center">Date</td></tr><tr><td style="text-align:center">decimal</td><td style="text-align:center">BigDecimal</td></tr><tr><td style="text-align:center">bigdecimal</td><td style="text-align:center">BigDecimal</td></tr></tbody></table><h4 id="自定义别名"><a href="#自定义别名" class="headerlink" title="自定义别名"></a>自定义别名</h4><p>&emsp;&emsp;SqlMapConfig.xml配置信息如下：</p><pre><code>//&lt;!-- 定义别名 --&gt;    &lt;typeAliases&gt;        &lt;!-- 单个定义别名 --&gt;        &lt;typeAlias type=&quot;cn.itcast.mybatis.po.User&quot; alias=&quot;user&quot;/&gt;                    &lt;!-- 批量定义别名（推荐） --&gt;        &lt;!-- [name]：指定批量定义别名的类包，别名为类名（首字母大小写都可） --&gt;        &lt;package name=&quot;cn.itcast.mybatis.po&quot;/&gt;    &lt;/typeAliases&gt;                </code></pre><h3 id="mappers"><a href="#mappers" class="headerlink" title="mappers"></a>mappers</h3><h4 id="lt-mapper-resource-’’-gt"><a href="#lt-mapper-resource-’’-gt" class="headerlink" title="&lt;mapper resource=’’/&gt;"></a><code>&lt;mapper resource=’’/&gt;</code></h4><p>&emsp;&emsp;使用相对于类路径的资源<br>&emsp;&emsp;&emsp;如：<code>&lt;mapper resource=&quot;sqlmap/User.xml&quot; /&gt;</code></p><h4 id="lt-mapper-url-’’-gt"><a href="#lt-mapper-url-’’-gt" class="headerlink" title="&lt;mapper url=’’/&gt;"></a><code>&lt;mapper url=’’/&gt;</code></h4><p>&emsp;&emsp;使用完全限定路径如：<br>&emsp;&emsp;&emsp;<code>&lt;mapper url=&quot;file:///D:\workspace_spingmvc\mybatis_01\config\sqlmap\User.xml&quot; /&gt;</code></p><h4 id="lt-mapper-class-’’-gt"><a href="#lt-mapper-class-’’-gt" class="headerlink" title="&lt;mapper class=’’/&gt;"></a><code>&lt;mapper class=’’/&gt;</code></h4><p>&emsp;&emsp;使用mapper接口的全限定名<br>&emsp;&emsp;&emsp;如：<code>&lt;mapper class=&quot;cn.itcast.mybatis.mapper.UserMapper&quot;/&gt;</code><br><strong>注意：此种方法要求mapper接口和mapper映射文件要名称相同，且放到同一个目录下;</strong></p><h4 id="lt-package-name-’’-gt-（推荐）"><a href="#lt-package-name-’’-gt-（推荐）" class="headerlink" title="&lt;package name=’’/&gt;`（推荐）"></a><code>&lt;package name=’’/&gt;`</code>（推荐）</h4><p>&emsp;&emsp;注册指定包下的所有映射文件<br>&emsp;&emsp;&emsp;如：<code>&lt;package name=&quot;cn.itcast.mybatis.mapper&quot;/&gt;</code><br><strong>注意：此种方法要求mapper接口和mapper映射文件要名称相同，且放到同一个目录下;</strong></p><h1 id="Mybatis映射文件（核心）"><a href="#Mybatis映射文件（核心）" class="headerlink" title="Mybatis映射文件（核心）"></a>Mybatis映射文件（核心）</h1><h2 id="输入映射"><a href="#输入映射" class="headerlink" title="输入映射"></a>输入映射</h2><h3 id="ParameterType"><a href="#ParameterType" class="headerlink" title="ParameterType"></a>ParameterType</h3><p>&emsp;&emsp;指定输入参数的java类型，可以使用别名或者类的全限定名。它可以接收简单类型、POJO、HashMap。</p><h4 id="传递简单类型"><a href="#传递简单类型" class="headerlink" title="传递简单类型"></a>传递简单类型</h4><p>&emsp;&emsp;参考入门需求：根据用户ID查询用户信息。<br><img src="/images/mybatis/7.1.1.png" alt="7.1.1"></p><h4 id="传递POJO对象"><a href="#传递POJO对象" class="headerlink" title="传递POJO对象"></a>传递POJO对象</h4><p>&emsp;&emsp;参考入门需求：添加用户。<br><img src="/images/mybatis/7.1.2.png" alt="7.1.2"></p><h4 id="传递POJO包装对象"><a href="#传递POJO包装对象" class="headerlink" title="传递POJO包装对象"></a>传递POJO包装对象</h4><p>&emsp;&emsp;开发中通过pojo传递查询条件 ，查询条件是综合的查询条件，不仅包括用户查询条件还包括其它的查询条件（比如将用户购买商品信息也作为查询条件），这时可以使用包装对象传递输入参数。</p><h5 id="需求-2"><a href="#需求-2" class="headerlink" title="需求"></a>需求</h5><p>&emsp;&emsp;综合查询用户信息，需要传入查询条件复杂，比如（用户信息、订单信息、商品信息）。</p><h5 id="定义包装对象"><a href="#定义包装对象" class="headerlink" title="定义包装对象"></a>定义包装对象</h5><p>&emsp;&emsp;一般User.java类要和数据表表字段一致，最好不要在这里面添加其他字段，学习mybatis的逆向工程时，会根据表结构，生成po类，如果在po类中扩展字段，此时会被覆盖掉。<br>&emsp;&emsp;所以针对要扩展的po类，我们需要创建一个扩展类，来继承它。<br><img src="/images/mybatis/7.1.3.png" alt="7.1.3"></p><p>&emsp;&emsp;定义POJO包装类：<br><img src="/images/mybatis/7.1.4.png" alt="7.1.4"></p><h5 id="编写Mapper接口"><a href="#编写Mapper接口" class="headerlink" title="编写Mapper接口"></a>编写Mapper接口</h5><pre><code>//通过包装类来进行复杂的用户信息综合查询    public List&lt;UserExt&gt; findUserList(UserQueryVO userQueryVO);</code></pre><h5 id="编写mapper映射文件-1"><a href="#编写mapper映射文件-1" class="headerlink" title="编写mapper映射文件"></a>编写mapper映射文件</h5><pre><code>&lt;!-- 通过包装类来进行复杂的用户信息综合查询 --&gt;    &lt;select id=_&quot;findUserList&quot;_ parameterType=_&quot;userQueryVO&quot;_ resultType=_&quot;userExt&quot;_&gt;  SELECT * FROM USER WHERE sex=#{userExt.sex} AND username LIKE &apos;%${userExt.username}%&apos;    &lt;/select&gt;  </code></pre><p> <strong>注意：入参的类型变为UserQueryVO、结果集的类型变为UserExt，#{}里面的参数变为UserQueryVO对象中的userExt属性的sex和username子属性。</strong></p><h5 id="编写测试代码-2"><a href="#编写测试代码-2" class="headerlink" title="编写测试代码"></a>编写测试代码</h5><pre><code>//@Testpublic void findUserListTest() {    // 创建SqlSession    SqlSession sqlSession = sqlSessionFactory.openSession();    // 通过SqlSession，获取mapper接口的动态代理对象    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);        //构造userQueryVO对象    UserQueryVO userQueryVO = new UserQueryVO();               // 构造UserExt对象    UserExt userExt = new UserExt();    userExt.setSex(&quot;1&quot;);    userExt.setUsername(&quot;小明&quot;);                userQueryVO.setUserExt(userExt);        // 调用mapper对象的方法    List&lt;UserExt&gt; list = userMapper.findUserList(userQueryVO);        System.out.println(list);    // 关闭SqlSession    sqlSession.close();}</code></pre><h4 id="传递HashMap（练习）"><a href="#传递HashMap（练习）" class="headerlink" title="传递HashMap（练习）"></a>传递HashMap（练习）</h4><ul><li>同传递POJO对象一样，map的key相当于pojo的属性。</li></ul><h5 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h5><pre><code>&lt;!-- 传递hashmap综合查询用户信息 --&gt;      &lt;select id=&quot;findUserByHashmap&quot; parameterType=&quot;hashmap&quot; resultType=&quot;user&quot;&gt;     select * from user where id=#{id} and username like &apos;%${username}%&apos;     &lt;/select&gt;          </code></pre><p>  &emsp;&emsp; 上边引用的是hashmap的key。</p><h5 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h5><pre><code>Public void testFindUserByHashmap()throws Exception{      //获取session     SqlSession session = sqlSessionFactory.openSession();      //获限mapper接口实例     UserMapper userMapper = session.getMapper(UserMapper.class);      //构造查询条件Hashmap对象     HashMap&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();     map.put(&quot;id&quot;, 1);     map.put(&quot;username&quot;, &quot;管理员&quot;);     //传递Hashmap对象查询用户列表     List&lt;User&gt;list = userMapper.findUserByHashmap(map);      //关闭session     session.close();     }</code></pre><p>&emsp;异常测试：</p><ul><li>传递的map中的key和sql中解析的key不一致。</li><li>测试结果没有报错，只是通过key获取值为空。</li></ul><h2 id="输出映射"><a href="#输出映射" class="headerlink" title="输出映射"></a>输出映射</h2><h3 id="resultType"><a href="#resultType" class="headerlink" title="resultType"></a>resultType</h3><p>&emsp;&emsp;先看下原先resultType作为输出结果映射时，它的特点，如何再把列名改为别名，看看是否还能不能映射成功。</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ul><li>使用resultType进行结果映射时，查询的列名和映射的pojo属性名完全一致，该列才能映射成功。</li><li>如果查询的列名和映射的pojo属性名全部不一致，则不会创建pojo对象；</li><li>如果查询的列名和映射的pojo属性名有一个一致，就会创建pojo对象。</li></ul><h4 id="输出简单类型"><a href="#输出简单类型" class="headerlink" title="输出简单类型"></a>输出简单类型</h4><p>&emsp;&emsp;当输出结果只有一列时，可以使用ResultType指定简单类型作为输出结果类型。</p><h5 id="需求-3"><a href="#需求-3" class="headerlink" title="需求"></a>需求</h5><p> &emsp;&emsp;综合查询用户总数，需要传入查询条件复杂，比如（用户信息、订单信息、商品信息）。</p><h5 id="Mapper映射文件"><a href="#Mapper映射文件" class="headerlink" title="Mapper映射文件"></a>Mapper映射文件</h5><pre><code>&lt;!-- 综合查询用户信息总数，需要传入查询条件复杂，比如（用户信息、订单信息、商品信息） --&gt;    &lt;select id=&quot;findUsersCount&quot; parameterType=&quot;UserQueryVO&quot;     resultType=&quot;int&quot;&gt;     SELECT count(1) FROM USER WHERE sex = #{userExt.sex} AND username LIKE &apos;%${userExt.username}%&apos;    &lt;/select&gt;</code></pre><h5 id="Mapper接口"><a href="#Mapper接口" class="headerlink" title="Mapper接口"></a>Mapper接口</h5><pre><code>//综合查询用户信息总数。学习：resultType输出简单类型    public int findUsersCount(UserQueryVO vo);        </code></pre><h5 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h5><pre><code>//@Testpublic void testFindUsersCount() {    // 创建SqlSession    SqlSession sqlSession = sqlSessionFactory.openSession();    // 通过SqlSession，获取mapper接口的动态代理对象    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);        //构造userQueryVO对象    UserQueryVO userQueryVO = new UserQueryVO();                // 构造UserExt对象    UserExt userExt = new UserExt();    userExt.setSex(&quot;1&quot;);    userExt.setUsername(&quot;小明&quot;);               userQueryVO.setUserExt(userExt);        int count = mapper.findUsersCount(userQueryVO);    System.out.println(count);    // 关闭SqlSession    sqlSession.close();}</code></pre><h4 id="输出POJO单个对象和列表"><a href="#输出POJO单个对象和列表" class="headerlink" title="输出POJO单个对象和列表"></a>输出POJO单个对象和列表</h4><p>&emsp;<strong>注意：输出单个pojo对象和pojo列表（盛放pojo对象）时，mapper映射文件中的resultType的类型是一样的，mapper接口的方法返回值不同。</strong></p><h5 id="Mapper映射文件-1"><a href="#Mapper映射文件-1" class="headerlink" title="Mapper映射文件"></a>Mapper映射文件</h5><p>&emsp;&emsp;Mapper映射文件是同一个</p><pre><code>&lt;select id=&quot;findUsersByName&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;cn.itcast.mybatis.po.User&quot;&gt;     SELECT * FROM USER WHERE username LIKE &apos;%${value}%&apos;    &lt;/select&gt;</code></pre><h5 id="Mapper接口-1"><a href="#Mapper接口-1" class="headerlink" title="Mapper接口"></a>Mapper接口</h5><p>&emsp;&emsp;下面看下mapper接口的不同之处</p><ol><li>输出单个pojo对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//根据用户名称来模糊查询用户信息  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findUsersByName</span><span class="params">(String username)</span></span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>输出pojo列表</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据用户名称来模糊查询用户信息列表    </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUsersByName</span><span class="params">(String username)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>总结：同样的mapper映射文件，返回单个对象和对象列表时，mapper接口在生成动态代理的时候，会根据返回值的类型，决定调用selectOne方法还是selectList方法。</li></ul><h3 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h3><p>&emsp;&emsp;resultMap可以进行高级结果映射（一对一、一对多映射）。</p><h4 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h4><p>&emsp;&emsp;如果查询出来的列名和属性名不一致，通过定义一个resultMap将列名和pojo属性名之间作一个映射关系。</p><ol><li>定义resultMap</li><li>使用resultMap作为statement的输出映射类型。</li></ol><h4 id="需求-4"><a href="#需求-4" class="headerlink" title="需求"></a>需求</h4><p>&emsp;&emsp;把下面SQL的输出结果集进行映射</p><pre><code>SELECT id id_,username username_,sex sex_ FROM USER WHERE id = 1</code></pre><h4 id="Mapper映射文件-2"><a href="#Mapper映射文件-2" class="headerlink" title="Mapper映射文件"></a>Mapper映射文件</h4><p>&emsp;&emsp;定义resultMap：</p><pre><code>&lt;!-- 定义resultMap --&gt;    &lt;!--     [id]：定义resultMap的唯一标识    [type]：定义该resultMap最终映射的pojo对象     [id标签]：映射结果集的唯一标识列，如果是多个字段联合唯一，则定义多个id标签     [result标签]：映射结果集的普通列     [column]：SQL查询的列名，如果列有别名，则该处填写别名     [property]：pojo对象的属性名    --&gt;    &lt;resultMap type=&quot;user&quot; id=&quot;userResultMap&quot;&gt;      &lt;id column=&quot;id_&quot; property=&quot;id&quot;/&gt;      &lt;result column=&quot;username_&quot; property=&quot;username&quot;/&gt;      &lt;result column=&quot;sex_&quot; property=&quot;sex&quot;/&gt;    &lt;/resultMap&gt;</code></pre><p>&emsp;&emsp;定义statement：</p><pre><code>&lt;!-- 根据ID查询用户信息（学习resultMap） --&gt;    &lt;select id=&quot;findUserByIdResultMap&quot; parameterType=&quot;int&quot; resultMap=&quot;userResultMap&quot;&gt;    SELECT id id_,username username_,sex sex_ FROM USER WHERE id = #{id}    &lt;/select&gt;</code></pre><h4 id="Mapper接口定义"><a href="#Mapper接口定义" class="headerlink" title="Mapper接口定义"></a>Mapper接口定义</h4><pre><code>//根据ID查询用户信息（学习resultMap）public User findUserByIdResultMap(int id);</code></pre><ul><li>定义Statement使用resultMap映射结果集时，Mapper接口定义方法的返回值类型为mapper映射文件中resultMap的type类型。</li></ul><h4 id="测试代码-2"><a href="#测试代码-2" class="headerlink" title="测试代码"></a>测试代码</h4><pre><code>@Test    public  void findUserByIdResultMapTest() {      // 创建SqlSession    SqlSession sqlSession = sqlSessionFactory.openSession();      // 通过SqlSession，获取mapper接口的动态代理对象     UserMapper userMapper = sqlSession.getMapper(UserMapper.class);      // 调用mapper对象的方法     User user = userMapper.findUserByIdResultMap(1);     System._out_.println(user);      // 关闭SqlSession    sqlSession.close();</code></pre><h2 id="动态SQL（重点）"><a href="#动态SQL（重点）" class="headerlink" title="动态SQL（重点）"></a>动态SQL（重点）</h2><p>&emsp;&emsp;通过Mybatis提供的各种动态标签实现动态拼接sql，使得mapper映射文件在编写SQL时更加灵活，方便。常用动态SQL标签有：if、where、foreach；</p><h3 id="If和where"><a href="#If和where" class="headerlink" title="If和where"></a>If和where</h3><ul><li><p>If标签：作为判断入参来使用的，如果符合条件，则把if标签体内的SQL拼接上。<br><strong>注意：用if进行判断是否为空时，不仅要判断null，也要判断空字符串‘’；</strong></p></li><li><p>Where标签：会去掉条件中的第一个and符号。</p></li></ul><h4 id="需求-5"><a href="#需求-5" class="headerlink" title="需求"></a>需求</h4><p>&emsp;&emsp;用户信息综合查询列表和用户信息综合查询总数这两个statement的定义使用动态SQL。</p><h4 id="映射文件-1"><a href="#映射文件-1" class="headerlink" title="映射文件"></a>映射文件</h4><pre><code>&lt;!-- 综合查询用户信息，需要传入查询条件复杂，比如（用户信息、订单信息、商品信息） --&gt;   &lt;select id=&quot;findUsersByQueryVO&quot; parameterType=&quot;cn.itcast.mybatis.po.QueryUserVO&quot;     resultType=&quot;User&quot;&gt;    SELECT * FROM USER      &lt;where&gt;      &lt;if test=&quot;userExt != null&quot;&gt;      &lt;if test=&quot;userExt.sex != null and userExt.sex != &apos;&apos;&quot;&gt;     AND sex = #{userExt.sex}      &lt;/if&gt;      &lt;if test=&quot;userExt.username != null and userExt.username != &apos;&apos;&quot;&gt;     AND username LIKE &apos;%${userExt.username}%&apos;      &lt;/if&gt;      &lt;/if&gt;      &lt;/where&gt;    &lt;/select&gt;    &lt;!-- 综合查询用户信息总数，需要传入查询条件复杂，比如（用户信息、订单信息、商品信息） --&gt;    &lt;select id=&quot;findUsersCount&quot; parameterType=&quot;QueryUserVO&quot;    resultType=&quot;int&quot;&gt;     SELECT count(1) FROM USER      &lt;where&gt;      &lt;if test=&quot;userExt != null&quot;&gt;      &lt;if test=&quot;userExt.sex != null and userExt.sex != &apos;&apos;&quot;&gt;    AND sex = #{userExt.sex}      &lt;/if&gt;      &lt;if test=&quot;userExt.username != null and userExt.username != &apos;&apos;&quot;&gt;     AND username LIKE &apos;%${userExt.username}%&apos;      &lt;/if&gt;      &lt;/if&gt;      &lt;/where&gt;    &lt;/select&gt;</code></pre><h4 id="Mapper接口-2"><a href="#Mapper接口-2" class="headerlink" title="Mapper接口"></a>Mapper接口</h4><pre><code>//通过包装类来进行复杂的用户信息综合查询    public List&lt;UserExt&gt; findUserList(UserQueryVO userQueryVO);    //综合查询用户总数    public int findUsersCount(UserQueryVO userQueryVO);</code></pre><h4 id="测试代码-3"><a href="#测试代码-3" class="headerlink" title="测试代码"></a>测试代码</h4><p>&emsp;&emsp;不传用户名：<br><img src="/images/mybatis/7.3.1.png" alt="7.3.1"></p><p>&emsp;&emsp;输出的SQL如下（也不包含用户名）：<br><img src="/images/mybatis/7.3.2.png" alt="7.3.2"></p><p>&emsp;通过测试可以得知，打印出的SQL语句确实会随着条件的满足情况而不一样。</p><h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><p>&emsp;&emsp;Mybatis提供了SQL片段的功能，可以提高SQL的可重用性。</p><h4 id="定义SQL片段"><a href="#定义SQL片段" class="headerlink" title="定义SQL片段"></a>定义SQL片段</h4><p>&emsp;&emsp;使用sql标签来定义一个SQL片段：</p><pre><code>//&lt;!-- 定义SQL片段 --&gt;    &lt;!--     [sql标签]：定义一个SQL片段     [id]：SQL片段的唯一标识      建议：     1、SQL片段中的内容最好是以单表来定义     2、如果是查询字段，则不要写上SELECT     3、如果是条件语句，则不要写上WHERE     --&gt;    &lt;sql id=_&quot;select_user_where&quot;_&gt;      &lt;if test=_&quot;userExt != null&quot;_&gt;      &lt;if test=_&quot;userExt.sex != null and userExt.sex != &apos;&apos;&quot;_&gt;     AND sex = #{userExt.sex}      &lt;/if&gt;      &lt;if test=_&quot;userExt.username != null and userExt.username != &apos;&apos;&quot;_&gt;     AND username LIKE &apos;%${userExt.username}%&apos;      &lt;/if&gt;      &lt;/if&gt;    &lt;/sql&gt;</code></pre><h4 id="引用SQL片段"><a href="#引用SQL片段" class="headerlink" title="引用SQL片段"></a>引用SQL片段</h4><p>&emsp;&emsp;使用<code>&lt;include refid=’’ /&gt;</code> 来引用SQL片段：</p><pre><code>//&lt;!-- 根据用户id来查询用户信息（使用SQL片段） --&gt;    &lt;!--     [include标签]：引用已经定义好的SQL片段     [refid]：引用的SQL片段id    --&gt;    &lt;select id=_&quot;findUserList&quot;_ parameterType=_&quot;userQueryVO&quot;_ resultType=_&quot;userExt&quot;_&gt;    SELECT * FROM USER    &lt;where&gt;      &lt;include refid=_&quot;select_user_where&quot;_/&gt;     &lt;/where&gt;    &lt;/select&gt;    &lt;!-- 综合查询用户信息总数，需要传入查询条件复杂，比如（用户信息、订单信息、商品信息） --&gt;    &lt;select id=_&quot;findUsersCount&quot;_ parameterType=_&quot;QueryUserVO&quot;_     resultType=_&quot;int&quot;_&gt;     SELECT count(1) FROM USER      &lt;where&gt;      &lt;include refid=_&quot;select_user_where&quot;_/&gt;      &lt;/where&gt;    &lt;/select&gt;</code></pre><h3 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h3><p>&emsp;&emsp;向sql传递数组或List时，mybatis使用foreach解析数组里的参数并拼接到SQL中。</p><h4 id="传递pojo对象中的List集合"><a href="#传递pojo对象中的List集合" class="headerlink" title="传递pojo对象中的List集合"></a>传递pojo对象中的List集合</h4><h5 id="需求-6"><a href="#需求-6" class="headerlink" title="需求"></a>需求</h5><p>&emsp;&emsp;在用户查询列表和查询总数的statement中增加多个id输入查询。</p><h5 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h5><p><code>SELECT * FROM user WHERE id IN (1,10,16)</code></p><p>定义pojo中的List属性<br><img src="/images/mybatis/7.3.3.png" alt="7.3.3"></p><h5 id="映射文件-2"><a href="#映射文件-2" class="headerlink" title="映射文件"></a>映射文件</h5><pre><code>//&lt;!-- [foreach标签]：表示一个foreach循环 --&gt;    &lt;!-- [collection]：集合参数的名称，如果是直接传入集合参数，则该处的参数名称只能填写[list]。 --&gt;    &lt;!-- [item]：每次遍历出来的对象 --&gt;    &lt;!-- [open]：开始遍历时拼接的串 --&gt;    &lt;!-- [close]：结束遍历时拼接的串 --&gt;    &lt;!-- [separator]：遍历出的每个对象之间需要拼接的字符 --&gt;    &lt;if test=_&quot;idList != null and idList.size &gt; 0&quot;_&gt;    &lt;foreach collection=_&quot;idList&quot;_ item=_&quot;id&quot;_ open=_&quot;AND id IN (&quot;_ close=_&quot;)&quot;_ separator=_&quot;,&quot;_&gt;     #{id}    &lt;/foreach&gt;    &lt;/if&gt;</code></pre><h5 id="Mapper接口-3"><a href="#Mapper接口-3" class="headerlink" title="Mapper接口"></a>Mapper接口</h5><p>&emsp;&emsp;根据用户ID的集合查询用户列表（学习foreach标签之通过POJO对象传ID集合）<br><code>public List&lt;UserExt&gt; findUserList(UserQueryVO vo);</code></p><h5 id="测试代码-4"><a href="#测试代码-4" class="headerlink" title="测试代码"></a>测试代码</h5><pre><code>//@Test    public  void testFindUserList() {      // 创建SqlSession     SqlSession sqlSession = sqlSessionFactory.openSession();      // 通过SqlSession，获取mapper接口的动态代理对象     UserMapper mapper = sqlSession.getMapper(UserMapper.class);      // 构造QueryUserVO对象     QueryUserVO vo = new QueryUserVO();      // UserExt ext = new UserExt();      // ext.setUsername(&quot;小明&quot;);      // ext.setSex(&quot;1&quot;);      // vo.setUserExt(ext);      // 创建用户ID集合，然后设置到QueryUserVO对象中     List&lt;Integer&gt; idList = new ArrayList&lt;Integer&gt;();     idList.add(1);     idList.add(10);     idList.add(16);     vo.setIdList(idList);      // 调用mapper代理对象的方法     List&lt;UserExt&gt; list = mapper.findUserList(vo);     System._out_.println(list);      // 关闭SqlSession     sqlSession.close();    }</code></pre><h4 id="直接传递List集合"><a href="#直接传递List集合" class="headerlink" title="直接传递List集合"></a>直接传递List集合</h4><h5 id="需求-7"><a href="#需求-7" class="headerlink" title="需求"></a>需求</h5><p>&emsp;&emsp;根据用户ID的集合查询用户列表</p><h5 id="SQL-1"><a href="#SQL-1" class="headerlink" title="SQL"></a>SQL</h5><p><code>SELECT * FROM user WHERE id IN (1,10,16)</code></p><h5 id="映射文件-3"><a href="#映射文件-3" class="headerlink" title="映射文件"></a>映射文件</h5><pre><code>//&lt;!-- 根据用户ID的集合查询用户列表（学习foreach标签之直接传ID集合） --&gt;    &lt;!--     [foreach标签]：表示一个foreach循环     [collection]：集合参数的名称，如果是直接传入集合参数，则该处的参数名称只能填写[list]。     [item]：定义遍历集合之后的参数名称     [open]：开始遍历之前需要拼接的SQL串     [close]：结束遍历之后需要拼接的SQL串     [separator]：遍历出的每个对象之间需要拼接的字符     --&gt;    &lt;select id=&quot;findUsersByIdList&quot; parameterType=&quot;java.util.List&quot; resultType=&quot;user&quot;&gt;     SELECT * FROM USER      &lt;where&gt;      &lt;if test=&quot;list!= null and list.size &gt; 0&quot;&gt;      &lt;foreach collection=&quot;list&quot; item=&quot;id&quot; open=&quot;AND id IN (&quot; close=&quot;)&quot;_separator=&quot;,&quot;&gt;     #{id}      &lt;/foreach&gt;      &lt;/if&gt;      &lt;/where&gt;    &lt;/select&gt;</code></pre><h5 id="Mapper接口-4"><a href="#Mapper接口-4" class="headerlink" title="Mapper接口"></a>Mapper接口</h5><pre><code>//根据用户ID的集合查询用户列表（学习foreach标签之直接传ID集合)    public List&lt;User&gt; findUsersByIdList (List&lt;Integer&gt; idList);</code></pre><h5 id="测试代码-5"><a href="#测试代码-5" class="headerlink" title="测试代码"></a>测试代码</h5><pre><code>//@Test    public  void findUsersByIdListTest() {      // 创建SqlSession     SqlSession sqlSession = sqlSessionFactory.openSession();      // 通过SqlSession，获取mapper接口的动态代理对象     UserMapper userMapper = sqlSession.getMapper(UserMapper.class);      // 构造List&lt;Integer&gt;集合     List&lt;Integer&gt; idList = new ArrayList&lt;Integer&gt;();     idList.add(1);     idList.add(10);    idList.add(16);      // 调用mapper对象的方法     List&lt;User&gt; list = userMapper.findUsersByIdList (idList);     System.out.println(list);      // 关闭SqlSession     sqlSession.close();    }</code></pre><h1 id="mybatis与hibernate的区别及各自应用场景"><a href="#mybatis与hibernate的区别及各自应用场景" class="headerlink" title="mybatis与hibernate的区别及各自应用场景"></a>mybatis与hibernate的区别及各自应用场景</h1><p>&emsp;Mybatis技术特点：</p><ol><li>通过直接编写SQL语句，可以直接对SQL进行性能的优化；</li><li>学习门槛低，学习成本低。只要有SQL基础，就可以学习mybatis，而且很容易上手；</li><li>由于直接编写SQL语句，所以灵活多变，代码维护性更好。</li><li>不能支持数据库无关性，即数据库发生变更，要写多套代码进行支持，移植性不好。</li><li>需要编写结果映射。</li></ol><p>&emsp;Hibernate技术特点：</p><ol><li>标准的orm框架，程序员不需要编写SQL语句。</li><li>具有良好的数据库无关性，即数据库发生变化的话，代码无需再次编写。</li><li>学习门槛高，需要对数据关系模型有良好的基础，而且在设置OR映射的时候，需要考虑好性能和对象模型的权衡。</li><li>程序员不能自主的去进行SQL性能优化。</li></ol><p>&emsp;Mybatis应用场景：</p><p>  &emsp;&emsp;需求多变的互联网项目，例如电商项目。</p><p>&emsp;Hibernate应用场景：</p><p>  &emsp;&emsp;需求明确、业务固定的项目，例如OA项目、ERP项目等。</p><h1 id="关联查询映射"><a href="#关联查询映射" class="headerlink" title="关联查询映射"></a>关联查询映射</h1><h2 id="分析数据模型"><a href="#分析数据模型" class="headerlink" title="分析数据模型"></a>分析数据模型</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li><p>每张表记录的数据内容<br>&emsp;&emsp;分模块对每张表记录的内容进行熟悉，相当于你学习系统需求（功能）的过程。</p></li><li><p>每张表重要的字段<br>&emsp;&emsp;主键、外键、非空字段</p></li><li><p>数据库级别表与表的关系<br>&emsp;&emsp;外键关系</p></li><li><p>表与表之间的业务关系<br>&emsp;&emsp;在分析表与表之间的业务关系时一定要建立 在某个业务意义基础上去分析。<br>&emsp;&emsp;图形分析:<br><img src="/images/mybatis/9.1.png" alt="9.1"></p></li></ol><h3 id="数据库表之间有外键关系的业务关系"><a href="#数据库表之间有外键关系的业务关系" class="headerlink" title="数据库表之间有外键关系的业务关系"></a>数据库表之间有外键关系的业务关系</h3><p>user和orders：<br>&emsp;&emsp;user—-&gt;orders：一个用户可以创建多个订单，一对多<br>&emsp;&emsp;orders—&gt;user：一个订单只由一个用户创建，一对一</p><p>orders和orderdetail：<br>&emsp;&emsp;orders—&gt;orderdetail：一个订单可以包括 多个订单明细，因为一个订单可以购买多个商品，每个商品的购买信息在orderdetail记录，一对多关系<br>&emsp;&emsp;orderdetail–&gt; orders：一个订单明细只能包括在一个订单中，一对一</p><p>orderdetail和itesm：<br>&emsp;&emsp;orderdetail—&gt;itesms：一个订单明细只对应一个商品信息，一对一<br>&emsp;&emsp;items—&gt; orderdetail:一个商品可以包括在多个订单明细 ，一对多</p><h3 id="数据库表之间没有外键关系的业务关系"><a href="#数据库表之间没有外键关系的业务关系" class="headerlink" title="数据库表之间没有外键关系的业务关系"></a>数据库表之间没有外键关系的业务关系</h3><p>Orders和items：//这两张表没有直接的外键关系，通过业务及数据库的间接关系分析出它们是多对多的关系。<br>&emsp;&emsp;Orders—&gt; orderdetai—&gt;items：一个订单可以有多个订单明细，一个订单明细对应一个商品，所以一个订单对应多个商品<br>&emsp;&emsp;Items—&gt;orderdetail—&gt;orders：一个商品可以对应多个订单明细，一个订单明细对应一个订单，所以一个商品对应多个订单</p><p>User和items：//这两张表没有直接的外键关系，通过业务及数据库的间接关系分析出它们是多对多的关系。<br>&emsp;&emsp;User—&gt;orders—&gt;orderdetail—&gt;items：一个用户有多个订单，一个订单有多个订单明细、一个订单明细对应一个商品，所以一个用户对应多个商品<br>&emsp;&emsp;Items—&gt;orderdetail—&gt;orders—&gt;user：一个商品对应多个订单明细，一个订单明细对应一个订单，一个订单对应一个用户，所以一个商品对应多个用户</p><h2 id="一对一查询"><a href="#一对一查询" class="headerlink" title="一对一查询"></a>一对一查询</h2><h3 id="需求-8"><a href="#需求-8" class="headerlink" title="需求"></a>需求</h3><p>&emsp;&emsp;查询订单信息，关联查询创建订单的用户信息</p><h3 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h3><p>&emsp;&emsp;确定查询的主表：订单表<br>&emsp;&emsp;确定查询的关联表：用户表<br>&emsp;&emsp;关联查询使用内链接？还是外链接？</p><pre><code>//Select        Orders.id,        Orders.user_id,        orders.number,        orders.createtime,        orders.note,        user.username,        user.address    from orders,user    where orders.user_id = user.id</code></pre><h3 id="resultType-1"><a href="#resultType-1" class="headerlink" title="resultType"></a>resultType</h3><p>&emsp;&emsp;复杂查询时，单表对应的po类已不能满足输出结果集的映射。所以要根据需求建立一个扩展类来作为resultType的类型。</p><h4 id="创建po类"><a href="#创建po类" class="headerlink" title="创建po类"></a>创建po类</h4><pre><code>//通过此类映射订单和用户查询的结果，让此类继承包括 字段较多的pojo类public class OrdersExt extends Orders{            //添加用户属性    /*USER.username,      USER.address */            private String username;    private String address;    public String getUsername() {        return username;    }    public void setUsername(String username) {        this.username = username;    }    public String getAddress() {        return address;    }    public void setAddress(String address) {        this.address = address;    }        }</code></pre><h4 id="编写mapper接口-1"><a href="#编写mapper接口-1" class="headerlink" title="编写mapper接口"></a>编写mapper接口</h4><p>&emsp;&emsp;创建OrdersMapper接口类，在类中添加以下内容：</p><pre><code>// 进行订单信息查询，包括用户的名称和地址信息    public List&lt;OrdersExt&gt; findOrdersUser();</code></pre><h4 id="编写映射文件-5"><a href="#编写映射文件-5" class="headerlink" title="编写映射文件"></a>编写映射文件</h4><pre><code>//&lt;mapper namespace=&quot;cn.itcast.mybatis.mapper.OrdersMapper&quot;&gt;      &lt;!-- 定义查询订单表列名的SQL片段 --&gt;      &lt;sql id=&quot;select_orders&quot;&gt;     Orders.id,     Orders.user_id,    orders.number,     orders.createtime,     orders.note      &lt;/sql&gt;      &lt;!-- 定义查询用户表列名的SQL片段 --&gt;      &lt;sql id=&quot;select_user&quot;&gt;     user.username,     user.address      &lt;/sql&gt;      &lt;!-- 进行订单信息查询，包括用户的名称和地址信息 --&gt;      &lt;select id=&quot;findOrdersUser&quot; resultType=&quot;OrdersExt&quot;&gt;     Select      &lt;include refid=&quot;select_orders&quot; /&gt;      &lt;include refid=&quot;select_user&quot;&gt;&lt;/include&gt;     from orders,user     where orders.user_id = user.id      &lt;/select&gt;    &lt;/mapper&gt;</code></pre><h4 id="加载映射文件-5"><a href="#加载映射文件-5" class="headerlink" title="加载映射文件"></a>加载映射文件</h4><pre><code>//&lt;!-- 批量加载mapper文件，需要mapper接口文件和mapper映射文件名称相同且在同一个包下 --&gt;&lt;package name=&quot;cn.itcast.mybatis.mapper&quot;/&gt;</code></pre><h4 id="编写测试代码-3"><a href="#编写测试代码-3" class="headerlink" title="编写测试代码"></a>编写测试代码</h4><pre><code>//@Test    public  void testFindOrdersUser() {      // 创建sqlSession     SqlSession sqlSession = sqlSessionFactory.openSession();      // 通过SqlSession构造usermapper的代理对象     OrdersMapper ordersMapper = sqlSession.getMapper(OrdersMapper.class);      // 调用usermapper的方法     List&lt;OrdersExt&gt; list = ordersMapper.findOrdersUser();    System.out.println(list);      // 释放SqlSession     sqlSession.close();    }</code></pre><h3 id="resultMap-1"><a href="#resultMap-1" class="headerlink" title="resultMap"></a>resultMap</h3><h4 id="修改po类"><a href="#修改po类" class="headerlink" title="修改po类"></a>修改po类</h4><p>&emsp;&emsp;在Orders类中，添加User对象</p><pre><code>//public class Orders {private Integer id;private Integer userId;private String number;private Date createtime;private String note;    //用户信息private User user;</code></pre><h4 id="编写mapper接口-2"><a href="#编写mapper接口-2" class="headerlink" title="编写mapper接口"></a>编写mapper接口</h4><pre><code> // 进行订单信息查询，包括用户的名称和地址信息（resultMap）public List&lt;OrdersExt&gt; findOrdersUserRstMap();</code></pre><h4 id="编写映射文件-6"><a href="#编写映射文件-6" class="headerlink" title="编写映射文件"></a>编写映射文件</h4><pre><code>//&lt;!-- 进行订单信息查询，包括用户的名称和地址信息 (ResultMap) --&gt;      &lt;select id=&quot;findOrdersUserRstMap&quot; resultMap=&quot;OrdersUserRstMap&quot;&gt;          Select          &lt;include refid=&quot;select_orders&quot; /&gt;          ,          &lt;include refid=&quot;select_user&quot;&gt;&lt;/include&gt;          from orders,user          where orders.user_id = user.id      &lt;/select&gt;            &lt;!-- 定义orderUserResultMap --&gt;      &lt;resultMap type=&quot; cn.itcast.mybatis.po.Orders&quot; id=&quot;OrdersUserRstMap&quot;&gt;          &lt;id column=&quot;id&quot; property=&quot;id&quot; /&gt;          &lt;result column=&quot;user_id&quot; property=&quot;userId&quot; /&gt;          &lt;result column=&quot;number&quot; property=&quot;number&quot; /&gt;          &lt;result column=&quot;createtime&quot; property=&quot;createtime&quot; /&gt;          &lt;result column=&quot;note&quot; property=&quot;note&quot; /&gt;          &lt;!-- 映射一对一关联关系的用户对象--&gt;          &lt;!--               property：指定关联对象要映射到Orders的哪个属性上               javaType：指定关联对象所要映射的java类型            --&gt;          &lt;!-- id标签：指定关联对象结果集的唯一标识，很重要，不写不会报错，但是会影响性能 --&gt;          &lt;association property=&quot;user&quot; javaType=&quot;cn.itcast.mybatis.po.User&quot;&gt;              &lt;id column=&quot;user_id&quot; property=&quot;id&quot; /&gt;              &lt;result column=&quot;username&quot; property=&quot;username&quot; /&gt;              &lt;result column=&quot;address&quot; property=&quot;address&quot; /&gt;          &lt;/association&gt;      &lt;/resultMap&gt;</code></pre><h4 id="编写测试代码-4"><a href="#编写测试代码-4" class="headerlink" title="编写测试代码"></a>编写测试代码</h4><pre><code>//@Test    public  void testFindOrdersUserRstMap() {      // 创建sqlSession     SqlSession sqlSession = sqlSessionFactory.openSession();      // 通过SqlSession构造usermapper的代理对象     OrdersMapper ordersMapper = sqlSession.getMapper(OrdersMapper.class);      // 调用usermapper的方法     List&lt;Orders&gt; list = ordersMapper.findOrdersUserRstMap();      //此处我们采用debug模式来跟踪代码，然后验证结果集是否正确     System.out.println(list);     // 释放SqlSession     sqlSession.close();    }</code></pre><h3 id="一对一小结"><a href="#一对一小结" class="headerlink" title="一对一小结"></a>一对一小结</h3><p>实现一对一查询：</p><ul><li><p>resultType：使用resultType实现较为简单，如果pojo中没有包括查询出来的列名，需要增加列名对应的属性，即可完成映射。如果没有查询结果的特殊要求建议使用resultType。</p></li><li><p>resultMap：需要单独定义resultMap，实现有点麻烦，如果对查询结果有特殊的要求，使用resultMap可以完成将关联查询映射pojo的对象属性中。resultMap可以实现延迟加载，resultType无法实现延迟加载。</p></li></ul><h2 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h2><p>&emsp;&emsp;一对多查询和一对一查询的配置基本类似。只是如果使用resultMap的话，映射一对多关联关系要使用collection标签。</p><h3 id="需求-9"><a href="#需求-9" class="headerlink" title="需求"></a>需求</h3><p>&emsp;&emsp;查询订单信息及订单明细信息</p><h3 id="SQL语句-1"><a href="#SQL语句-1" class="headerlink" title="SQL语句"></a>SQL语句</h3><p>&emsp;&emsp;确定主查询表：订单表<br>&emsp;&emsp;确定关联查询表：订单明细表<br>&emsp;&emsp;在一对一查询基础上添加订单明细表关联即可。</p><pre><code>//Select    Orders.id,    Orders.user_id,    orders.number,    orders.createtime,    orders.note,    user.username,    user.address,    orderdetail.id detail_id,    orderdetail.items_id,    orderdetail.items_numfrom orders,user,orderdetailwhere orders.user_id = user.id     and orders.id = orderdetail.orders_id</code></pre><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>&emsp;&emsp;使用resultType将上边的 查询结果映射到pojo中，订单信息将会重复。<br><img src="/images/mybatis/7.3.4.png" alt="7.3.4"></p><p>&emsp;要求：<br>&emsp;&emsp;对orders映射不能出现重复记录。</p><ul><li>在orders.java类中添加List<orderdetail> detailList属性。最终会将订单信息映射到orders中，订单所对应的订单明细映射到orders中的detailList属性中。<br><img src="/images/mybatis/7.3.5.png" alt="7.3.5"></orderdetail></li><li>映射成的orders记录数为两条（orders信息不重复）,每个orders中的detailList属性存储了该订单所对应的订单明细集合。</li></ul><h3 id="修改PO类"><a href="#修改PO类" class="headerlink" title="修改PO类"></a>修改PO类</h3><p>&emsp;&emsp;在Orders类中添加以下属性，并提供get/set方法：</p><pre><code>//订单明细private List&lt;Orderdetail&gt; detailList;</code></pre><h3 id="编写mapper接口-3"><a href="#编写mapper接口-3" class="headerlink" title="编写mapper接口"></a>编写mapper接口</h3><pre><code>// 查询订单信息及订单明细信息（一对多映射之使用resultMap）public List&lt;Orders&gt; findOrdersAndOrderdetailRstMap();</code></pre><h3 id="编写映射文件-7"><a href="#编写映射文件-7" class="headerlink" title="编写映射文件"></a>编写映射文件</h3><pre><code>//&lt;!-- 定义OrdersAndOrderdetailRstMap --&gt;&lt;!-- extends：继承已有的ResultMap，值为继承的ResultMap的唯一标示 --&gt;&lt;resultMap type=&quot;Orders&quot; id=&quot;OrdersAndOrderdetailRstMap&quot;    extends=&quot;OrdersUserRstMap&quot;&gt;        &lt;!-- 映射关联关系（一对多） --&gt;        &lt;!-- collection标签：定义一个一对多关系            ofType：指定该集合参数所映射的类型         --&gt;        &lt;collection property=&quot;detailList&quot; ofType=&quot;Orderdetail&quot;&gt;            &lt;id column=&quot;detail_id&quot; property=&quot;id&quot; /&gt;            &lt;result column=&quot;items_id&quot; property=&quot;itemsId&quot; /&gt;            &lt;result column=&quot;items_num&quot; property=&quot;itemsNum&quot; /&gt;        &lt;/collection&gt;    &lt;/resultMap&gt;    &lt;!-- 查询订单信息，包括用户名称、用户地址，订单商品信息（嵌套结果） --&gt;&lt;select id=&quot;findOrdersAndOrderdetailRstMap&quot; resultMap=&quot;OrdersAndOrderdetailRstMap&quot;&gt;            Select        &lt;include refid=&quot;select_orders&quot; /&gt;        ,        &lt;include refid=&quot;select_user&quot;/&gt;        ,        orderdetail.id detail_id,        orderdetail.items_id,        orderdetail.items_num        from orders,user,orderdetail        where orders.user_id = user.id        and        orders.id = orderdetail.orders_id        &lt;/select&gt;</code></pre><p>&emsp;&emsp;resultMap的extends属性：可以用此属性来继承一个已有的resultmap。但是它继承的resultMap的type和它本身的type要保持一致。</p><h3 id="编写测试代码-5"><a href="#编写测试代码-5" class="headerlink" title="编写测试代码"></a>编写测试代码</h3><pre><code>//@Testpublic void testFindOrdersAndOrderdetailRstMap() {    // 创建sqlSession    SqlSession sqlSession = sqlSessionFactory.openSession();        // 通过SqlSession构造usermapper的代理对象    OrdersMapper ordersMapper = sqlSession.getMapper(OrdersMapper.class);    // 调用usermapper的方法    List&lt;Orders&gt; list = ordersMapper.findOrdersAndOrderdetailRstMap();                //此处我们采用debug模式来跟踪代码，然后验证结果集是否正确    System.out.println(list);    // 释放SqlSession    sqlSession.close();}</code></pre><h3 id="一对多小结"><a href="#一对多小结" class="headerlink" title="一对多小结"></a>一对多小结</h3><p>&emsp;&emsp;mybatis使用resultMap的collection对关联查询的多条记录映射到一个list集合属性中。<br>使用resultType实现：</p><ul><li>需要对结果集进行二次处理。</li><li>将订单明细映射到orders中的orderdetails中，需要自己处理，使用双重循环遍历，去掉重复记录，将订单明细放在orderdetails中。</li></ul><h2 id="多对多查询"><a href="#多对多查询" class="headerlink" title="多对多查询"></a>多对多查询</h2><h3 id="需求-10"><a href="#需求-10" class="headerlink" title="需求"></a>需求</h3><p>&emsp;&emsp;查询用户信息及用户购买的商品信息，要求将关联信息映射到主pojo的pojo属性中</p><h3 id="SQL语句-2"><a href="#SQL语句-2" class="headerlink" title="SQL语句"></a>SQL语句</h3><p>&emsp;&emsp;查询主表：user<br>&emsp;&emsp;查询关联表：orders、orderdetail、items</p><pre><code>//Select      Orders.id,      Orders.user_id,      orders.number,    orders.createtime,    orders.note,    user.username,    user.address,    orderdetail.id detail_id,    orderdetail.items_id,    orderdetail.items_num    items.name items_name,    items.detail items_detail    FROM    orders,  USER,    orderdetail,    items   WHERE user.`id` = orders.`user_id`     AND orders.`id` = orderdetail.`orders_id`     AND orderdetail.`items_id` = items.`id`</code></pre><h3 id="映射思路"><a href="#映射思路" class="headerlink" title="映射思路"></a>映射思路</h3><ul><li>将用户信息映射到user中。</li><li>在user类中添加订单列表属性List<orders> orderslist，将用户创建的订单映射到orderslist</orders></li><li>在Orders中添加订单明细列表属性List<orderdetail> detailList，将订单的明细映射到detailList</orderdetail></li><li>在Orderdetail中添加Items属性，将订单明细所对应的商品映射到Items</li></ul><h3 id="修改PO类-1"><a href="#修改PO类-1" class="headerlink" title="修改PO类"></a>修改PO类</h3><p>&emsp;&emsp;在user类中添加List<orders> ordersList 属性</orders></p><pre><code>// 订单信息private List&lt;Orders&gt; ordersList;</code></pre><p>&emsp;&emsp;在Orders类中添加List<orderdetail>属性</orderdetail></p><pre><code>//订单明细private List&lt;Orderdetail&gt; detailList;</code></pre><p>&emsp;&emsp;在Orderdetail类中添加Items属性</p><pre><code>//商品信息private Items items;</code></pre><h3 id="编写mapper接口-4"><a href="#编写mapper接口-4" class="headerlink" title="编写mapper接口"></a>编写mapper接口</h3><pre><code>//查询用户及用户购买商品信息（多对多映射之使用resultMap）public List&lt;User&gt; findUserAndItemsRstMap();</code></pre><h3 id="编写映射文件-8"><a href="#编写映射文件-8" class="headerlink" title="编写映射文件"></a>编写映射文件</h3><pre><code>//&lt;!-- 定义UserAndItemsRstMap --&gt;    &lt;resultMap type=&quot;User&quot; id=&quot;UserAndItemsRstMap&quot;&gt;        &lt;!-- 用户信息 --&gt;        &lt;!-- id：关联查询用户的唯一标示 --&gt;        &lt;id column=&quot;user_id&quot; property=&quot;id&quot; /&gt;        &lt;result column=&quot;username&quot; property=&quot;username&quot; /&gt;        &lt;result column=&quot;address&quot; property=&quot;address&quot; /&gt;        &lt;!-- 订单信息 （一个用户有多个订单） --&gt;        &lt;collection property=&quot;ordersList&quot; ofType=&quot;orders&quot;&gt;            &lt;id column=&quot;id&quot; property=&quot;id&quot; /&gt;            &lt;result column=&quot;user_id&quot; property=&quot;userId&quot; /&gt;            &lt;result column=&quot;number&quot; property=&quot;number&quot; /&gt;            &lt;result column=&quot;createtime&quot; property=&quot;createtime&quot; /&gt;            &lt;result column=&quot;note&quot; property=&quot;note&quot; /&gt;            &lt;!-- 订单明细信息（一个订单有多个订单明细） --&gt;            &lt;collection property=&quot;detailList&quot; ofType=&quot;orderdetail&quot;&gt;                &lt;id column=&quot;detail_id&quot; property=&quot;id&quot; /&gt;                &lt;result column=&quot;items_id&quot; property=&quot;itemsId&quot; /&gt;                &lt;result column=&quot;items_num&quot; property=&quot;itemsNum&quot; /&gt;                &lt;!-- 商品信息 （一个订单明细对应一个商品） --&gt;                &lt;association property=&quot;items&quot; javaType=&quot;cn.itcast.mybatis.po.Items&quot;&gt;                    &lt;id column=&quot;items_id&quot; property=&quot;id&quot; /&gt;                    &lt;result column=&quot;items_name&quot; property=&quot;name&quot; /&gt;                    &lt;result column=&quot;items_detail&quot; property=&quot;detail&quot; /&gt;                &lt;/association&gt;            &lt;/collection&gt;        &lt;/collection&gt;    &lt;/resultMap&gt;        &lt;!-- 查询用户及用户购买商品信息（多对多映射之使用resultMap） --&gt;    &lt;select id=&quot;findUserAndItemsRstMap&quot; resultMap=&quot;UserAndItemsRstMap&quot;&gt;        Select        &lt;include refid=&quot;select_orders&quot; /&gt;        ,        &lt;include refid=&quot;select_user&quot; /&gt;        ,        &lt;include refid=&quot;select_orderdetail&quot;&gt;&lt;/include&gt;        ,        items.name items_name,        items.detail items_detail        from        orders,user,orderdetail,items        where orders.user_id = user.id        and        orders.id = orderdetail.orders_id        and orderdetail.items_id = items.id    &lt;/select&gt;</code></pre><h3 id="编写测试代码-6"><a href="#编写测试代码-6" class="headerlink" title="编写测试代码"></a>编写测试代码</h3><pre><code>//@Test    public void testFindUserAndItemsRstMap() {        // 创建sqlSession        SqlSession sqlSession = sqlSessionFactory.openSession();            // 通过SqlSession构造usermapper的代理对象        OrdersMapper ordersMapper = sqlSession.getMapper(OrdersMapper.class);        // 调用usermapper的方法        List&lt;User&gt; list = ordersMapper.findUserAndItemsRstMap();            // 此处我们采用debug模式来跟踪代码，然后验证结果集是否正确        System.out.println(list);        // 释放SqlSession        sqlSession.close();    }</code></pre><h3 id="多对多查询小结"><a href="#多对多查询小结" class="headerlink" title="多对多查询小结"></a>多对多查询小结</h3><p>&emsp;&emsp;将查询用户购买的商品信息明细清单，（用户名、用户地址、购买商品名称、购买商品时间、购买商品数量）<br>&emsp;&emsp;针对上边的需求就使用resultType将查询到的记录映射到一个扩展的pojo中，很简单实现明细清单的功能。</p><p>&emsp;&emsp;一对多是多对多的特例，如下需求：//查询用户购买的商品信息，用户和商品的关系是多对多关系。</p><ul><li><p>需求1：<br>&emsp;&emsp;&emsp;&emsp;查询字段：用户账号、用户名称、用户性别、商品名称、商品价格(最常见)<br>&emsp;&emsp;&emsp;&emsp;企业开发中常见明细列表，用户购买商品明细列表，使用resultType将上边查询列映射到pojo输出。</p></li><li><p>需求2：<br>&emsp;&emsp;&emsp;&emsp;查询字段：用户账号、用户名称、购买商品数量、商品明细（鼠标移上显示明细）<br>&emsp;&emsp;&emsp;&emsp;使用resultMap将用户购买的商品明细列表映射到user对象中。</p></li></ul><p><strong>总结：</strong><br>&emsp;&emsp;使用resultMap是针对那些对查询结果映射有特殊要求的功能，，比如特殊要求映射成list中包括 多个list。</p><h2 id="高级映射总结"><a href="#高级映射总结" class="headerlink" title="高级映射总结"></a>高级映射总结</h2><ul><li><p>resultType：<br>&emsp;&emsp;作用：<br>&emsp;&emsp;&emsp;&emsp;将查询结果按照sql列名pojo属性名一致性映射到pojo中。<br>&emsp;&emsp;场合：<br>&emsp;&emsp;&emsp;&emsp;常见一些明细记录的展示，比如用户购买商品明细，将关联查询信息全部展示在页面时，此时可直接使用resultType将每一条记录映射到pojo中，在前端页面遍历list（list中是pojo）即可。</p></li><li><p>resultMap：<br>&emsp;&emsp;使用association和collection完成一对一和一对多高级映射（对结果有特殊的映射要求）。</p></li><li><ul><li>association：<br>&emsp;&emsp;作用：<br>&emsp;&emsp;&emsp;&emsp;  将关联查询信息映射到一个pojo对象中。<br>&emsp;&emsp;场合：<br>&emsp;&emsp;&emsp;&emsp;为了方便查询关联信息可以使用association将关联订单信息映射为用户对象的pojo属性中，比如：查询订单及关联用户信息。</li></ul></li></ul><p>//  &emsp;&emsp;使用resultType无法将查询结果映射到pojo对象的pojo属性中，根据对结果集查询遍历的需要选择使用resultType还是resultMap。</p><ul><li><ul><li>collection：<br>&emsp;&emsp;作用：<br>&emsp;&emsp;&emsp;&emsp; 将关联查询信息映射到一个list集合中。<br>&emsp;&emsp;场合：<br>&emsp;&emsp;&emsp;&emsp;为了方便查询遍历关联信息可以使用collection将关联信息映射到list集合中，比如：查询用户权限范围模块及模块下的菜单，可使用collection将模块映射到模块list中，将菜单列表映射到模块对象的菜单list属性中，这样的作的目的也是方便对查询结果集进行遍历查询。</li></ul></li></ul><p>//&emsp;&emsp;  如果使用resultType无法将查询结果映射到list集合中。</p><h1 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h1><h2 id="什么是延迟加载"><a href="#什么是延迟加载" class="headerlink" title="什么是延迟加载"></a>什么是延迟加载</h2><p>&emsp;&emsp;resultMap中的association和collection标签具有延迟加载的功能。<br>&emsp;&emsp;延迟加载的意思是说，在关联查询时，利用延迟加载，先加载主信息。需要关联信息时再去按需加载关联信息。这样会大大提高数据库性能，因为查询单表要比关联查询多张表速度要快。</p><h2 id="设置延迟加载"><a href="#设置延迟加载" class="headerlink" title="设置延迟加载"></a>设置延迟加载</h2><p>&emsp;&emsp;Mybatis默认是不开启延迟加载功能的，我们需要手动开启。<br>&emsp;&emsp;需要在SqlMapConfig.xml文件中，在<settings>标签中开启延迟加载功能。</settings></p><table><thead><tr><th style="text-align:center">设置项</th><th style="text-align:left">描述</th><th style="text-align:center">允许值</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td style="text-align:center">lazyLoadingEnabled</td><td style="text-align:left">全局性设置懒加载。如果设为‘false’，则所有相关联的都会被初始化加载。</td><td style="text-align:center">true or false</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">aggressiveLazyLoading</td><td style="text-align:left">当设置为‘true’的时候，懒加载的对象可能被任何懒属性全部加载。否则，每个属性都按需加载。</td><td style="text-align:center">true or false</td><td style="text-align:center">true</td></tr></tbody></table><p><img src="/images/mybatis/10.1.png" alt="10.1"></p><h2 id="使用association进行延迟加载"><a href="#使用association进行延迟加载" class="headerlink" title="使用association进行延迟加载"></a>使用association进行延迟加载</h2><h3 id="需求-11"><a href="#需求-11" class="headerlink" title="需求"></a>需求</h3><p>&emsp;&emsp;查询订单并且关联查询用户信息（对用户信息的加载要求是按需加载）</p><h3 id="编写映射文件-9"><a href="#编写映射文件-9" class="headerlink" title="编写映射文件"></a>编写映射文件</h3><p>&emsp;&emsp;需要定义两个mapper的方法对应的statement。</p><ol><li>只查询订单信息</li></ol><p><code>SELECT * FROM orders</code></p><p>&emsp;&emsp;在查询订单的statement中使用association去延迟加载（执行）下边的satatement(关联查询用户信息)</p><pre><code>//&lt;!-- 定义OrdersUserLazyLoadingRstMap --&gt;    &lt;resultMap type=&quot;cn.itcast.mybatis.po.Orders&quot; id=&quot;OrdersUserLazyLoadingRstMap&quot;&gt;                &lt;id column=&quot;id&quot; property=&quot;id&quot; /&gt;          &lt;result column=&quot;user_id&quot; property=&quot;userId&quot; /&gt;          &lt;result column=&quot;number&quot; property=&quot;number&quot; /&gt;          &lt;result column=&quot;createtime&quot; property=&quot;createtime&quot; /&gt;          &lt;result column=&quot;note&quot; property=&quot;note&quot; /&gt;                      &lt;!-- 延迟加载用户信息 --&gt;          &lt;!-- select：指定延迟加载需要执行的statement的id（是根据user_id查询用户信息的statement）          我们使用UserMapper.xml中的findUserById完成根据用户ID（user_id）查询用户信息          如果findUserById不在本mapper中，前边需要加namespace          --&gt;          &lt;!-- column：主信息表中需要关联查询的列，此处是user_id --&gt;          &lt;association property=&quot;user&quot; select=&quot;cn.itcast.mybatis.mapper.UserMapper.findUserById&quot; column=&quot;user_id&quot;&gt;&lt;/association&gt;      &lt;/resultMap&gt;          &lt;!-- 查询订单信息，延迟加载关联查询的用户信息 --&gt;      &lt;select id=&quot;findOrdersUserLazyLoading&quot; resultMap=&quot;OrdersUserLazyLoadingRstMap&quot;&gt;          SELECT * FROM orders      &lt;/select&gt;</code></pre><ol start="2"><li><p>关联查询用户信息</p><p>&emsp;&emsp;通过上边查询到的订单信息中user_id去关联查询用户信息,使用UserMapper.xml中的findUserById</p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;select id="findUserById" parameterType="int" resultType="cn.itcast.mybatis.po.User"&gt;</span></span><br><span class="line">SELECT * FROM user WHERE id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;&emsp;&emsp;上边先去执行findOrdersUserLazyLoading，当需要去查询用户的时候再去执行findUserById，通过resultMap的定义将延迟加载执行配置起来。</p><h3 id="加载映射文件-6"><a href="#加载映射文件-6" class="headerlink" title="加载映射文件"></a>加载映射文件</h3><pre><code>//&lt;!-- 批量加载mapper文件，需要mapper接口文件和mapper映射文件名称相同且在同一个包下 --&gt;   &lt;package name=_&quot;cn.itcast.mybatis.mapper&quot;_/&gt;</code></pre><h3 id="编写mapper接口-5"><a href="#编写mapper接口-5" class="headerlink" title="编写mapper接口"></a>编写mapper接口</h3><pre><code>// 查询订单信息，延迟加载关联查询的用户信息    public List&lt;Orders&gt; findOrdersUserLazyLoading();</code></pre><h3 id="编写测试代码-7"><a href="#编写测试代码-7" class="headerlink" title="编写测试代码"></a>编写测试代码</h3><p><strong>思路：</strong></p><ol><li>执行上边mapper方法（findOrdersUserLazyLoading），内部去调用cn.itcast.mybatis.mapper.OrdersMapper中的findOrdersUserLazyLoading只查询orders信息（单表）。</li><li>在程序中去遍历上一步骤查询出的List<orders>，当我们调用Orders中的getUser方法时，开始进行延迟加载。</orders></li><li>执行延迟加载，去调用UserMapper.xml中findUserbyId这个方法获取用户信息。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOrdersUserLazyLoading</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建sqlSession</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();    </span><br><span class="line"><span class="comment">// 通过SqlSession构造usermapper的代理对象</span></span><br><span class="line">OrdersMapper ordersMapper = sqlSession.getMapper(OrdersMapper.class);</span><br><span class="line"><span class="comment">// 调用usermapper的方法</span></span><br><span class="line">List&lt;Orders&gt; list = ordersMapper.findOrdersUserLazyLoading();    </span><br><span class="line"><span class="keyword">for</span>(Orders orders : list)&#123;</span><br><span class="line">System.out.println(orders.getUser());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放SqlSession</span></span><br><span class="line">sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="延迟加载思考"><a href="#延迟加载思考" class="headerlink" title="延迟加载思考"></a>延迟加载思考</h2><p>&emsp;&emsp;不使用mybatis提供的association及collection中的延迟加载功能，如何实现延迟加载？？</p><p>&emsp;&emsp;实现方法如下：<br>&emsp;&emsp;//定义两个mapper方法：</p><ol><li>查询订单列表</li><li>根据用户id查询用户信息</li></ol><p><strong>实现思路：</strong></p><p>先去查询第一个mapper方法，获取订单信息列表<br>在程序中（service），按需去调用第二个mapper方法去查询用户信息。</p><p><strong>总之：</strong><br>&emsp;&emsp;使用延迟加载方法，先去查询简单的sql（最好单表，也可以关联查询），再去按需要加载关联查询的其它信息。</p><h1 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h1><h2 id="mybatis缓存分析"><a href="#mybatis缓存分析" class="headerlink" title="mybatis缓存分析"></a>mybatis缓存分析</h2><p>&emsp;&emsp;mybatis提供查询缓存，如果缓存中有数据就不用从数据库中获取，用于减轻数据压力，提高系统性能。<br><img src="/images/mybatis/11.1.png" alt="11.1"><br>&emsp;&emsp;一级缓存是SqlSession级别的缓存。在操作数据库时需要构造 sqlSession对象，在对象中有一个数据结构（HashMap）用于存储缓存数据。不同的sqlSession之间的缓存数据区域（HashMap）是互相不影响的。<br>&emsp;&emsp;二级缓存是mapper级别的缓存，多个SqlSession去操作同一个Mapper的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。</p><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><img src="/images/mybatis/11.2.png" alt="11.2"></p><p>&emsp;&emsp;第一次发起查询用户id为1的用户信息，先去找缓存中是否有id为1的用户信息，如果没有，从数据库查询用户信息。<br>&emsp;&emsp;得到用户信息，将用户信息存储到一级缓存中。<br>&emsp;&emsp;如果sqlSession去执行commit操作（执行插入、更新、删除），清空SqlSession中的一级缓存，这样做的目的为了让缓存中存储的是最新的信息，避免脏读。<br>&emsp;&emsp;第二次发起查询用户id为1的用户信息，先去找缓存中是否有id为1的用户信息，缓存中有，直接从缓存中获取用户信息。</p><p><strong>注：Mybatis默认支持一级缓存。</strong></p><h3 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h3><pre><code>//@Test    public void testOneLevelCache() {        SqlSession sqlSession = sqlSessionFactory.openSession();        UserMapper mapper = sqlSession.getMapper(UserMapper.class);        // 第一次查询ID为1的用户，去缓存找，找不到就去查找数据库        User user1 = mapper.findUserById(1);        System.out.println(user1);                    // 第二次查询ID为1的用户        User user2 = mapper.findUserById(1);        System.out.println(user2);            sqlSession.close();    }</code></pre><p>&emsp;&emsp;只输出一次SQL：<br><img src="/images/mybatis/11.3.png" alt="11.3"></p><h3 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h3><pre><code>//@Test    public void testOneLevelCache() {        SqlSession sqlSession = sqlSessionFactory.openSession();        UserMapper mapper = sqlSession.getMapper(UserMapper.class);        // 第一次查询ID为1的用户，去缓存找，找不到就去查找数据库        User user1 = mapper.findUserById(1);        System.out.println(user1);                    User user = new User();        user.setUsername(&quot;东哥1&quot;);        user.setAddress(&quot;清河宝盛西里&quot;);        //执行增删改操作，清空缓存        mapper.insertUser(user);                    // 第二次查询ID为1的用户        User user2 = mapper.findUserById(1);        System.out.println(user2);            sqlSession.close();    }</code></pre><p>&emsp;&emsp;中间执行了commit操作，同样的查询SQL输出两次：<br><img src="/images/mybatis/11.4.png" alt="11.4"></p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>&emsp;&emsp;正式开发，是将mybatis和spring进行整合开发，事务控制在service中。<br>&emsp;&emsp;一个service方法中包括 很多mapper方法调用。</p><pre><code>//service{     //开始执行时，开启事务，创建SqlSession对象     //第一次调用mapper的方法findUserById(1)    //第二次调用mapper的方法findUserById(1)，从一级缓存中取数据     //方法结束，sqlSession关闭    }</code></pre><p>&emsp;&emsp;如果是执行两次service调用查询相同 的用户信息，不走一级缓存，因为session方法结束，sqlSession就关闭，一级缓存就清空。</p><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>&emsp;&emsp;下图是多个sqlSession请求UserMapper的二级缓存图解。<br><img src="/images/mybatis/11.5.png" alt="11.5"></p><p>&emsp;&emsp;二级缓存是mapper级别的。<br>&emsp;&emsp;第一次调用mapper下的SQL去查询用户信息。查询到的信息会存到该mapper对应的二级缓存区域内。<br>&emsp;&emsp;第二次调用相同namespace下的mapper映射文件中相同的SQL去查询用户信息。会去对应的二级缓存内取结果。<br>&emsp;&emsp;如果调用相同namespace下的mapper映射文件中的增删改SQL，并执行了commit操作。此时会清空该namespace下的二级缓存。</p><h3 id="开启二级缓存"><a href="#开启二级缓存" class="headerlink" title="开启二级缓存"></a>开启二级缓存</h3><p><strong>注：Mybatis默认是没有开启二级缓存</strong></p><ol><li>在核心配置文件SqlMapConfig.xml中加入以下内容（开启二级缓存总开关）：</li></ol><p>在settings标签中添加以下内容：</p><pre><code>&lt;!-- 开启二级缓存总开关 --&gt;    &lt;setting name=_&quot;cacheEnabled&quot;_ value=_&quot;true&quot;_/&gt;</code></pre><ol start="2"><li><p>在UserMapper映射文件中，加入以下内容，开启二级缓存：</p> <!-- 开启本mapper下的namespace的二级缓存，默认使用的是mybatis提供的PerpetualCache --> <cache></cache></li></ol><h3 id="实现序列化"><a href="#实现序列化" class="headerlink" title="实现序列化"></a>实现序列化</h3><p>&emsp;&emsp;由于二级缓存的数据不一定都是存储到内存中，它的存储介质多种多样，所以需要给缓存的对象执行序列化。<br>&emsp;&emsp;如果该类存在父类，那么父类也要实现序列化。<br><img src="/images/mybatis/11.6.png" alt="11.6"></p><h3 id="测试1-1"><a href="#测试1-1" class="headerlink" title="测试1"></a>测试1</h3><pre><code>//@Test    public void testTwoLevelCache() {        SqlSession sqlSession1 = sqlSessionFactory.openSession();        SqlSession sqlSession2 = sqlSessionFactory.openSession();        SqlSession sqlSession3 = sqlSessionFactory.openSession();            UserMapper mapper1 = sqlSession1.getMapper(UserMapper.class);        UserMapper mapper2 = sqlSession2.getMapper(UserMapper.class);        UserMapper mapper3 = sqlSession3.getMapper(UserMapper.class);        // 第一次查询ID为1的用户，去缓存找，找不到就去查找数据库        User user1 = mapper1.findUserById(1);        System.out.println(user1);        // 关闭SqlSession1        sqlSession1.close();            // 第二次查询ID为1的用户        User user2 = mapper2.findUserById(1);        System.out.println(user2);        // 关闭SqlSession2        sqlSession2.close();    }</code></pre><p>&emsp;SQL输出结果：<br><img src="/images/mybatis/11.7.png" alt="11.7"></p><p>&emsp;Cache Hit Radio  ： 缓存命中率 </p><ul><li>第一次缓存中没有记录，则命中率0.0；</li><li>第二次缓存中有记录，则命中率0.5（访问两次，有一次命中）</li></ul><h3 id="测试2-1"><a href="#测试2-1" class="headerlink" title="测试2"></a>测试2</h3><pre><code>//@Test    public void testTwoLevelCache() {        SqlSession sqlSession1 = sqlSessionFactory.openSession();        SqlSession sqlSession2 = sqlSessionFactory.openSession();        SqlSession sqlSession3 = sqlSessionFactory.openSession();          UserMapper mapper1 = sqlSession1.getMapper(UserMapper.class);        UserMapper mapper2 = sqlSession2.getMapper(UserMapper.class);        UserMapper mapper3 = sqlSession3.getMapper(UserMapper.class);        // 第一次查询ID为1的用户，去缓存找，找不到就去查找数据库        User user1 = mapper1.findUserById(1);        System.out.println(user1);        // 关闭SqlSession1        sqlSession1.close();            //修改查询出来的user1对象，作为插入语句的参数        user1.setUsername(&quot;东哥1&quot;);        user1.setAddress(&quot;清河宝盛西里&quot;);            mapper3.insertUser(user1);          // 提交事务        sqlSession3.commit();        // 关闭SqlSession3        sqlSession3.close();            // 第二次查询ID为1的用户        User user2 = mapper2.findUserById(1);        System.out.println(user2);        // 关闭SqlSession2        sqlSession2.close();    }        </code></pre><p>&emsp;SQL输出结果：<br>&emsp;&emsp;根据SQL分析，确实是清空了二级缓存了。<br><img src="/images/mybatis/11.8.png" alt="11.8"></p><h3 id="禁用二级缓存"><a href="#禁用二级缓存" class="headerlink" title="禁用二级缓存"></a>禁用二级缓存</h3><p>&emsp;&emsp;该statement中设置userCache=false，可以禁用当前select语句的二级缓存，即每次查询都是去数据库中查询，默认情况下是true，即该statement使用二级缓存。</p><pre><code>//&lt;select id=&quot;findUserById&quot; parameterType=&quot;int&quot;        resultType=&quot;cn.itcast.mybatis.po.User&quot; useCache=&quot;true&quot;&gt;    SELECT * FROM user WHERE id = #{id}&lt;/select&gt;</code></pre><h3 id="刷新二级缓存"><a href="#刷新二级缓存" class="headerlink" title="刷新二级缓存"></a>刷新二级缓存</h3><p>&emsp;&emsp;该statement中设置flushCache=true可以刷新当前的二级缓存，默认情况下如果是select语句，那么flushCache是false。如果是insert、update、delete语句，那么flushCache是true。</p><ul><li>如果查询语句设置成true，那么每次查询都是去数据库查询，即意味着该查询的二级缓存失效。</li><li>如果查询语句设置成false，即使用二级缓存，那么如果在数据库中修改了数据，而缓存数据还是原来的，这个时候就会出现脏读。<br>&emsp;flushCache设置如下：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;select id="findUserById" parameterType="int"</span></span><br><span class="line">resultType=<span class="string">"cn.itcast.mybatis.po.User"</span> useCache=<span class="string">"true"</span> flushCache=<span class="string">"true"</span>&gt;</span><br><span class="line">SELECT * FROM user WHERE id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="整合ehcache（了解）"><a href="#整合ehcache（了解）" class="headerlink" title="整合ehcache（了解）"></a>整合ehcache（了解）</h3><p>&emsp;&emsp;Ehcache是一个分布式缓存。</p><h4 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h4><p>&emsp;&emsp;系统为了提高性能，通常会对系统采用分布式部署（集群部署方式）<br><img src="/images/mybatis/11.9.png" alt="11.9"></p><p>&emsp;&emsp;不使用分布式缓存，缓存的数据在各个服务单独存储，不方便开发。所以要使用分布式缓存对缓存数据进行集中式管理。<br>&emsp;&emsp;Mybatis自身无法实现分布式缓存，需要和其它分布式缓存框架进行整合。</p><h4 id="整合思路（重点）"><a href="#整合思路（重点）" class="headerlink" title="整合思路（重点）"></a>整合思路（重点）</h4><p>Mybatis提供了一个cache接口，同时它自己有一个默认的实现类PerpetualCache。</p><p>通过实现cache接口可以实现mybatis缓存数据通过其他缓存数据库整合，mybatis的特长是sql，缓存数据管理不是mybatis的特长，为了提高mybatis的性能，所以需要mybatis和第三方缓存数据库整合，比如ehcache、memcache、redis等</p><p>&emsp;Mybatis提供接口如下：<br><img src="/images/mybatis/11.10.png" alt="11.10"></p><p>&emsp;&emsp;Mybatis的默认实现类：<br><img src="/images/mybatis/11.11.png" alt="11.11"></p><h4 id="整合ehcache的步骤"><a href="#整合ehcache的步骤" class="headerlink" title="整合ehcache的步骤"></a>整合ehcache的步骤</h4><ol><li>引入ehcache的jar包；</li><li>在mapper映射文件中，配置cache标签的type为ehcache对cache接口的实现类类型。</li><li>加入ehcache的配置文件</li></ol><h4 id="第一步：引入ehcache的jar包"><a href="#第一步：引入ehcache的jar包" class="headerlink" title="第一步：引入ehcache的jar包"></a>第一步：引入ehcache的jar包</h4><ul><li>ehcache-core-2.6.5.jar</li><li>mybatis-ehcache-1.0.2.jar</li></ul><h4 id="第二步：配置cache的type属性"><a href="#第二步：配置cache的type属性" class="headerlink" title="第二步：配置cache的type属性"></a>第二步：配置cache的type属性</h4><pre><code>&lt;!-- 使用默认二级缓存 --&gt;&lt;cache type=_&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;_ /&gt;</code></pre><h4 id="第三步：添加ehcache的配置文件"><a href="#第三步：添加ehcache的配置文件" class="headerlink" title="第三步：添加ehcache的配置文件"></a>第三步：添加ehcache的配置文件</h4><p>&emsp;&emsp;在classpath下添加ehcache.xml</p><pre><code>//&lt;ehcache xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xsi:noNamespaceSchemaLocation=&quot;../config/ehcache.xsd&quot;&gt;    &lt;!-- 缓存数据要存放的磁盘地址 --&gt;    &lt;diskStore path=&quot;F:\develop\ehcache&quot; /&gt;    &lt;!-- diskStore：指定数据在磁盘中的存储位置。  defaultCache：当借助CacheManager.add(&quot;demoCache&quot;)创建Cache时，EhCache便会采用&lt;defalutCache/&gt;指定的的管理策略     以下属性是必须的：          maxElementsInMemory - 在内存中缓存的element的最大数目         maxElementsOnDisk - 在磁盘上缓存的element的最大数目，若是0表示无穷大  eternal - 设定缓存的elements是否永远不过期。如果为true，则缓存的数据始终有效，如果为false那么还要根据timeToIdleSeconds，timeToLiveSeconds判断          overflowToDisk - 设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上     以下属性是可选的：          timeToIdleSeconds - 当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时，这些数据便会删除，默认值是0,也就是可闲置时间无穷大         timeToLiveSeconds - 缓存element的有效生命期，默认是0.,也就是element存活时间无穷大         diskSpoolBufferSizeMB-这个参数设置DiskStore(磁盘缓存)的缓存区大小.默认是30MB.每个Cache都应该有自己的一个缓冲区.          diskPersistent - 在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false。         diskExpiryThreadIntervalSeconds - 磁盘缓存的清理线程运行间隔，默认是120秒。每个120s，相应的线程会进行一次EhCache中数据的清理工作         memoryStoreEvictionPolicy - 当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出） --&gt;        &lt;defaultCache maxElementsInMemory=&quot;1000&quot;        maxElementsOnDisk=&quot;10000000&quot; eternal=&quot;false&quot; overflowToDisk=&quot;false&quot;        timeToIdleSeconds=&quot;120&quot; timeToLiveSeconds=&quot;120&quot;        diskExpiryThreadIntervalSeconds=&quot;120&quot; memoryStoreEvictionPolicy=&quot;LRU&quot;&gt;    &lt;/defaultCache&gt;&lt;/ehcache&gt;</code></pre><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>&emsp;使用场景：<strong>对于访问响应速度要求高，但是实时性不高的查询，可以采用二级缓存技术</strong>。</p><p><strong>注意：在使用二级缓存的时候，要设置一下刷新间隔（cache标签中有一个flashInterval属性）来定时刷新二级缓存，这个刷新间隔根据具体需求来设置，比如设置30分钟、60分钟等，单位为毫秒。</strong></p><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><ul><li>Mybatis二级缓存对细粒度的数据级别的缓存实现不好。<br>&emsp;场景：对商品信息进行缓存，由于商品信息查询访问量大，但是要求用户每次查询都是最新的商品信息，此时如果使用二级缓存，就无法实现当一个商品发生变化只刷新该商品的缓存信息而不刷新其他商品缓存信息，因为二级缓存是mapper级别的，当一个商品的信息发送更新，所有的商品信息缓存数据都会清空。<br>&emsp;&emsp;解决此类问题，需要在业务层根据需要对数据有针对性的缓存。比如可以对经常变化的数据操作单独放到另一个namespace的mapper中。</li></ul><h1 id="mybatis与spring集成"><a href="#mybatis与spring集成" class="headerlink" title="mybatis与spring集成"></a>mybatis与spring集成</h1><h2 id="集成思路"><a href="#集成思路" class="headerlink" title="集成思路"></a>集成思路</h2><ul><li>需要spring来管理数据源信息。</li><li>需要spring通过单例方式管理SqlSessionFactory。</li><li>使用SqlSessionFactory创建SqlSession。（spring和mybatis整合自动完成）</li><li>持久层的mapper都需要由spring进行管理，spring和mybatis整合生成mapper代理对象。</li></ul><h2 id="集成步骤"><a href="#集成步骤" class="headerlink" title="集成步骤"></a>集成步骤</h2><ol><li>jar包集成；</li><li>配置文件集成（数据源）；</li><li>SqlSessionFactory集成；</li><li>Mapper接口集成；</li></ol><h2 id="开始集成"><a href="#开始集成" class="headerlink" title="开始集成"></a>开始集成</h2><h3 id="搭建工程结构"><a href="#搭建工程结构" class="headerlink" title="搭建工程结构"></a>搭建工程结构</h3><p><img src="/images/mybatis/12.1.png" alt="12.1"></p><h3 id="包集成"><a href="#包集成" class="headerlink" title="包集成"></a>包集成</h3><p>&emsp;&emsp;Jar包如下：</p><ul><li><p>Mybatis3.2.7 的jar包（mybatis核心包、依赖包）<br><img src="/images/mybatis/12.2.png" alt="12.2"></p></li><li><p>Spring3.2.0 的jar包<br><img src="/images/mybatis/12.3.png" alt="12.3"></p></li><li><p>Spring与mybatis的集成包:mybatis-spring-1.2.2.jar</p></li><li><p>数据库驱动包:mysql-connector-java-5.1.7-bin.jar</p></li><li><p>Junit包:junit-4.9.jar</p><ul><li>Dbcp连接池包<br><img src="/images/mybatis/12.4.png" alt="12.4"></li></ul></li></ul><h3 id="配置文件集成"><a href="#配置文件集成" class="headerlink" title="配置文件集成"></a>配置文件集成</h3><ul><li>注意：Mybatis的配置文件中的数据源配置去掉，由spring进行管理配置。</li></ul><h4 id="Mybatis的SqlMapConfig-xml"><a href="#Mybatis的SqlMapConfig-xml" class="headerlink" title="Mybatis的SqlMapConfig.xml"></a>Mybatis的SqlMapConfig.xml</h4><pre><code>//&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configurationPUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;           &lt;!-- 设置全局参数 --&gt;    &lt;settings&gt;        &lt;!-- lazyLoadingEnabled：延迟加载的开关，默认是false --&gt;        &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;        &lt;!-- aggressiveLazyLoading：默认为true，一旦为true上面的懒加载开关失效 --&gt;        &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;                    &lt;!-- cacheEnabled：二级缓存的总开关 默认是false--&gt;        &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;    &lt;/settings&gt;            &lt;!-- 定义别名 --&gt;    &lt;typeAliases&gt;        &lt;!-- 批量定义别名 --&gt;        &lt;!-- name：指定需要别名定义的包的名称 它的别名就是类名（类名的首字母大小写都可）--&gt;        &lt;package name=&quot;cn.itcast.ssm.po&quot;&gt;&lt;/package&gt;    &lt;/typeAliases&gt;       &lt;!-- 注意：与spring集成后，数据源和事务交给spring来管理 --&gt;            &lt;!-- 加载mapper文件 --&gt;    &lt;mappers&gt;        &lt;mapper resource=&quot;mybatis/sqlmap/User.xml&quot;&gt;&lt;/mapper&gt;        &lt;!-- 批量加载mapper            注意：mapper接口文件和mapper映射文件，名称相同，在同一个包下         --&gt;        &lt;package name=&quot;cn.itcast.mybatis.mapper&quot;/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><h4 id="Spring的applicationContext-xml"><a href="#Spring的applicationContext-xml" class="headerlink" title="Spring的applicationContext.xml"></a>Spring的applicationContext.xml</h4><pre><code>//&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans-3.2.xsd         http://www.springframework.org/schema/mvc         http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd         http://www.springframework.org/schema/context         http://www.springframework.org/schema/context/spring-context-3.2.xsd         http://www.springframework.org/schema/aop         http://www.springframework.org/schema/aop/spring-aop-3.2.xsd         http://www.springframework.org/schema/tx         http://www.springframework.org/schema/tx/spring-tx-3.2.xsd &quot;&gt;&lt;!-- 引用java配置文件 --&gt;&lt;context:property-placeholder location=&quot;db.properties&quot;/&gt;            &lt;!-- 配置数据源，使用dbcp连接池 --&gt;&lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot;&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;${db.driver}&quot; /&gt;        &lt;property name=&quot;url&quot; value=&quot;${db.url}&quot; /&gt;        &lt;property name=&quot;username&quot; value=&quot;${db.username}&quot; /&gt;        &lt;property name=&quot;password&quot; value=&quot;${db.password}&quot; /&gt;        &lt;property name=&quot;maxActive&quot; value=&quot;10&quot; /&gt;        &lt;property name=&quot;maxIdle&quot; value=&quot;5&quot; /&gt;&lt;/bean&gt;&lt;/beans&gt;        </code></pre><h3 id="Spring对SqlSessionFactory进行管理配置"><a href="#Spring对SqlSessionFactory进行管理配置" class="headerlink" title="Spring对SqlSessionFactory进行管理配置"></a>Spring对SqlSessionFactory进行管理配置</h3><pre><code>&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;    &lt;!-- mybatis的配置文件路径 --&gt;    &lt;property name=&quot;configLocation&quot; value=&quot;sqlMapConfig.xml&quot;&gt;&lt;/property&gt;    &lt;!-- SqlSessionFactory需要数据源信息，之前是写在sqlmapconfig.xml，现在需要重新指定 --&gt;    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre><h3 id="Mybatis程序编写"><a href="#Mybatis程序编写" class="headerlink" title="Mybatis程序编写"></a>Mybatis程序编写</h3><h4 id="原始dao方式"><a href="#原始dao方式" class="headerlink" title="原始dao方式"></a>原始dao方式</h4><h5 id="编写dao接口"><a href="#编写dao接口" class="headerlink" title="编写dao接口"></a>编写dao接口</h5><pre><code>//public interface UserDao {    // 1、 根据用户ID来查询用户信息；    public User findUserById(int id);        // 2、 根据用户名称来模糊查询用户信息列表；    public List&lt;User&gt; findUsersByName(String name);        // 3、 添加用户；    public void insertUser(User user);}</code></pre><h5 id="编写dao实现类（继承SqlSessionDaoSupport）"><a href="#编写dao实现类（继承SqlSessionDaoSupport）" class="headerlink" title="编写dao实现类（继承SqlSessionDaoSupport）"></a>编写dao实现类（继承SqlSessionDaoSupport）</h5><pre><code>//通过this.getSqlSession()获取sqlsession。public class UserDaoImpl extends SqlSessionDaoSupport implements UserDao {        @Override    public User findUserById(int id) {            return this.getSqlSession().selectOne(&quot;test.findUserById&quot;, id);    }        }</code></pre><h5 id="编写Mapper映射文件"><a href="#编写Mapper映射文件" class="headerlink" title="编写Mapper映射文件"></a>编写Mapper映射文件</h5><p><img src="/images/mybatis/12.5.png" alt="12.5"></p><h5 id="Spring定义bean"><a href="#Spring定义bean" class="headerlink" title="Spring定义bean"></a>Spring定义bean</h5><pre><code>//&lt;!-- 由spring管理原始dao的实现 --&gt;&lt;bean id=&quot;userDao&quot; class=&quot;cn.itcast.mybatis.dao.UserDaoImpl&quot;&gt;&lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;/&gt;&lt;/bean&gt;</code></pre><h5 id="编写测试代码-8"><a href="#编写测试代码-8" class="headerlink" title="编写测试代码"></a>编写测试代码</h5><pre><code>//public class UserDaoTest {    //spring上下文    private ApplicationContext ctx;            @Before    public void setUp() throws Exception {        //读取spring的上下文，然后封装到ctx        ctx = new ClassPathXmlApplicationContext(&quot;spring/applicationContext.xml&quot;);    }        @Test    public void testFindUserById() {        //创建userdao对象        UserDao userDao = (UserDao) ctx.getBean(&quot;userDao&quot;);        //调用userdao对象的方法        User user = userDao.findUserById(1);        System.out.println(user);    }    }</code></pre><h4 id="Mapper代理方式"><a href="#Mapper代理方式" class="headerlink" title="Mapper代理方式"></a>Mapper代理方式</h4><h5 id="编写mapper接口-6"><a href="#编写mapper接口-6" class="headerlink" title="编写mapper接口"></a>编写mapper接口</h5><pre><code>public  interface UserMapper {      // 1、  根据用户ID来查询用户信息      public User findUserById(int id);    }</code></pre><h5 id="编写mapper映射文件-2"><a href="#编写mapper映射文件-2" class="headerlink" title="编写mapper映射文件"></a>编写mapper映射文件</h5><p><img src="/images/mybatis/12.6.png" alt="12.6"></p><h5 id="Spring定义bean-1"><a href="#Spring定义bean-1" class="headerlink" title="Spring定义bean"></a>Spring定义bean</h5><p>&emsp;&emsp;Mapper代理开发方式有两种bean的定义方法，一种是MapperFactoryBean，一种是MapperScannerConfigurer（推荐）。</p><h6 id="通过MapperFactoryBean创建代理对象（了解）"><a href="#通过MapperFactoryBean创建代理对象（了解）" class="headerlink" title="通过MapperFactoryBean创建代理对象（了解）"></a>通过MapperFactoryBean创建代理对象（了解）</h6><pre><code>&lt;!-- mapper代理开发方式之单个mapper配置 --&gt;&lt;bean id=&quot;userMapper&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt;    &lt;property name=&quot;mapperInterface&quot; value=&quot;cn.itcast.mybatis.mapper.UserMapper&quot;&gt;&lt;/property&gt;    &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre><h5 id="通过MapperScannerConfigurer批量扫描创建代理对象（掌握）"><a href="#通过MapperScannerConfigurer批量扫描创建代理对象（掌握）" class="headerlink" title="通过MapperScannerConfigurer批量扫描创建代理对象（掌握）"></a>通过MapperScannerConfigurer批量扫描创建代理对象（掌握）</h5><p>&emsp;&emsp;存在问题：一个mapper定义一个bean，很麻烦。</p><pre><code>//&lt;!-- mapper代理开发方式之批量mapper配置 --&gt;&lt;!-- bean的名字默认为mapper接口类名的首字母小写 --&gt;&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;    &lt;!-- 指定批量mapper配置的包名 --&gt;    &lt;property name=&quot;basePackage&quot; value=&quot;cn.itcast.mybatis.mapper&quot;&gt;&lt;/property&gt;    &lt;!-- 指定使用的SqlSessionFactory --&gt;    &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre><h5 id="编写测试代码-9"><a href="#编写测试代码-9" class="headerlink" title="编写测试代码"></a>编写测试代码</h5><pre><code>//private ApplicationContext ctx;    @Before    public void setUp() throws Exception {        ctx = new ClassPathXmlApplicationContext(                &quot;spring/applicationContext.xml&quot;);    }        @Test    public void testFindUserById() {        // 创建mapper对象        UserMapper userMapper = (UserMapper) ctx.getBean(&quot;userMapper&quot;);        // 调用mapper对象的方法        User user = userMapper.findUserById(1);            System.out.println(user);    }</code></pre><h1 id="Mybatis的逆向工程（会用）"><a href="#Mybatis的逆向工程（会用）" class="headerlink" title="Mybatis的逆向工程（会用）"></a>Mybatis的逆向工程（会用）</h1><h2 id="什么是逆向工程"><a href="#什么是逆向工程" class="headerlink" title="什么是逆向工程"></a>什么是逆向工程</h2><p>&emsp;&emsp;简单点说，就是通过数据库中的单表，自动生成java代码。<br>&emsp;&emsp;Mybatis官方提供了逆向工程，可以针对单表自动生成mybatis代码（mapper.java\mapper.xml\po类）<br>&emsp;&emsp;企业开发中，逆向工程是个很常用的工具。</p><p>##下载逆向工程</p><p><a href="https://github.com/mybatis/generator/releases/tag/mybatis-generator-1.3.2" target="_blank" rel="noopener">https://github.com/mybatis/generator/releases/tag/mybatis-generator-1.3.2</a></p><h2 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li>创建generator配置文件；</li><li>使用java类来执行逆向工程；</li><li>把生成的代码拷贝到项目中。</li><li>在正式项目中使用逆向工程生成的代码</li></ol><h3 id="第一步：创建generator配置文件"><a href="#第一步：创建generator配置文件" class="headerlink" title="第一步：创建generator配置文件"></a>第一步：创建generator配置文件</h3><p>&emsp;&emsp;在classpath下，创建generator.xml配置文件：（文件内容可以从逆向工程的jar包中docs目录下的index.html中找到相关代码）</p><pre><code>//&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration  PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;  &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;    &lt;generatorConfiguration&gt;    &lt;context id=&quot;testTables&quot; targetRuntime=&quot;MyBatis3&quot;&gt;        &lt;commentGenerator&gt;            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot; /&gt;        &lt;/commentGenerator&gt;        &lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;            connectionURL=&quot;jdbc:mysql://localhost:3306/mybatis&quot; userId=&quot;root&quot;            password=&quot;mysql&quot;&gt;        &lt;/jdbcConnection&gt;        &lt;!-- &lt;jdbcConnection driverClass=&quot;oracle.jdbc.OracleDriver&quot;            connectionURL=&quot;jdbc:oracle:thin:@127.0.0.1:1521:yycg&quot;             userId=&quot;yycg&quot;            password=&quot;yycg&quot;&gt;        &lt;/jdbcConnection&gt; --&gt;            &lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal --&gt;        &lt;javaTypeResolver&gt;            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot; /&gt;        &lt;/javaTypeResolver&gt;            &lt;!-- targetProject:生成PO类的位置 --&gt;        &lt;javaModelGenerator targetPackage=&quot;cn.itcast.ssm.po&quot;            targetProject=&quot;.\src&quot;&gt;            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;            &lt;!-- 从数据库返回的值被清理前后的空格 --&gt;            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt;        &lt;/javaModelGenerator&gt;        &lt;!-- targetProject:mapper映射文件生成的位置 --&gt;        &lt;sqlMapGenerator targetPackage=&quot;cn.itcast.ssm.mapper&quot;             targetProject=&quot;.\src&quot;&gt;            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;        &lt;/sqlMapGenerator&gt;        &lt;!-- targetPackage：mapper接口生成的位置 --&gt;        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot;            targetPackage=&quot;cn.itcast.ssm.mapper&quot;             targetProject=&quot;.\src&quot;&gt;            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;        &lt;/javaClientGenerator&gt;        &lt;!-- 指定数据库表 --&gt;        &lt;table tableName=&quot;items&quot;&gt;&lt;/table&gt;        &lt;table tableName=&quot;orders&quot;&gt;&lt;/table&gt;        &lt;table tableName=&quot;orderdetail&quot;&gt;&lt;/table&gt;        &lt;table tableName=&quot;user&quot;&gt;&lt;/table&gt;                    &lt;/context&gt;&lt;/generatorConfiguration&gt;</code></pre><h3 id="第二步：使用java类来执行逆向工程"><a href="#第二步：使用java类来执行逆向工程" class="headerlink" title="第二步：使用java类来执行逆向工程"></a>第二步：使用java类来执行逆向工程</h3><pre><code>//public class Generator {    /**     *@param args     */    public static void main(String[] args)  throws Exception{        List&lt;String&gt; warnings = new ArrayList&lt;String&gt;();        boolean overwrite = true;        File configFile = new File(&quot;config/generator.xml&quot;);        ConfigurationParser cp = new ConfigurationParser(warnings);        Configuration config = cp.parseConfiguration(configFile);        DefaultShellCallback callback = new DefaultShellCallback(overwrite);        MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config,                callback, warnings);        myBatisGenerator.generate(null);    }    }</code></pre><h3 id="第三步：把生成的代码拷贝到项目中"><a href="#第三步：把生成的代码拷贝到项目中" class="headerlink" title="第三步：把生成的代码拷贝到项目中"></a>第三步：把生成的代码拷贝到项目中</h3><ol><li>如果正式项目中已经有po类所在的包了，那么就只需要拷贝po类到指定包下就可以。</li><li>如果正式项目中没有po包，那么就把逆向工程中整个po类的包拷贝过去。</li><li>Mapper.xml和mapper.java的拷贝与po类一样。</li></ol><h3 id="第四步：使用生成的代码"><a href="#第四步：使用生成的代码" class="headerlink" title="第四步：使用生成的代码"></a>第四步：使用生成的代码</h3><pre><code>//public class ItemsMapperTest {        // spring上下文    private ApplicationContext ctx;        @Before    public void setUp() throws Exception {        // 读取spring的上下文，然后封装到ctx        ctx = new ClassPathXmlApplicationContext(                &quot;spring/applicationContext.xml&quot;);    }        @Test    public void testSelectByExample() {        ItemsMapper mapper = (ItemsMapper) ctx.getBean(&quot;itemsMapper&quot;);        ItemsExample example = new ItemsExample();        //使用它进行参数封装传递        Criteria criteria = example.createCriteria();        //设置参数        criteria.andNameEqualTo(&quot;背包&quot;);                    List&lt;Items&gt; list = mapper.selectByExample(example);                    System.out.println(list);    }    }                </code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>&emsp;&emsp;Mapper.xml文件已经存在时，如果进行重新生成则mapper.xml文件时，内容不被覆盖而是进行内容追加，结果导致mybatis解析失败。</p><ul><li>解决方法：删除原来已经生成的mapper.xml文件再进行生成。Mybatis自动生成的po及mapper.java文件不是内容而是直接覆盖没有此问题。</li></ul>]]></content>
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Struts2学习笔记</title>
      <link href="/2018/07/23/Struts2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/07/23/Struts2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="知识导入"><a href="#知识导入" class="headerlink" title="知识导入"></a>知识导入</h1><h2 id="xml解析"><a href="#xml解析" class="headerlink" title="xml解析"></a>xml解析</h2><p>&emsp;&emsp; dom4j解析</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>&emsp;&emsp; 有完整类名，并且含有空参构造函数，如何创建出对象？</p><pre><code>//使用反射创建对象Class clazz = Class.forName(&quot;xxx&quot;);clazz.newInstance();</code></pre><a id="more"></a><h2 id="filter过滤器"><a href="#filter过滤器" class="headerlink" title="filter过滤器"></a>filter过滤器</h2><ul><li>过滤来自浏览器发送的请求.在请求到达访问资源之前.会先经过过滤器.</li><li>可以完成批处理. 还可以根据filterChain来决定是否放行.</li><li>也可以使用请求转发,或重定向,不让请求到目标路径.</li></ul><h2 id="自己定义一个struts-Mini"><a href="#自己定义一个struts-Mini" class="headerlink" title="自己定义一个struts-Mini"></a>自己定义一个struts-Mini</h2><p><img src="/images/struts2/struts-mini%E5%9B%BE%E8%A7%A3.png" alt="struts-mini图解"></p><h1 id="Struts2"><a href="#Struts2" class="headerlink" title="Struts2"></a>Struts2</h1><h2 id="框架相关"><a href="#框架相关" class="headerlink" title="框架相关"></a>框架相关</h2><ul><li>什么是框架？<br>&emsp; 微观：由一个一个类构成的包，包再构成框架<br>&emsp; 宏观：半成品的项目，我们需要执行什么业务时，为框架填写业务逻辑即可</li><li>三大框架：SSH=&gt;Struts,Spring,Hibernate<br>&emsp; Struts的版本：<br>&emsp;&emsp; Struts1（已经淘汰）<br>&emsp;&emsp; Struts2（我们要学的）也叫xwork。</li><li>三大框架的作用？<br>&emsp; 简化我们的开发，降低开发成本，提高开发效率<br>&emsp;Struts=&gt; WEB层框架：<br>&emsp;&emsp; 优势：<br>&emsp;&emsp; &emsp; 1.不用侵入性比较高的Servlet.可以直接写普通java类作为处理请求逻辑的处理类.这样更易于测试.<br>&emsp;&emsp; &emsp; 2.整合了一些之前需要手动来做的功能. 后台验证,表单回显,自动将表单参数封装,防止表单重复提交，如果不够用我们还可以扩展框架的功能.</li></ul><h2 id="Struts2的HelloWorld"><a href="#Struts2的HelloWorld" class="headerlink" title="Struts2的HelloWorld"></a>Struts2的HelloWorld</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//---------------------------------</span></span><br><span class="line">   <span class="comment">//cn.pinzhi.action.HelloAction</span></span><br><span class="line">   <span class="comment">//-----------------------------</span></span><br><span class="line">       <span class="keyword">package</span> cn.pinzhi.action;</span><br><span class="line">       <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>; <span class="comment">// 结果页面命名</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-----------------------------------------</span></span><br><span class="line">   <span class="comment">//src下的struts.xml</span></span><br><span class="line">   <span class="comment">//------------------------------------------</span></span><br><span class="line">   &lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">   &lt;!DOCTYPE struts PUBLIC</span><br><span class="line"><span class="string">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="string">"http://struts.apache.org/dtds/struts-2.3.dtd"</span>&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">&lt;!-- name:单纯的给包起一个名字，不要与其他包名重复</span><br><span class="line">namespace:为action访问加上一层或多层路径</span><br><span class="line">etends：继承一个其他包，目的是引入其他包的配置</span><br><span class="line"> --&gt;</span><br><span class="line">       &lt;<span class="keyword">package</span> name=<span class="string">"hello"</span> namespace=<span class="string">"/"</span> extends=<span class="string">"struts-default"</span>&gt;</span><br><span class="line">       &lt;!--name:为action类加上一个标识，在访问时填入name名称，就可以找到action  </span><br><span class="line">       <span class="class"><span class="keyword">class</span>：<span class="title">action</span>完整类名</span></span><br><span class="line"><span class="class">       <span class="title">method</span>：处理的方法</span></span><br><span class="line"><span class="class">       --&gt;</span></span><br><span class="line"><span class="class">           &lt;<span class="title">action</span> <span class="title">name</span></span>=<span class="string">"hello"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.pinzhi.action.HelloAction"</span>  method=<span class="string">"execute"</span>&gt;</span><br><span class="line">             &lt;!--name：返回结果的标识，用于找到结果路径</span><br><span class="line">             type：可以决定跳转到结果的方式=》转发，重定向。。。</span><br><span class="line">              --&gt;</span><br><span class="line">               &lt;result name="success"&gt;/success.jsp&lt;/result&gt;</span><br><span class="line">           &lt;/action&gt;</span><br><span class="line">       &lt;/package&gt;</span><br><span class="line">   &lt;/struts&gt;</span><br><span class="line">   <span class="comment">//------------------------------------</span></span><br><span class="line">   <span class="comment">//web.xml</span></span><br><span class="line">   <span class="comment">//------------------------------------</span></span><br><span class="line">   &lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">   &lt;web-app xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> xsi:schemaLocation=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span> version=<span class="string">"3.0"</span>&gt;</span><br><span class="line">       &lt;display-name&gt;helloStruts&lt;/display-name&gt;</span><br><span class="line">        &lt;!-- 重要：配置struts2的核心过滤器 --&gt;</span><br><span class="line">        &lt;!--配置struts2的过滤器，要放到其他过滤器后面，保证其他过滤器可以执行  --&gt;</span><br><span class="line">        &lt;filter&gt;</span><br><span class="line">           &lt;filter-name&gt;struts2&lt;/filter-name&gt;</span><br><span class="line">           &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">apache</span>.<span class="title">struts2</span>.<span class="title">dispatcher</span>.<span class="title">ng</span>.<span class="title">filter</span>.<span class="title">StrutsPrepareAndExecuteFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">   &lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">   &lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">           &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">struts2</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">           &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class"> &lt;/<span class="title">web</span>-<span class="title">app</span>&gt;</span></span><br><span class="line"><span class="class"> //---------------------------</span></span><br></pre></td></tr></table></figure><h2 id="struts2的架构"><a href="#struts2的架构" class="headerlink" title="struts2的架构"></a>struts2的架构</h2><h3 id="struts2的架构图解"><a href="#struts2的架构图解" class="headerlink" title="struts2的架构图解"></a>struts2的架构图解</h3><p><img src="/images/struts2/struts2%E7%9A%84%E6%9E%B6%E6%9E%84.png" alt="struts2的架构"></p><h3 id="struts2中的6个配置文件"><a href="#struts2中的6个配置文件" class="headerlink" title="struts2中的6个配置文件"></a>struts2中的6个配置文件</h3><ol><li>default.properties ：用于配置struts 常量。例如：编码</li><li>struts-default.xml ：struts提供的默认核心配置文件，struts大部分功能都在此配置文件中。</li><li>struts-plugin.xml ： struts插件核心配置文件，struts整合其他框架或工具。</li></ol><ul><li>以上三个文件，用户自己不进行修改。</li></ul><ol start="4"><li>struts.xml ：用户自定义核心配置文件。<br>&emsp;  struts.xml 可以配置所有内容，包括：常量,如：<br>&emsp;&emsp; &lt; constant name=”struts.i18n.encoding” value=”GBK”&gt; &lt; /constant&gt;  //配置编码</li><li>struts.properties ： 用于自定义struts常量配置文件。一般不使用。</li><li>web.xml ：也可以配置struts常量<br>@@@注意：如果配置常量，所有的配置文件存在优先级，编号越大优先级越高。</li></ol><h3 id="常见的struts常量"><a href="#常见的struts常量" class="headerlink" title="常见的struts常量"></a>常见的struts常量</h3><ol><li>用于配置项目编码//struts.i18n.encoding=UTF-8</li><li>struts整合spring需要配置，默认注释掉了//struts.objectFactory = spring</li><li>struts默认使用文件上传解析工具：apache-commons-fileupload<br>struts.multipart.parser=jakarta</li><li>临时文件保存位置//struts.multipart.saveDir=</li><li>上传文件最大大小，默认值：2M，单位字节//struts.multipart.maxSize</li><li>用于设置action请求路径扩展名。默认：action或空。多个值使用逗号分隔//struts.action.extension=action,,<br>例如：/hello/userAction 或 /hello/userAction.action</li><li>确定是否使用动态方法调用。默认关闭的。//struts.enable.DynamicMethodInvocation = false</li><li>设置开发模式，默认关闭。如果设置true：将提供更多提示信息，自动加载文件。//struts.devMode = false</li><li>自动重新加载国际化资源文件//struts.i18n.reload = true</li><li>自动冲洗加载xml配置文件。例如：struts.xml。但不会自动加载action类。//struts.configuration.xml.reload = true</li><li>设置struts标签主题，默认值：xhtml。取值：simple。//struts.ui.theme=xhtml<br>//开发中常用simple。xhtml存在默认布局，开发中布局使用美工提供页面，布局自定义。</li></ol><h3 id="struts-xml详解"><a href="#struts-xml详解" class="headerlink" title="struts.xml详解"></a>struts.xml详解</h3><ul><li><p>&lt; constant&gt; 用于配置struts常量<br>—name：struts提供固定常量名称。此名称从 default.properties文件获得<br>—value：常量值<br>例如：&lt;constant name=”struts.devMode” value=”true”&gt; &lt;/constant&gt; </p></li><li><p>&lt;package&gt; struts用于管理所有action类<br>—name：给当前包进行唯一命名，必填项。用于其他包继承的。<br>例如：struts-default.xml//&lt;package name=”struts-default” abstract=”true”&gt; //将struts已经完成的功能，作为一个包存在。名称是固定值struts-default。<br>—namespace：action访问路径前缀。<br>例如：”/“<br>“/hello”<br>“/a/b/c”<br>“”<br>—extends：用于继承其他包的。<br>例如：&lt;package extends=”struts-default”&gt;  当前action继承struts已经完成功能。<br>—abstract：是否抽象，如果设置为true，表示没有具体action实现功能。(了解)</p></li><li><p>&lt;action&gt;  用于配置action类（请求处理类）<br>—name：action名称，用于在请求路径进行访问<br>—class：action类全限定类名<br>—method:用于确定action类中需要执行的方法，默认值：execute</p></li><li><p>&lt;result&gt; 用于配置结果集<br>—name：用于确定action类中，方法的返回值<br>—text：标签体用于设置jsp路径<br>—type:结果集类型<br>&emsp; — dispatcher：请求转发，从一个action到jsp页面，默认值。<br>&emsp;— redirect：重定向到jsp页面<br>&emsp;— redirectAction：重定向到另一个action<br>&emsp;— stream：以流的方法发送浏览器，用于文件下载。<br>&emsp;— chain：链，在一次请求中，从一个action到另一个action</p></li><li><p>&lt;result-types&gt;  用于配置结果集类型的，一般不用，但需要看的懂。</p></li><li><p>&lt;interceptors&gt;  用于配置拦截器<br>— &lt;interceptor&gt;  用于注册拦截器的<br>—&lt;interceptor-stack&gt;  拦截器栈，将已经注册的拦截器组合在一起，形成一个栈。<br>例如：&lt;interceptor-stack name=”defaultStack”&gt;  声明一个拦截器栈，名称是：defaultStack</p></li><li><p>&lt;default-interceptor-ref&gt; 用于确定当前默认拦截器的<br>例如：&lt;default-interceptor-ref name=”defaultStack”/&gt;  将“defaultStack”拦截器栈，声明默认拦截器栈</p></li><li><p>&lt;default-action-ref&gt; 如果访问的action不存在，默认执行的aciton。<br>例如：/a/b/c/d/oneAction 此aciton没有配置，默认情况返回action找不到<br>!!!如果配置&lt;default-action-ref&gt; 如果存在404时，不显示action找不到，而是指定action</p></li><li><p>&lt;default-class-ref &gt;  用于配置 默认action实现类<br>例如：&lt;default-class-ref class=”com.opensymphony.xwork2.ActionSupport” /&gt;<br>!!!如果编写配置文件时没有声明class属性，及&lt;action name=””&gt;  将执行ActionSupport类。</p></li><li><p>&lt;include&gt;  将多个struts配置文件组合成一个。<br>struts.xml 入口配置文件，大家共用的。用于存放通用模块。<br>&emsp;&lt;include file=”struts-user.xml” /&gt;<br>&emsp;&lt;include file=”struts-book.xml” /&gt;<br>提供子配置文件<br>&emsp;struts-user.xml<br>&emsp;struts-book.xml</p></li></ul><h3 id="action访问"><a href="#action访问" class="headerlink" title="action访问"></a>action访问</h3><h4 id="动态方法调用"><a href="#动态方法调用" class="headerlink" title="动态方法调用"></a>动态方法调用</h4><p>格式： action名称!方法名称.action<br>例如：bookAction!add.action<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-------- jsp文件配置action入口  ----------&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/bookAction!add.action"</span>&gt;</span>动态方法调用--add<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-------- struts.xml 配置  ----------&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意：默认情况动态方法调用关闭的，必须通过struts常量进行配置。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置动态方法调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.enable.DynamicMethodInvocation"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 案例2：动态方法调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"bookAction"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.b_demo.BookAction"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/b_demo/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- action类，提供两个方法</span></span><br><span class="line"><span class="comment">位置：/struts_day01/src/cn/itcast/b_demo/BookAction.java</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">public class BookAction &#123;</span><br><span class="line">public String execute()&#123;</span><br><span class="line">System.out.println("bookAction execute()");</span><br><span class="line">return "success";</span><br><span class="line">&#125;</span><br><span class="line">public String add()&#123;</span><br><span class="line">System.out.println("bookAction add()");</span><br><span class="line">return "success";</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><p><code>&lt;action name=&quot;userAction&quot;&gt;</code> , action.name可以使用通配符星号(*)，在action.class、aciton.method、result.name 处可以使用{n}方式匹配星号。</p><p>例如：</p><ul><li><p><code>userAction_*</code>    将可以通过{1}方法获得第一个星号匹配到内容。<br>  请求路径<code>/userAction_add</code>  ,<br>  <code>&lt;action name=&quot;userAction_*&quot; method=&quot;{1}&quot;&gt;</code><br>  {1} 匹配的内容是add，将执行add方法</p></li><li><p><code>userAction_*_*</code>{1} 匹配第一个星；{2}匹配第二星<br>  请求路径 <code>/userAction_add_success</code>   ,<br>  <code>&lt;action name=&quot;userAction_*_*&quot; method=&quot;{1}&quot;&gt;&lt;resutl name=&quot;{2}&quot;&gt;</code><br>  {1}匹配add方法，{2}匹配返回值的名称success</p></li><li><p><code>*_*_*</code> 将采用多个分别描述不同的内容，一次{1}{2}{3}获得<br>  请求路径 <code>/UserAction_add_success</code><br>  <code>&lt;action name=&quot;*_*_*&quot;  class=&quot;cn.itcast.action.{1}&quot; method=&quot;{2}&quot;&gt;  &lt;result name=&quot;{3}&quot;&gt;/pages/{3}.jsp</code></p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 案例3：通配符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"personAction_*"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.c_demo.PersonAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"add"</span>&gt;</span>/c_demo/add.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"update"</span>&gt;</span>/c_demo/update.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="action访问路径"><a href="#action访问路径" class="headerlink" title="action访问路径"></a>action访问路径</h4><p>&emsp;&emsp;当默认访问一个action时，package.namespace = /a/b/c</p><ul><li>优先从”/a/b/c”namespace获得相应的aciton，</li><li>如果没有获得，将从”/a/b”中获得</li><li>如果没有获得，将从”/a”中获得</li><li>如果没有获得，将从”/“中获得</li><li>如果没有获得，将从””中获得</li></ul><h2 id="Action类"><a href="#Action类" class="headerlink" title="Action类"></a>Action类</h2><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><ol><li><p>POJO类</p></li><li><p>实现Action接口<br>&emsp;&emsp;规范接口，将success (表示成功了),none(没有返回值。相当方法void。没有返回值表示没有result，常用与ajax操作。使用response发送数据),error(服务器异常),input(表示用户输入错误),login(表示需要权限)等字符串封装成相应的常量</p></li></ol><ol start="3"><li>继承ActionSupport类<br>&emsp;&emsp;ActionSupport类已经默认实现了Action(规范接口),Validateable(数据校验),ValidationAware(错误信息),TextPrivider(国际化)等接口</li></ol><h3 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>必须是public</li><li>建议有返回值，类型必须String</li><li>方法名称自定义</li><li>没有参数</li><li>需要throw Exception</li><li>非静态的<br><strong>注意：</strong>可以没有返回值，一般情况都有，可以使用return “none” 表示没有返回。</li></ol><h3 id="Struts-xml中struts-default包中的默认配置"><a href="#Struts-xml中struts-default包中的默认配置" class="headerlink" title="Struts.xml中struts-default包中的默认配置"></a>Struts.xml中struts-default包中的默认配置</h3><ul><li><p>如果不手动配置Action  默认Action如下配置:<br><code>&lt;default-class-ref class=&quot;com.opensymphony.xwork2.ActionSupport&quot; /&gt;</code></p></li><li><p>如果不配置结果的type属性,默认type属性如下配置:<br><code>&lt;result-type name=&quot;dispatcher&quot; class=&quot;org.apache.struts2.dispatcher.ServletDispatcherResult&quot; default=&quot;true&quot;/&gt;</code></p></li></ul><h2 id="访问Servlet-api"><a href="#访问Servlet-api" class="headerlink" title="访问Servlet api"></a>访问Servlet api</h2><h3 id="完全解耦，但只能操作作用域"><a href="#完全解耦，但只能操作作用域" class="headerlink" title="完全解耦，但只能操作作用域"></a>完全解耦，但只能操作作用域</h3><ul><li>不使用曾经学习过的servlet知识，可以去操作三个作用域</li><li>ActionContext 工具类，action上下文对象<br>  获得实例：ActionContext.getContext()<br>  -api:<br>&emsp;&emsp;ac.put(key,value) , 相当于操作request作用域。request.setAttribute(“key”,value)<br>&emsp;&emsp;ac.getSession().put(key,value) ，相当于操作session作用域。session.setAttribute(“key”,value)<br>&emsp;&emsp;ac.getApplication().put(key,value) ，相当于操作application作用域。servletContext.setAtt…</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//1 request作用域</span></span><br><span class="line">ActionContext.getContext().put(<span class="string">"ds"</span>, <span class="string">"屌丝_request"</span>);</span><br><span class="line"><span class="comment">//2 session作用域</span></span><br><span class="line">ActionContext.getContext().getSession().put(<span class="string">"ds"</span>, <span class="string">"屌丝_session"</span>);</span><br><span class="line"><span class="comment">//3 application作用域</span></span><br><span class="line">ActionContext.getContext().getApplication().put(<span class="string">"ds"</span>, <span class="string">"屌丝——application"</span>);</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="操作servlet对象"><a href="#操作servlet对象" class="headerlink" title="操作servlet对象"></a>操作servlet对象</h3><p>&emsp;ServletActionContext 工具类，获得需要servlet对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-api： </span><br><span class="line"> <span class="comment">// 获得request对象</span></span><br><span class="line"> HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class="line"> <span class="comment">//2 获得response对象</span></span><br><span class="line"> HttpServletResponse response = ServletActionContext.getResponse();</span><br><span class="line"> <span class="comment">//3获得servletContext对象</span></span><br><span class="line"> ServletContext servletContext = ServletActionContext.getServletContext();</span><br><span class="line"> <span class="comment">//4 获得session</span></span><br><span class="line"> HttpSession session = request.getSession();</span><br></pre></td></tr></table></figure></p><h3 id="通过实现接口，struts注入"><a href="#通过实现接口，struts注入" class="headerlink" title="通过实现接口，struts注入"></a>通过实现接口，struts注入</h3><ul><li>需要实现指定的接口，此接口都提供setter，struts在执行action方法之前，将调用setter方法进行赋值。<br>  &emsp;ServletRequestAware //获得HttpServletRequest对象<br>  &emsp;ServletResponseAware  //获得HttpServletResponse对象<br>  &emsp;ServletContextAware// 获得ServletContext对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5Action3</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ServletRequestAware</span> , <span class="title">ServletResponseAware</span> ,<span class="title">ServletContextAware</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line"><span class="keyword">private</span> HttpServletResponse response;</span><br><span class="line"><span class="keyword">private</span> ServletContext servletContext;</span><br><span class="line"><span class="keyword">private</span> HttpSession session;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.session = request.getSession();</span><br><span class="line"><span class="keyword">this</span>.request = request;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletResponse</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.response = response;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletContext</span><span class="params">(ServletContext context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.servletContext = context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="结果集类型-Result"><a href="#结果集类型-Result" class="headerlink" title="结果集类型 Result"></a>结果集类型 Result</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- 案例 6.1 ：结果集类型,重定向jsp --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"demo6Action"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.f_demo.Demo6Action"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"redirect"</span>&gt;</span>/f_demo/type.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 案例 6.2 ：结果集类型,重定向action --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"demo6Action2"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.f_demo.Demo6Action2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"redirectAction"</span>&gt;</span>demo6Action3<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"demo6Action3"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.f_demo.Demo6Action3"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 请求转发 ,默认值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"dispatcher"</span>&gt;</span>/f_demo/type.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="封装请求参数"><a href="#封装请求参数" class="headerlink" title="封装请求参数"></a>封装请求参数</h2><ol><li><p>属性封装</p><ul><li>只要在Action中提供与参数对应的set方法即可自动封装</li></ul></li><li><p>自动类型封装</p><ul><li>struts会自动转换8大基本数据类型和对应包装类.以及Date类型，其中date类型对数据提交格式有要求: yyyy-MM-dd</li></ul></li><li><p>容器数据封装</p><ul><li>容器：数组、List、Set、Map等</li></ul></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Jsp表单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demo2Action"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">Map<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userMap['u001'].userName"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userMap['u001'].userPwd"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userMap['u002'].userName"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userMap['u002'].userPwd"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">List<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userList[0].userName"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userList[0].userPwd"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userList[1].userName"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userList[1].userPwd"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">Array<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%--</span> <span class="attr">request.getParameterValues</span>("<span class="attr">username</span>") <span class="attr">--</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"抽烟"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"喝酒"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"烫头"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Action类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"><span class="comment">//封装到Map ,必须提供getter，所有封装需要使用同一个Map对象</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String,User&gt; userMap;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserMap</span><span class="params">(Map&lt;String, User&gt; userMap)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userMap = userMap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, User&gt; <span class="title">getUserMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userMap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//封装到List，必须提供getter，，所有封装需要使用同一个List对象</span></span><br><span class="line">   <span class="comment">// * List&lt;User&gt; 和 User[] 等效的</span></span><br><span class="line"><span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserList</span><span class="params">(List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userList = userList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数组，不需要提供getter，直接一次性封装数据，使用String[] request.getParameterValues("hobby")</span></span><br><span class="line"><span class="keyword">private</span> String[] hobby;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobby</span><span class="params">(String[] hobby)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.hobby = hobby;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(userMap);</span><br><span class="line">System.out.println(userList);</span><br><span class="line">System.out.println(hobby);</span><br><span class="line">System.out.println(Arrays.toString(hobby));</span><br><span class="line"><span class="keyword">return</span> <span class="string">"none"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="默认支持类型转换"><a href="#默认支持类型转换" class="headerlink" title="默认支持类型转换"></a>默认支持类型转换</h3><ul><li><p>字符串  与  指定类型   之间转换<br>  字符串 转成 指定类型：表单提交，浏览器发送服务器<br>  指定类型 转成 字符串：标签回显，服务器发送浏览器</p></li><li><p>指定类型<br>  8个基本类型、以及包装类<br>  时间 Date，字符串有格式要求：yyyy-MM-dd 或 yyyy-MM-dd HH:mm:ss<br>  数组、List、Map</p></li></ul><h3 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h3><h4 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h4><ul><li>方案1：实现接口：TypeConverter，有一个方法，但参数过多。</li><li>方案2：继承默认实现类：DefaultTypeConverter 。提供简洁方法convertValue(Object , Class)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">convertValue(Object value ,  Class toType)</span><br><span class="line">#1 表单提交，浏览器发送到服务器。浏览器发送的肯定字符串String，需要转换成指定的类型。例如Date类型</span><br><span class="line">     -参数<span class="number">1</span>：value，表示浏览器发送的数据。类型是String[] ,底层使用request.getParameterValues(<span class="string">"..."</span>)</span><br><span class="line">     -参数<span class="number">2</span>：toType，表示需要转换的类型，java.uilt.Date类型</span><br><span class="line">具体操作</span><br><span class="line">   <span class="comment">// 如果toType是 Date类型，表示希望将 字符串转成 时间</span></span><br><span class="line">  <span class="keyword">if</span>(toType == java.util.Date.class)&#123;</span><br><span class="line">      <span class="comment">//获得数据</span></span><br><span class="line">      String[] params = (String[])value;</span><br><span class="line">     <span class="comment">//转成成时间</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">#2 标签回显，服务器发送 浏览器，类型之前已经从字符串转成时间，现在希望将时间再转换成 字符串。</span><br><span class="line">    -参数<span class="number">1</span>：value，表示服务器已经转成好的时间。类型Date。</span><br><span class="line">    -参数<span class="number">2</span>：toType，表示需要转换的类型，String类型</span><br><span class="line">具体操作</span><br><span class="line">  <span class="keyword">if</span>(toType == String.class)&#123;</span><br><span class="line">    <span class="comment">// 将数据强转时间</span></span><br><span class="line">    Date date = (Date)value;</span><br><span class="line">    <span class="comment">// 格式化</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/struts2/%E8%BD%AC%E6%8D%A2%E5%99%A8%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="转换器执行流程"></p><h3 id="注册转换器"><a href="#注册转换器" class="headerlink" title="注册转换器"></a>注册转换器</h3><ul><li>局部转换器：只对当前Action类有效。<br>  –限制：只能对action类的属性进行转化，不能对javabean中属性转换</li><li>全局转换器：对所有的Action类有效。</li></ul><p><strong>注意：</strong>自定义转换器很少使用，一般情况使用默认就可以。多读</p><ol><li><p>局部转换器的创建<br> –位置：Action类同包<br> –名称：action类的类名-conversion.properties<br> –内容：属性=转换器//如birthday=cn.itcast.XXXCoverter</p></li><li><p>全局转换器的创建<br>–位置：src<br>–名称：xwork-conversion.properties<br>–内容：需要转换的类=转换器//如java.util.Data=cn.itcast.XXXConveter</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-----转换器实现-----</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">convertValue</span><span class="params">(Object value, Class toType)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy/MM/dd"</span>);</span><br><span class="line"><span class="comment">//1 浏览器发送服务器--表单提交</span></span><br><span class="line"><span class="comment">// * value : String[]</span></span><br><span class="line"><span class="comment">// * toType : Date</span></span><br><span class="line"><span class="keyword">if</span> (toType == java.util.Date.class) &#123;</span><br><span class="line"><span class="comment">// 1.1 强转，获得数据</span></span><br><span class="line">String[] paramValues = (String[]) value;</span><br><span class="line"><span class="comment">// 1.2 转成时间，返回 , 默认使用第一个</span></span><br><span class="line"><span class="keyword">return</span> dateFormat.parse(paramValues[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2 服务器发送浏览器--标签回显</span></span><br><span class="line"><span class="comment">// * value : 服务器已经转换好的数据 Date</span></span><br><span class="line"><span class="comment">// * toType : 需要类型 String</span></span><br><span class="line"><span class="keyword">if</span>(toType == String.class)&#123;</span><br><span class="line"><span class="comment">// 获得时间数据</span></span><br><span class="line">java.util.Date date = (java.util.Date)value;</span><br><span class="line"><span class="comment">// 格式化</span></span><br><span class="line"><span class="keyword">return</span> dateFormat.format(date);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行其他</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义错误信息"><a href="#自定义错误信息" class="headerlink" title="自定义错误信息"></a>自定义错误信息</h3><p>&emsp;&emsp;我们发现Struts2打印的类型转换错误信息是英文的，这说明我们需要自定义错误信息。自定义错误信息需要在Action所在目录下创建ActionName.properties文件（与Action同名的properties文件），然后在该文件中给出：invalid.fieldvalue.属性名=错误信息，其中invalid.fieldvalue是固定的。<br>&emsp;&emsp;例如：invalid.fieldvalue.person=无法将请求参数转换成Person类型！</p><h2 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h2><h3 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h3><ul><li><p>校验分类<br> -浏览器端校验：javaScript，但不安全<br> -服务器端校验：struts校验</p></li><li><p>struts校验</p><ul><li>手动校验：编写代码，适用于需要与数据库交互</li><li>xml校验：编写配置文件，通用校验，逻辑简单。如：不能为空，长度为10等</li></ul></li></ul><h4 id="手动校验"><a href="#手动校验" class="headerlink" title="手动校验"></a>手动校验</h4><p>&emsp;&emsp;若需要手动校验，必须实现接口：validateable,它提供了一个方法validate()</p><ol><li><p>校验action中的所有方法<br>–实现接口，并实现validate()方法</p></li><li><p>校验action中的单个方法<br>-实现接口并编写方法 validate方法() , 此处“方法”表示执行的方法名称，首字母大写。<br> —-例如：add() 执行前需要校验，必须编写 validateAdd()</p></li></ol><p><strong>注意：</strong>先执行“单个方法”校验，再执行“所有方法”校验</p><ul><li>提供错误提示，阻止目标方法的执行<br>  –<code>this.addFieldError(&quot;&quot;, &quot;&quot;)</code>给指定的字段设置提示信息,<code>&lt;s:fielderror&gt;</code>jsp显示错误<br>–    <code>this.addActionMessage(aMessage)</code> action提示提示信息,<code>&lt;s:actionmessage/&gt;</code>jsp显示错误<br>  –<code>this.addActionError(anErrorMessage)</code>action错误,    <code>&lt;s:actionerror/&gt;</code>jsp显示错误</li></ul><h4 id="xml校验"><a href="#xml校验" class="headerlink" title="xml校验"></a>xml校验</h4><ul><li><p>单个方法校验<br>  –位置：action类同包<br>  –名称：actionClass-actionName-validation.xml</p><pre><code>&amp;emsp;&amp;emsp;actionClass ：表示action类名&amp;emsp;&amp;emsp;actionName：表示action访问名称，及&lt;action name=&quot;...&quot;&gt;&amp;emsp;&amp;emsp;validation.xml ：固定后缀</code></pre><p>  –内容：xml必须提供约束（DTD、schema[命名空间]）</p><pre><code>&amp;emsp;&amp;emsp;dtd文件位置：xwork-core-2.3.15.3.jar!/xwork-validator-1.0.3.dtd&amp;emsp;&amp;emsp;dtd文件内容：</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE validators PUBLIC</span></span><br><span class="line"><span class="meta">  "-//Apache Struts//XWork Validator 1.0.3//EN"</span></span><br><span class="line"><span class="meta">  "http://struts.apache.org/dtds/xwork-validator-1.0.3.dtd"&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>所有方法校验<br> –位置：action类同包<br> –名称：actionClass-validation.xml<br> –内容：同上</p></li><li><p>struts提供的校验器<br> –校验配置文件:<code>xwork-core-2.3.15.3.jar!/com/opensymphony/xwork2/validator/validators/default.xml</code></p></li></ul><h3 id="输入校验"><a href="#输入校验" class="headerlink" title="输入校验"></a>输入校验</h3><ol><li><p>什么是输入校验？<br>&emsp;&emsp;在Action封装了请求参数后，还需要对其进行校验。例如name不能为空，age只能在18~60之间等等！我们一定要搞清楚，输入校验是在类型转换成功之后，才可能执行的。<br>校验分类：<br>&emsp;&emsp;–JavaScript客户端校验（改善用户体验）；<br>&emsp;&emsp;– 服务器端校验（保证安全性），即使用Struts2输入校验。</p></li><li><p>Struts2输入校验的分类<br>&emsp;&emsp;编程式校验；<br>&emsp;&emsp;    配置校验：<br>&emsp;&emsp;&emsp;&emsp;XML配置校验（了解）；</p></li></ol><h4 id="编程式的输入校验"><a href="#编程式的输入校验" class="headerlink" title="编程式的输入校验"></a>编程式的输入校验</h4><p>&emsp;&emsp;覆盖ActionSupport类的validate()方法，在这个方法中完成对参数的校验。validate()方法会在参数封装之后，在execute()方法之前执行。如果validate()方法中向fieldError中添加了错误信息，那么就不会再执行execute()方法，而是跳转到input结果码对应的页面。<br><img src="/images/struts2/%E6%8B%A6%E6%88%AA%E5%99%A8%E6%A0%88%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="拦截器栈执行流程"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---jsp文件中---</span></span><br><span class="line">&lt;s:fielderror /&gt;</span><br><span class="line">&lt;form action=<span class="string">"&lt;c:url value='/Demo1Action.action'/&gt;"</span> &gt;</span><br><span class="line">用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">密　码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---action.java中---</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(username == <span class="keyword">null</span> || username.trim().length() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.addFieldError(<span class="string">"username"</span>, <span class="string">"用户名不能为空"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(password == <span class="keyword">null</span> || password.trim().length() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.addFieldError(<span class="string">"password"</span>, <span class="string">"密码不能为空"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(username + <span class="string">", "</span> + password);</span><br><span class="line"><span class="keyword">return</span> NONE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在validate方法中</p><ul><li>使用addFieldError(fieldName, errorMessage)方法存入字段的错误信息. </li><li>使用addActionError(anErrorMessage)方法存入action的错误信息</li><li>使用addActionMessage(aMessage)方法存入action提示信息</li></ul></li><li><p>在页面</p><ul><li>使用&lt;s:fielderror fieldName=”xxx” /&gt;取出字段的错误信息</li><li>使用&lt;s:actionerror/&gt;取出action的错误信息</li><li>使用&lt;s:actionmessage/&gt;取出action提示信息</li><li>当然如果你的页面使用了struts2提供的表单标签.表单标签会自动显示字段的错误信息</li></ul></li></ul><h4 id="校验进阶"><a href="#校验进阶" class="headerlink" title="校验进阶"></a>校验进阶</h4><h5 id="跳过指定的校验方法"><a href="#跳过指定的校验方法" class="headerlink" title="跳过指定的校验方法"></a>跳过指定的校验方法</h5><p>&emsp;&emsp;如果想跳过某个Action方法的校验,在不需要校验的Action方法上加入@SkipValidation<br>&emsp;&emsp;我们都知道，一个Action中可以存在多个请求处理方法，不同的请求处理方法应该有不同的校验逻辑，所以我们应该为每个请求处理方法提供自己独有的校验方法。而validate()方法是所有请求处理方法公共的校验方法。</p><h5 id="指定校验某个方法"><a href="#指定校验某个方法" class="headerlink" title="指定校验某个方法"></a>指定校验某个方法</h5><ul><li>public的，没有返回值，没有参数（public void xxx()）；</li><li>方法名称前缀为validate（public void validateXxx()）；</li><li>方法名后缀必须与请求处理方法名相同，例如请求处理方法为login()，那么它的私有校验方法为：public validateLogin()。<br><strong>注意，</strong>私有校验方法会在公共校验方法（validate()）之前被调用。如果你要为execute()提供私有校验方法，那么这个方法名为validateExecute()。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validateLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"validateLogin()..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validateRegist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"validateRegist()..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"validate()..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"login()"</span>);</span><br><span class="line"><span class="keyword">return</span> NONE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">regist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"regist()"</span>);</span><br><span class="line"><span class="keyword">return</span> NONE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="xml配置方式校验（了解）"><a href="#xml配置方式校验（了解）" class="headerlink" title="xml配置方式校验（了解）"></a>xml配置方式校验（了解）</h4><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>&emsp;&emsp;struts提供拦截器，对action类进行增强的。struts已经实现多个拦截器，完成不同的功能。<br>例如：文件上传、数据校验、类型转换、参数封装等</p><h3 id="默认拦截器栈"><a href="#默认拦截器栈" class="headerlink" title="默认拦截器栈"></a>默认拦截器栈</h3><p>&emsp;&emsp;struts-default.xml提供struts所有拦截器，也提供默认拦截器栈</p><ul><li><code>&lt;default-interceptor-ref name=&quot;defaultStack&quot;/&gt;</code> 所有的action默认使用那个拦截器栈</li><li><code>&lt;interceptor-stack name=&quot;defaultStack&quot;&gt;</code>声明一个拦截器栈，名称为“defaultStack”，通常称为：默认拦截器栈</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"exception"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"alias"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"servletConfig"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用于给action类注入Servlet api。</span></span><br><span class="line"><span class="comment">    例如：action类实现ServletRequestAware就可以被struts框架注入HttpServletRequest对象</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"i18n"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"prepare"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"chain"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"scopedModelDriven"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"modelDriven"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 调用action类的getModel()方法，获得javabean实例，如果没为null，将交予struts。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"fileUpload"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- struts默认支持文件上传 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"checkbox"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"multiselect"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"staticParams"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"actionMappingParams"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"params"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 给action类进行数据封装。如果使用ModelDriven，就给javabean封装数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"excludeParams"</span>&gt;</span>dojo\..*,^struts\..*,^session\..*,^request\..*,^application\..*,^servlet(Request|Response)\..*,parameters\...*<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"conversionError"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将转换错误添加到action类的错误提示信息中。</span></span><br><span class="line"><span class="comment">将执行 action.addFieldError("属性","错误提示"); </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"validation"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将执行action所有校验。先执行注解校验，再执行单个方法校验，最后所有方法的校验 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"excludeMethods"</span>&gt;</span>input,back,cancel,browse<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"workflow"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 从action类获得添加的错误信息，如果没有发行。如果有返回“input” </span></span><br><span class="line"><span class="comment">   方式1：默认情况，如果存在错误，返回值“input”</span></span><br><span class="line"><span class="comment">   方式2：实现接口ValidationWorkflowAware，修改整个action的错误返回结果集名称，将执行方法 getInputResultName()</span></span><br><span class="line"><span class="comment">   方式3：通过@InputConfig注解，给指定的方法配置出现错误时，返回结果result的名称。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"excludeMethods"</span>&gt;</span>input,back,cancel,browse<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"debugging"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关于workflow拦截器的补充：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法2：实现ValidationWorkflowAware接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo8Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ValidationWorkflowAware</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getInputResultName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"xxx"</span>;<span class="comment">//出现错误不再返回input,而是xxx,所有的方法都使用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法3：通过@InputConfig注解</span></span><br><span class="line">    <span class="meta">@InputConfig</span>(resultName=<span class="string">"loginInput"</span>)<span class="comment">//如果登录出现异常，将返回不是input，而是loginInput</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@InputConfig</span>(resultName=<span class="string">"registerInput"</span>) <span class="comment">//如果注册出现异常，将返回不是input，而是registerInput</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h3><ul><li><p>实现接口：com.opensymphony.xwork2.interceptor.Interceptor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"><span class="comment">//拦截方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">intercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">invocation.getAction() 获得当前action类实例</span><br><span class="line">invacation.invoke()放行</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;  &#125;</span><br></pre></td></tr></table></figure></li><li><p>继承父类：com.opensymphony.xwork2.interceptor.MethodFilterInterceptor<br>  在使用自定义拦截器，可以对指定的方法进行操作（哪些方法不拦截，哪些必须拦截）<br>  设置属性includeMethods，确定哪些方法进行拦截<br>  设置属性excludeMethods，确定哪些方法不进行拦截</p></li><li><p><code>&lt;default-interceptor-ref name=&quot;xxx&quot;&gt;</code>将指定的拦截器，声明成默认的。<br>  注意：如果使用自定义xxx，“defaultStack”将被覆盖。<br>  注意：拦截器只拦截action类，不拦截jsp文件。</p></li></ul><h3 id="表单参数校验"><a href="#表单参数校验" class="headerlink" title="表单参数校验"></a>表单参数校验</h3><ul><li><p>校验流程:</p><pre><code>&amp;emsp;&amp;emsp;Validation拦截器负责判断Action是否实现Validateable接口.如果实现就调用validate方法.&amp;emsp;&amp;emsp;workflow拦截器判断Action是否实现ValidationAware接口. 如果实现就会判断Action中是否包含错误信息.如果包含错误信息, 停止拦截器递归调用,返回结果到名为input的结果页面中.</code></pre></li><li><p>编程式校验</p><pre><code>&amp;emsp;&amp;emsp;实现Validateable接口.接口中只有一个方法validate方法.我们可以在该方法中添加错误信息.&amp;emsp;&amp;emsp;添加错误信息需要实现ValidationAware接口.该接口中有一些判断是否含有错误消息.获得错误消息.添加错误消息的方法.</code></pre></li></ul><p>#未完待续</p>]]></content>
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Struts2，ssh </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hinernate学习笔记</title>
      <link href="/2018/07/23/Hinernate%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/07/23/Hinernate%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p> hibernate</p><h1 id="Hibernate初印象"><a href="#Hibernate初印象" class="headerlink" title="Hibernate初印象"></a>Hibernate初印象</h1><p>ssh执行的基本流程<br><img src="/images/ssh执行的基本流程.png" alt="ssh执行的基本流程"></p><a id="more"></a><p>hibernate执行的基本流程<br><img src="/images/hibernate%E6%89%A7%E8%A1%8C%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.png" alt="hibernate执行的基本流程"></p><h2 id="准备文件"><a href="#准备文件" class="headerlink" title="准备文件"></a>准备文件</h2><p><strong>&emsp;download from hibernate.org:</strong><br>&emsp;&emsp; hibernate-annotation-3.4.0.GA.zip<br>&emsp;&emsp;  hibernate-distrubution-3.3.2.GA-dist.zip<br>&emsp;&emsp;  slf4j-1.5.8.zip</p><h1 id="暂停，先学mybatis"><a href="#暂停，先学mybatis" class="headerlink" title="暂停，先学mybatis"></a>暂停，先学mybatis</h1>]]></content>
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh框架学习 hibernate </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>markdown学习与文档</title>
      <link href="/2018/07/22/artical-title/"/>
      <url>/2018/07/22/artical-title/</url>
      <content type="html"><![CDATA[<h1 id="第一篇markdown文档"><a href="#第一篇markdown文档" class="headerlink" title="第一篇markdown文档"></a>第一篇markdown文档</h1><h2 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h2><a id="more"></a><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><h1 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h1><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><hr><blockquote><p>区块引用1</p><blockquote><p>区块引用2</p><blockquote><p>区块引用3 </p></blockquote></blockquote></blockquote><hr><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul><li>1 </li><li>2</li><li>3</li></ul><ul><li>1</li><li>2</li><li>3</li></ul><hr><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ol><li>1</li><li>2</li><li>2 </li><li>1 </li><li>2  </li></ol><hr><p>分割线</p><hr><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><pre><code>*   //两个tap代码块/8个空格+字符         int i = 0;         int j =i;*          </code></pre><hr><p>行<a href="https://" target="_blank" rel="noopener">内</a>链接</p><hr><p>行内<a href="http://www.baidu.com" title="参考式内容1" target="_blank" rel="noopener">参</a>考式1</p><hr><p>行内<a href="http://www.baidu.com" title="参考式内容2" target="_blank" rel="noopener">参考</a>式2</p><hr><p><em>强调1</em><br><em>强调2</em><br><strong>强调3</strong></p><hr><p>句内代码 <code>aa</code>块<br>Use the <code>printf()</code> function.</p><hr><p><img src="d:/1.jpg" alt="图片"></p><hr><p><a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a><br>普通连接</p><hr><p> 转义符<br>*<br>></p><hr><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><table><thead><tr><th style="text-align:right">列1（右对齐）</th><th style="text-align:center">列2（居中）</th><th style="text-align:left">列3（左对齐）</th></tr></thead><tbody><tr><td style="text-align:right"> A</td><td style="text-align:center">B</td><td style="text-align:left">C</td></tr><tr><td style="text-align:right"> D</td><td style="text-align:center">E</td><td style="text-align:left">F </td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> TestDoc </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/07/22/hello-world/"/>
      <url>/2018/07/22/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>

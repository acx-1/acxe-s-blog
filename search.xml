<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Spring学习笔记</title>
      <link href="/2018/07/30/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/07/30/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote><p>Tips:本笔记主要信息来源为传智播客的《<a href="https://www.bilibili.com/video/av14839030/" target="_blank" rel="noopener">60集精通java教程Spring框架开发</a>》,笔记内容为：学习资料 + 个人补充；如有内容或排版方面的错误，欢迎纠正~</p></blockquote><a id="more"></a><hr><p><strong> 内容分布</strong></p><ol><li>spring概念和ioc入门（ioc操作xml配置文件）</li><li>spring的ioc操作（注解）和aop概念</li><li>jdbcTemplate和spring管理事务</li><li>ssh框架整合<a href="qqqqq">开发</a></li></ol><hr><h1 id="Spring概念与IOC入门"><a href="#Spring概念与IOC入门" class="headerlink" title="Spring概念与IOC入门"></a>Spring概念与IOC入门</h1><h2 id="Spring概念"><a href="#Spring概念" class="headerlink" title="Spring概念"></a>Spring概念</h2><ol><li><p>Spring是开源的轻量级框架</p></li><li><p>Spring的核心包括两个部分<br>&emsp;&emsp;-aop：面向切面编程，扩展功能不是修改源代码实现<br>&emsp;&emsp;-ioc：控制反转<br>&emsp;&emsp;&emsp;&emsp;- 比如有一个类，在类里面有方法（不是静态的方法），调用类里面的方法，创建类的对象，使用对象调用方法，创建类对象的过程，需要new出来对象。在这里，对象的创建不是通过new方式实现，而是交给spring配置创建类对象</p></li><li><p>spring是一站式框架<br>&emsp;&emsp;spring在javaee三层结构中，每一层都提供不同的解决技术<br>&emsp;&emsp;&emsp;&emsp;- web层：springMVC<br>&emsp;&emsp;&emsp;&emsp;- service层：spring的ioc<br>&emsp;&emsp;&emsp;&emsp;- dao层：spring的jdbcTemplate</p></li><li><p>Spring的版本<br>&emsp;&emsp;-hibernate：5.x<br>&emsp;&emsp;-Spring4.x（这里学习的版本）</p></li></ol><h2 id="Spring的ioc操作"><a href="#Spring的ioc操作" class="headerlink" title="Spring的ioc操作"></a>Spring的ioc操作</h2><ol><li>把对象的创建交给spring进行管理</li><li>ioc操作两部分：<br>1）ioc的配置文件方式<br>2）ioc的注解方式</li></ol><h3 id="IOC底层原理"><a href="#IOC底层原理" class="headerlink" title="IOC底层原理"></a>IOC底层原理</h3><ol><li><p>ioc底层原理使用技术<br>（1）xml配置文件<br>（2）dom4j解决xml<br>（3）工厂设计模式<br>（4）反射</p></li><li><p>画图分析ioc实现原理</p></li></ol><p><img src="/images/Spring/1.1.png" alt="1.1"><br><img src="/images/Spring/1.2.png" alt="1.2"></p><h3 id="IOC和DI区别"><a href="#IOC和DI区别" class="headerlink" title="IOC和DI区别"></a>IOC和DI区别</h3><ol><li>IOC: 控制反转，把对象创建交给spring进行配置</li><li>DI: 依赖注入，向类里面的属性中设置值</li><li>关系：依赖注入不能单独存在，需要在ioc基础之上完成操作</li></ol><h2 id="Spring整合web项目原理"><a href="#Spring整合web项目原理" class="headerlink" title="Spring整合web项目原理"></a>Spring整合web项目原理</h2><h3 id="Spring整合web项目原理-1"><a href="#Spring整合web项目原理-1" class="headerlink" title="Spring整合web项目原理"></a>Spring整合web项目原理</h3><ol><li><p>加载spring核心配置文件<br><code>ApplicationContext context = new ClasssPathXmlApplicationContext(&quot;xml路径&quot;)</code>//new 对象;的方法，功能可以实现，效率很低</p></li><li><p>实现思想：把加载配置文件和创建对象过程，在服务器启动时候完成</p></li><li><p>实现原理<br>（1）ServletContext对象<br>（2）监听器<br>（3）具体使用：</p><ul><li>在服务器启动时候，为每个项目创建一个ServletContext对象</li><li>在ServletContext对象创建时候，使用监听器可以具体到ServletContext对象在什么时候创建</li><li>使用监听器监听到ServletContext对象创建时候，<ul><li>加载spring配置文件，把配置文件配置对象创建</li><li>把创建出来的对象放到ServletContext域对象里面（setAttribute方法）</li></ul></li><li>获取对象时候，到ServletContext域得到（getAttribute方法）</li></ul></li></ol><h3 id="Spring整合web项目演示"><a href="#Spring整合web项目演示" class="headerlink" title="Spring整合web项目演示"></a>Spring整合web项目演示</h3><ol><li><p>导包</p><ul><li>struts2相关jar包：<br><img src="../images/Spring/struts2%E7%9B%B8%E5%85%B3jar%E5%8C%85.png" alt="struts2相关jar包"></li><li>Spring相关jar包<br><img src="../images/Spring/Spring%E7%9B%B8%E5%85%B3jar%E5%8C%85.png" alt="Spring相关jar包"></li><li>Spring-web整合包:<br>Spring-web-3.0.7.jar(myeclipse2015可支持的最高版本)</li></ul></li><li><p>代码实现之准备部分</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---UserService.java---</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"service........"</span>);</span><br><span class="line">userDao.add();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> UserDao <span class="title">getUserDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userDao;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---UserDao.java---</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"dao........"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>代码实现之Spring与struts2配置文件   </li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!------ applicationContext.xml ------&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置userDao和userService --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.pinzhi.dao.UserDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.pinzhi.service.UserService"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!------ struts.xml------&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"spring_web"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"userAction"</span> <span class="attr">class</span>=<span class="string">"cn.pinzhi.action.UserAction"</span>  <span class="attr">method</span>=<span class="string">"execute"</span>&gt;</span><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>代码实现之spring与struts2的整合</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------web.xml------</span></span><br><span class="line">&lt;web-app xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> xsi:schemaLocation=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> id=<span class="string">"WebApp_ID"</span> version=<span class="string">"2.5"</span>&gt;</span><br><span class="line">  &lt;display-name&gt;spring_web&lt;/display-name&gt;</span><br><span class="line">  &lt;!-- 重要：配置struts2的核心过滤器 --&gt;</span><br><span class="line">  &lt;!--配置struts2的过滤器，要放到其他过滤器后面，保证其他过滤器可以执行  --&gt;</span><br><span class="line">  &lt;filter&gt;</span><br><span class="line">&lt;filter-name&gt;struts2&lt;/filter-name&gt;</span><br><span class="line">&lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">apache</span>.<span class="title">struts2</span>.<span class="title">dispatcher</span>.<span class="title">ng</span>.<span class="title">filter</span>.<span class="title">StrutsPrepareAndExecuteFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">struts2</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;!-- 指定<span class="title">Spring</span>配置文件的位置 --&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">context</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">contextConfigLocation</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line">  &lt;param-value&gt;classpath:bean2.xml&lt;/param-value&gt;</span><br><span class="line">  &lt;/context-param&gt;</span><br><span class="line"> &lt;listener&gt;</span><br><span class="line"> &lt;listener-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">context</span>.<span class="title">ContextLoaderListener</span>&lt;/<span class="title">listener</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class"> &lt;/<span class="title">listener</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">web</span>-<span class="title">app</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//-----<span class="title">UserAction</span>.<span class="title">java</span>----</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"action...."</span>);</span><br><span class="line">ApplicationContext ctx = WebApplicationContextUtils.getWebApplicationContext(ServletActionContext.getServletContext());</span><br><span class="line">UserService userService = (UserService)ctx.getBean(<span class="string">"userService"</span>);</span><br><span class="line">userService.add();</span><br><span class="line"><span class="keyword">return</span> NONE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>验证<br>通过访问 localhost:8080\项目名\UserAction.action 验证 </li></ol><h1 id="Spring的bean管理（xml）"><a href="#Spring的bean管理（xml）" class="headerlink" title="Spring的bean管理（xml）"></a>Spring的bean管理（xml）</h1><h2 id="bean实例化的方式"><a href="#bean实例化的方式" class="headerlink" title="bean实例化的方式"></a>bean实例化的方式</h2><p>&emsp;&emsp;在Spring中通过配置文件创建对象</p><ul><li><p>bean实例化的三种方式</p><p>&emsp;&emsp;&emsp;1.使用类的无参构造方法创建（重点）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   若类中没有无参构造方法，会出现异常。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">“user”</span> <span class="attr">class</span>=<span class="string">“cn.itcast.ioc.User”</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;&emsp;2.使用静态工厂创建</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//创建静态的方法，返回类对象</span></span><br><span class="line"> <span class="comment">//Bean2Factory.java</span></span><br><span class="line">      <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean2Factory</span></span>&#123;</span><br><span class="line">      <span class="comment">//静态的方法，返回Bean2对象</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bean2 <span class="title">getBean2</span><span class="params">()</span></span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">new</span> Bean2();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//applicationContext.xml</span></span><br><span class="line">      &lt;!--  使用静态工厂创建对象 --&gt;</span><br><span class="line">      &lt;bean id=“bean2” class=“cn.itcast.bean.Bean2Factory” factory-method=“getBean2”&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;&emsp;3.使用实例工厂创建</p>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// Bean3Factory.java</span></span><br><span class="line"><span class="comment">//创建非静态方法，返回类对象</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean3Factory</span></span>&#123;</span><br><span class="line">        <span class="comment">//普通的方法，返回Bean3对象</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Bean3 <span class="title">getBean3</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Bean3();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//applicationContext.xml</span></span><br><span class="line">&lt;!-- 使用实例工厂创建对象--&gt;</span><br><span class="line">&lt;bean id="bean3Factory" class="cn.itcast.bean.Bean3Factory"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean id="bean3" factory-bean="bean3Factory" factory-method="getBean3"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="Bean标签常用属性"><a href="#Bean标签常用属性" class="headerlink" title="Bean标签常用属性"></a>Bean标签常用属性</h3><ol><li>id属性：起名称，id属性值名称任意命名<ul><li>id属性值，不能包含特殊符号</li><li>根据id值得到配置对象</li></ul></li><li>class属性：创建对象所在类的全路径</li><li><p>name属性：功能和id属性一样的，id属性值不能包含特殊符号，但是在name属性值里面可以包含特殊符号</p></li><li><p>scope属性</p><ul><li>singleton：默认值，单例  </li><li>prototype：多例</li><li>request：创建对象把对象放到request域里面</li><li>session：创建对象把对象放到session域里面</li><li>globalSession：创建对象把对象放到globalSession里面</li></ul></li></ol><h1 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h1><h2 id="属性注入介绍"><a href="#属性注入介绍" class="headerlink" title="属性注入介绍"></a>属性注入介绍</h2><p>&emsp;&emsp;创建对象时候，向类里面属性里面设置值</p><h2 id="属性注入的方式的三种方式"><a href="#属性注入的方式的三种方式" class="headerlink" title="属性注入的方式的三种方式"></a>属性注入的方式的三种方式</h2><ol><li>使用set方法注入(重点)</li><li>使用有参数构造注入</li><li><p>使用接口注入<br>!  在spring框架里面，支持前两种方式</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//使用有参数构造注入属性</span></span><br><span class="line">&lt;!-- 第一种：构造方法的方式 --&gt; </span><br><span class="line">&lt;bean id=<span class="string">"car"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.itcast.spring.demo4.Car"</span>&gt; </span><br><span class="line">        &lt;constructor-arg name=<span class="string">"name"</span> value=<span class="string">" 保 时 捷 "</span>/&gt;  </span><br><span class="line">        &lt;constructor-arg name="price" value="1000000"/&gt; &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------</span></span><br><span class="line"><span class="comment">//使用set方法注入属性（重点）</span></span><br><span class="line">&lt;!-- 第二种：set方法的方式 --&gt;</span><br><span class="line"> &lt;bean id=<span class="string">"car2"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.itcast.spring.demo4.Car2"</span>&gt;</span><br><span class="line">          &lt;property name=<span class="string">"name"</span> value=<span class="string">" 奇 瑞 QQ"</span>/&gt;</span><br><span class="line">           &lt;property name=<span class="string">"price"</span> value=<span class="string">"40000"</span>/&gt; </span><br><span class="line">   &lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="注入对象类型属性（重点）"><a href="#注入对象类型属性（重点）" class="headerlink" title="注入对象类型属性（重点）"></a>注入对象类型属性（重点）</h2><ul><li>具体实现过程<br>（1）在service里面把dao作为类型属性<br>（2）生成dao类型属性的set方法<br>（3）配置文件中注入关系</li></ul><p>相关代码：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">  <span class="comment">//定义一个service类，dao类为类的属性</span></span><br><span class="line">  <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">  <span class="comment">//在service类中包含dao属性的set方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao=userDao;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------------------------</span></span><br><span class="line">&lt;bean id=<span class="string">"userDao"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.itcast.dao.UserDao"</span> /&gt;</span><br><span class="line">&lt;!-- 注入对象类型的属性 --&gt;</span><br><span class="line"> &lt;bean id=<span class="string">"person"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.itcast.spring.demo4.Person"</span>&gt;</span><br><span class="line">      &lt;property name=<span class="string">"name"</span> value=<span class="string">" 会 希 "</span>/&gt; </span><br><span class="line">      &lt;!-- ref属性：引用另一个 bean的id或name --&gt; </span><br><span class="line">      &lt;property name=<span class="string">"car2"</span> ref=<span class="string">"car2"</span>/&gt; </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h2 id="P名称空间注入-Spring2-x-版本后提供的方式"><a href="#P名称空间注入-Spring2-x-版本后提供的方式" class="headerlink" title="P名称空间注入(Spring2.x 版本后提供的方式)"></a>P名称空间注入(Spring2.x 版本后提供的方式)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一步:引入p名称空间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第二步:使用p名称空间.</span></span><br><span class="line"><span class="comment">        * 普通属性: p:属性名称=””</span></span><br><span class="line"><span class="comment">        * 对象类型属性: p:属性名称-ref=””</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- p名称空间的属性注入的方式 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car2"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.demo4.Car2"</span> <span class="attr">p:name</span>=<span class="string">" 宝 马 7"</span> <span class="attr">p:price</span>=<span class="string">"1200000"</span>/&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.demo4.Person"</span> <span class="attr">p:name</span>=<span class="string">" 思 聪 "</span> <span class="attr">p:car2-ref</span>=<span class="string">"car2"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpEL-的方式的属性注入-Spring3-x-版本后提供的方式"><a href="#SpEL-的方式的属性注入-Spring3-x-版本后提供的方式" class="headerlink" title="SpEL 的方式的属性注入(Spring3.x 版本后提供的方式)"></a>SpEL 的方式的属性注入(Spring3.x 版本后提供的方式)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpEL：Spring Expression Language. </span></span><br><span class="line"><span class="comment">  语法:#&#123; SpEL &#125;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SpEL的注入的方式 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car2"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.demo4.Car2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#&#123;' 奔 驰 '&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"#&#123;800000&#125;"</span>/&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.demo4.Person"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#&#123;'冠希'&#125;"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"car2"</span> <span class="attr">value</span>=<span class="string">"#&#123;car2&#125;"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"carInfo"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.demo4.CarInfo"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引用了另一个类的属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car2"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.demo4.Car2"</span>&gt;</span> <span class="comment">&lt;!-- &lt;property name="name" value="#&#123;'奔驰'&#125;"/&gt; --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#&#123;carInfo.carName&#125;"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"#&#123;carInfo.calculatePrice()&#125;"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注入复杂类型属性"><a href="#注入复杂类型属性" class="headerlink" title="注入复杂类型属性"></a>注入复杂类型属性</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring 的复杂类型的注入===================== --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"collectionBean"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.demo5.CollectionBean"</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 数组类型的属性 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arrs"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>会希<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>冠希<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>天一<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入List集合的数据 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>芙蓉<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>如花<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>凤姐<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入Map集合 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"aaa"</span> <span class="attr">value</span>=<span class="string">"111"</span>/&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"bbb"</span> <span class="attr">value</span>=<span class="string">"222"</span>/&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ccc"</span> <span class="attr">value</span>=<span class="string">"333"</span>/&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Properties 的注入 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">props</span>&gt;</span> </span><br><span class="line">             <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span> </span><br><span class="line">             <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Spring的Bean管理（注解）"><a href="#Spring的Bean管理（注解）" class="headerlink" title="Spring的Bean管理（注解）"></a>Spring的Bean管理（注解）</h1><p><strong>注解介绍：</strong></p><ol><li>代码里面特殊标记，使用注解可以完成功能</li><li>注解写法 @注解名称(属性名称=属性值)</li><li>注解使用在类上面，方法上面 和 属性上面</li></ol><h2 id="Spring注解开发准备"><a href="#Spring注解开发准备" class="headerlink" title="Spring注解开发准备"></a>Spring注解开发准备</h2><ol><li><p>导入jar包</p><ul><li><p>基本的jar包<br><img src="/images/Spring/4.1.png" alt="4.1"></p></li><li><p>aop的jar包:Spring-aop-4.3.4.RELEASE.jar</p></li></ul></li><li><p>创建类，创建方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        System.out.println(<span class="string">"Hello Spring..."</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建spring配置文件，引入约束<br>（1）第一天做ioc基本功能，引入约束beans<br>（2）做spring的ioc注解开发，引入新的约束<br><img src="/images/Spring/4.2.png" alt="4.2"></p></li></ol><ol start="4"><li>开启注解扫描<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring 的注解开发:组件扫描(类上注解: 可以直接使用属性注入的注解) --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.itheima.spring.demo1"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="注解创建对象"><a href="#注解创建对象" class="headerlink" title="注解创建对象"></a>注解创建对象</h2><ol><li><p>在创建对象的类上面使用注解实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过注解注册Bean</span></span><br><span class="line"><span class="meta">@Component</span>(value=<span class="string">"userDao"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Hello Spring Annotation..."</span>); </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试方法中获取bean对象</span></span><br><span class="line"><span class="meta">@Test</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext( <span class="string">"applicationContext.xml"</span>); </span><br><span class="line">    UserDao userDao = (UserDao) applicationContext.getBean(<span class="string">"userDao"</span>); userDao.sayHello(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建对象有四个注解（目前这四个注解功能是一样的，都创建对象）<br>（1）@Component<br>（2）@Controller：web层<br>（3）@Service：业务层<br>（4）@Repository：持久层</p></li></ol><p>！ 指定创建对象单实例还是多实例的方法<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注解的方式</span></span><br><span class="line"><span class="meta">@Service</span>(value=<span class="string">"user"</span>)<span class="comment">//注解bean对象</span></span><br><span class="line"><span class="meta">@Scope</span>(value=<span class="string">"prototype"</span>)<span class="comment">//指定对象是多例，默认是单例：Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置文件的方式</span></span><br><span class="line">&lt;bean id="" class="" scope="singleton"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><h2 id="注解注入属性-使用注解注入的方式-可以不用提供-set-方法"><a href="#注解注入属性-使用注解注入的方式-可以不用提供-set-方法" class="headerlink" title="注解注入属性:(使用注解注入的方式,可以不用提供 set 方法.)"></a>注解注入属性:(使用注解注入的方式,可以不用提供 set 方法.)</h2><ul><li>@Value :用于注入普通类型.</li><li>@Autowired :自动装配: * 默认按类型进行装配. <ul><li>按名称注入: </li><li>@Qualifier:强制使用名称注入.</li></ul></li><li>@Resource相当于:  <ul><li>@Autowired和@Qualifier一起使用.</li></ul></li></ul><p><strong>示例：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建dao和service对象</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"userDao"</span>)<span class="comment">//value值可以省略</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)<span class="comment">//目前功能与Component相同</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span><span class="comment">//根据类名自动匹配属性</span></span><br><span class="line">  <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">  <span class="meta">@Resource</span>(name=<span class="string">"userDao"</span>)<span class="comment">//通过bean名字匹配属性</span></span><br><span class="line">  <span class="keyword">private</span> UserDao userDao2;</span><br></pre></td></tr></table></figure></p><h2 id="配置文件和注解混合使用"><a href="#配置文件和注解混合使用" class="headerlink" title="配置文件和注解混合使用"></a>配置文件和注解混合使用</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//使用配置文件方式实现创建对象操作</span><br><span class="line"><span class="comment">&lt;!-- 配置对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookDao"</span> <span class="attr">class</span>=<span class="string">"xxx.xx.xxx.bookDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookService"</span> <span class="attr">class</span>=<span class="string">"xx.xx.xx.BookService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//使用注解方式注入属性</span><br><span class="line">public class BookService&#123;</span><br><span class="line">  @Resource(name="bookDao")</span><br><span class="line">  private BookDao bookDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><h2 id="AOP相关概念"><a href="#AOP相关概念" class="headerlink" title="AOP相关概念"></a>AOP相关概念</h2><ol><li>AOP：面向切面（方面）编程，在不修改源码的情况下扩展功能</li><li>AOP采取横向抽取机制，取代了传统纵向继承体系重复性代码</li><li>AOP底层使用动态代理实现<ul><li>第一种情况，有接口情况，（JDK 的动态代理 ）使用动态代理创建接口实现类代理对象</li><li>第二种情况，没有接口情况，（ Cglib 的动态代理）使用动态代理创建类的子类代理对象</li></ul></li></ol><h2 id="AOP原理"><a href="#AOP原理" class="headerlink" title="AOP原理"></a>AOP原理</h2><p><img src="/images/Spring/5.1.png" alt="5.1"><br><img src="/images/Spring/5.2.png" alt="5.2"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Cglib 动态代理增强一个类中的方法:</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CustomerDao customerDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCglibProxy</span><span class="params">(CustomerDao customerDao)</span></span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.customerDao = customerDao;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">// 生成代理的方法: </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CustomerDao <span class="title">createProxy</span><span class="params">()</span></span>&#123; </span><br><span class="line">        <span class="comment">// 创建Cglib的核心类: </span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer(); <span class="comment">// 设置父类:</span></span><br><span class="line">         enhancer.setSuperclass(CustomerDao.class); <span class="comment">// 设置回调: </span></span><br><span class="line">         enhancer.setCallback(<span class="keyword">this</span>); <span class="comment">// 生成代理：</span></span><br><span class="line">        CustomerDao customerDaoProxy = (CustomerDao) enhancer.create(); </span><br><span class="line">        <span class="keyword">return</span> customerDaoProxy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"delete"</span>.equals(method.getName()))&#123; </span><br><span class="line">            Object obj = methodProxy.invokeSuper(proxy, args); </span><br><span class="line">            System.out.println(<span class="string">"日志记录================"</span>); </span><br><span class="line">            <span class="keyword">return</span> obj; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> methodProxy.invokeSuper(proxy, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-的基于-AspectJ-的-AOP-开发"><a href="#Spring-的基于-AspectJ-的-AOP-开发" class="headerlink" title="Spring 的基于 AspectJ 的 AOP 开发"></a>Spring 的基于 AspectJ 的 AOP 开发</h2><ul><li><p>在spring里面进行aop操作，使用aspectj实现<br> （1）aspectj不是spring一部分，和spring一起使用进行aop操作<br> （2）Spring2.0以后新增了对AspectJ支持</p></li><li><p>使用aspectj实现aop有两种方式<br>（1）基于aspectj的xml配置<br>（2）基于aspectj的注解方式</p></li></ul><h3 id="AOP操作术语"><a href="#AOP操作术语" class="headerlink" title="AOP操作术语"></a>AOP操作术语</h3><ol><li>Joinpoint(连接点): 类里面可以被增强的方法，这些方法称为连接点</li><li>Pointcut(切入点):所谓切入点是指我们要对哪些Joinpoint进行拦截的定义.</li><li>Advice(通知/增强):所谓通知是指拦截到Joinpoint之后所要做的事情就是通知.<br>通知分为:前置通知；后置通知；异常通知；最终通知；环绕通知(切面要完成的功能)</li><li>Aspect(切面): 是切入点和通知（引介）的结合</li><li>Introduction(引介):引介是一种特殊的通知在不修改类代码的前提下, Introduction可以在运行期为类动态地添加一些方法或Field.</li><li>Target(目标对象):代理的目标对象(要增强的类)</li><li>Weaving(织入):是把增强应用到目标的过程.把advice 应用到 target的过程</li><li>Proxy（代理）:一个类被AOP织入增强后，就产生一个结果代理类</li></ol><h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><p>&emsp;切入点，即实际增强的方法</p><ul><li>表达式格式为<br>execution(&lt;访问修饰符&gt;?&lt;返回类型&gt;&lt;方法名&gt;(&lt;参数&gt;)&lt;异常&gt;)<br>（1）execution(<em> cn.itcast.aop.Book.add(..))<br>（2）execution(</em> cn.itcast.aop.Book.<em>(..))<br>（3）execution(</em> <em>.</em>(..))<br>（4） 匹配所有save开头的方法 execution(<em> save</em>(..))</li></ul><h3 id="Spring-使用-AspectJ-进行-AOP-的开发：XML-的方式（-）"><a href="#Spring-使用-AspectJ-进行-AOP-的开发：XML-的方式（-）" class="headerlink" title="Spring 使用 AspectJ 进行 AOP 的开发：XML 的方式（*）"></a>Spring 使用 AspectJ 进行 AOP 的开发：XML 的方式（<strong>*</strong>）</h3><ol><li><p>导包<br>&emsp;除了导入基本的jar包之外，还需要导入aop相关的jar包<br><img src="/images/Spring/5.3.png" alt="5.3"></p></li><li><p>创建配置文件，导入aop约束</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写切面类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspectXml</span> </span>&#123; </span><br><span class="line">  <span class="comment">// 定义前置增强方法 </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123; </span><br><span class="line">      System.out.println(<span class="string">"前置增强==========="</span>); </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="comment">// 定义后置增强方法 </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodName</span><span class="params">()</span></span>&#123; </span><br><span class="line">      System.out.println(<span class="string">"后置增强==========="</span>); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置切入点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置切面类 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAspectXml"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.demo3.MyAspectXml"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 进行 aop的配置 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 配置切入点表达式:哪些类的哪些方法需要进行增强 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.itcast.spring.demo3.OrderDao.*(..))"</span> <span class="attr">id</span>=<span class="string">"pointcut1"</span>/&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 配置切面 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myAspectXml"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"methodName"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut1"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写测试程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOrderDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取applicationContext</span></span><br><span class="line">ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean2.xml"</span>);</span><br><span class="line"><span class="comment">//使用接口类取得Bean</span></span><br><span class="line">OrderDao orderDao = (OrderDao)ctx.getBean(<span class="string">"orderDao"</span>);</span><br><span class="line">orderDao.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>#To be continue…</p><hr>]]></content>
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> ssh </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mybatis学习笔记</title>
      <link href="/2018/07/25/mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/07/25/mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote><p>Tips：本笔记的内容主要来自传智播客mybatis学习视频的相关资料，以及一些实操后的补充。如有内容或排版方面的错误，欢迎纠正~篇幅较长，建议结合目录阅读</p></blockquote><h1 id="Mybatis是什么？"><a href="#Mybatis是什么？" class="headerlink" title="Mybatis是什么？"></a>Mybatis是什么？</h1><p>&emsp;&emsp;    MyBatis 本是<a href="http://baike.baidu.com/view/28283.htm" target="_blank" rel="noopener">apache</a>的一个开源项目<a href="http://baike.baidu.com/view/628102.htm" target="_blank" rel="noopener">iBatis</a>, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis，实质上Mybatis对ibatis进行一些改进。<br>&emsp;&emsp;    MyBatis是一个优秀的持久层框架，它对jdbc的操作数据库的过程进行封装，使开发者只需要关注 SQL 本身，而不需要花费精力去处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等jdbc繁杂的过程代码。<br><a id="more"></a><br>&emsp;&emsp;    Mybatis通过xml或注解的方式将要执行的各种statement（statement、preparedStatemnt、CallableStatement）配置起来，并通过java对象和statement中的sql进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射成java对象并返回。</p><h1 id="分析原生态jdbc程序中存在的问题"><a href="#分析原生态jdbc程序中存在的问题" class="headerlink" title="分析原生态jdbc程序中存在的问题"></a>分析原生态jdbc程序中存在的问题</h1><h2 id="原生态Jdbc程序代码"><a href="#原生态Jdbc程序代码" class="headerlink" title="原生态Jdbc程序代码"></a>原生态Jdbc程序代码</h2><pre><code>//原生态Jdbc程序代码public static void** main(String[] args) {    Connection connection = null;    PreparedStatement preparedStatement = null;    ResultSet resultSet = **null**;    try{        //1、加载数据库驱动       Class.forName(&quot;com.mysql.jdbc.Driver&quot;);        //2、通过驱动管理类获取数据库链接       connection =DriverManager._getConnection_(&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8&quot;, &quot;root&quot;, &quot;root&quot;);       //3、定义sql语句 ?表示占位符       String sql = &quot;select * from user where username = ?&quot;;           //4、获取预处理statement           preparedStatement = connection.prepareStatement(sql);            //5、设置参数，第一个参数为sql语句中参数的序号（从1开始），第二个参数为设置的参数值           preparedStatement.setString(1, &quot;王五&quot;);            //6、向数据库发出sql执行查询，查询出结果集           resultSet = preparedStatement.executeQuery();           //7、遍历查询结果集            while(resultSet.next()){                                      System._out_.println(resultSet.getString(&quot;id&quot;)+&quot;&quot;+resultSet.getString(&quot;username&quot;));           }       } catch(Exception e) {             e.printStackTrace();       }finally{            //8、释放资源            if(resultSet!=null){               try{                   resultSet.close();                } catch(SQLException e) {                   e.printStackTrace();               }           }            if(preparedStatement!=null){              try {                 preparedStatement.close();               } catch(SQLException e) {                      e.printStackTrace();               }             }            if(connection!=null){                try{                   connection.close();                 } catch (SQLException e) {                     e.printStackTrace();                 }             }       }    }</code></pre><h2 id="Jdbc问题总结"><a href="#Jdbc问题总结" class="headerlink" title="Jdbc问题总结"></a>Jdbc问题总结</h2><ul><li>数据库连接频繁开启和关闭，会严重影响数据库的性能。</li><li>代码中存在硬编码，分别是数据库部分的硬编码和SQL执行部分的硬编码。</li></ul><h1 id="Mybatis框架原理（核心）"><a href="#Mybatis框架原理（核心）" class="headerlink" title="Mybatis框架原理（核心）"></a>Mybatis框架原理（核心）</h1><h2 id="框架图"><a href="#框架图" class="headerlink" title="框架图"></a>框架图</h2><p><img src="/images/mybatis/mybatis%E6%A1%86%E6%9E%B6%E5%9B%BE.png" alt="mybatis框架图"></p><h2 id="分析结论"><a href="#分析结论" class="headerlink" title="分析结论"></a>分析结论</h2><ol><li>mybatis配置文件，包括Mybatis全局配置文件和Mybatis映射文件，其中全局配置文件配置了数据源、事务等信息；映射文件配置了SQL执行相关的信息。</li><li>mybatis通过读取配置文件信息（全局配置文件和映射文件），构造出SqlSessionFactory，即会话工厂。</li><li>通过SqlSessionFactory，可以创建SqlSession即会话。Mybatis是通过SqlSession来操作数据库的。</li><li>SqlSession本身不能直接操作数据库，它是通过底层的Executor执行器接口来操作数据库的。Executor接口有两个实现类，一个是普通执行器，一个是缓存执行器（默认）。</li><li>Executor执行器要处理的SQL信息是封装到一个底层对象MappedStatement中。该对象包括：SQL语句、输入参数映射信息、输出结果集映射信息。其中输入参数和输出结果的映射类型包括java的简单类型、HashMap集合对象、POJO对象类型。</li></ol><h1 id="Mybatis入门程序"><a href="#Mybatis入门程序" class="headerlink" title="Mybatis入门程序"></a>Mybatis入门程序</h1><p>Mybatis课程的所有代码程序将通过一个订单商品案例来进行讲解。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>&emsp;&emsp;  对用户信息的增删改查操作。</p><ol><li>根据用户ID来查询用户信息；</li><li>根据用户名称来模糊查询用户信息列表；</li><li>添加用户</li><li>删除用户（练习）</li><li>修改用户（练习）</li></ol><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>Jdk环境：jdk1.7.0_72</li><li>Ide环境：eclipse indigo</li><li>数据库环境：MySQL 5.1</li><li>Mybatis：3.2.7</li></ul><h3 id="数据库初始化"><a href="#数据库初始化" class="headerlink" title="数据库初始化"></a>数据库初始化</h3><h4 id="数据库脚本"><a href="#数据库脚本" class="headerlink" title="数据库脚本"></a>数据库脚本</h4><ol><li>执行sql_table.sql脚本，创建数据库表；</li><li>执行sql_data.sql初始化测试数据。</li></ol><h4 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h4><p>订单商品案例的数据库脚本中，总共包含四张表，其中入门程序只使用user表.<br>用户表的表结构如下：<br><img src="/images/mybatis/4.2user%E8%A1%A8%E7%BB%93%E6%9E%84.png" alt="4.2user表结构"></p><h3 id="下载mybatis"><a href="#下载mybatis" class="headerlink" title="下载mybatis"></a>下载mybatis</h3><p>mybaits的代码由github.com管理，下载地址：<a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/releases</a><br><img src="/images/mybatis/4.2mybatis%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.png" alt="4.2mybatis文件结构"></p><ul><li>Lib：mybatis的依赖包</li><li>Mybatis-3.2.7.jar：mybatis的核心包</li><li>Mybatis-3.2.7.pdf：mybatis的使用指南</li></ul><h2 id="工程搭建（三步）"><a href="#工程搭建（三步）" class="headerlink" title="工程搭建（三步）"></a>工程搭建（三步）</h2><h3 id="第一步：创建java工程"><a href="#第一步：创建java工程" class="headerlink" title="第一步：创建java工程"></a>第一步：创建java工程</h3><p>用eclipse创建一个java工程，jdk使用1.7.0_72。</p><h3 id="第二步：加入jar包"><a href="#第二步：加入jar包" class="headerlink" title="第二步：加入jar包"></a>第二步：加入jar包</h3><p>加入以下四部分jar包，其中junit的jar包，是非必须的。</p><ul><li><p>Mybatis核心包:mybaties-3.2.7.jar</p></li><li><p>Mybatis依赖包<br><img src="/images/mybatis/mybatis%E4%BE%9D%E8%B5%96%E5%8C%85.png" alt="mybatis依赖包"></p></li><li><p>MySQL驱动包: mysql-connector-*</p></li><li><p>Junit单元测试包（单元测试需要的包）:junit-4.9.jar</p></li></ul><h3 id="第三步：添加log4j-properties文件"><a href="#第三步：添加log4j-properties文件" class="headerlink" title="第三步：添加log4j.properties文件"></a>第三步：添加log4j.properties文件</h3><p>Mybatis使用的日志包是log4j的，所以需要添加log4j.properties。<br>在classpath下创建log4j.properties如下：</p><pre><code> //文件内容可以从mybatis-3.2.7.pdf中拷贝 # Global logging configurationlog4j.rootLogger=DEBUG, stdout    # Console output...log4j.appender.stdout=org.apache.log4j.ConsoleAppender    log4j.appender.stdout.layout=org.apache.log4j.PatternLayout    log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</code></pre><ul><li>日志级别在开发阶段设置成DEBUG，在生产阶段设置成INFO或者ERROR。</li></ul><h2 id="编程步骤"><a href="#编程步骤" class="headerlink" title="编程步骤"></a>编程步骤</h2><ol><li>创建PO类，根据需求创建；</li><li>创建全局配置文件SqlMapConfig.xml；</li><li>编写映射文件；</li><li>加载映射文件，在SqlMapConfig.xml中进行加载；</li><li>编写测试程序，即编写Java代码，连接并操作数据库。</li></ol><p>&emsp; 思路：</p><ul><li>读取配置文件；</li><li>通过SqlSessionFactoryBuilder创建SqlSessionFactory会话工厂。</li><li>通过SqlSessionFactory创建SqlSession。</li><li>调用SqlSession的操作数据库方法。</li><li>关闭SqlSession。</li></ul><h2 id="代码开发"><a href="#代码开发" class="headerlink" title="代码开发"></a>代码开发</h2><h3 id="创建PO类"><a href="#创建PO类" class="headerlink" title="创建PO类"></a>创建PO类</h3><p>&emsp; 创建的po类的属性要和数据库中表的列名一致（如果表中的列名是带有下划线，那么po类中对应的的属性名要采用驼峰式命名）<br>&emsp;User.java类如下：</p><pre><code>//Public class User {    private int id;    private String username;// 用户姓名    private String sex;// 性别    private Date birthday;// 生日    private String address;// 地址get/set……</code></pre><h3 id="创建SqlMapConfig-xml配置文件"><a href="#创建SqlMapConfig-xml配置文件" class="headerlink" title="创建SqlMapConfig.xml配置文件"></a>创建SqlMapConfig.xml配置文件</h3><p>&emsp; 在classpath下，创建SqlMapConfig.xml文件</p><pre><code>//SqlMapConfig.xml（文件头可以从mybatis-3.2.7.pdf文档的2.1.2小节中拷贝）：&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configurationPUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;&lt;!-- 配置mybatis的环境信息 --&gt;&lt;environments default=&quot;development&quot;&gt;    &lt;environment id=&quot;development&quot;&gt;        &lt;!-- 配置JDBC事务控制，由mybatis进行管理 --&gt;        &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;        &lt;!-- 配置数据源，采用dbcp连接池 --&gt;        &lt;dataSource type=&quot;POOLED&quot;&gt;            &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;            &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;            &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;            &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;        &lt;/dataSource&gt;    &lt;/environment&gt;&lt;/environments&gt;&lt;/configuration&gt;</code></pre><h3 id="需求开发"><a href="#需求开发" class="headerlink" title="需求开发"></a>需求开发</h3><p>&emsp;在classpath下，创建sqlmap文件夹。在sqlmap目录下，创建User.xml映射文件。</p><pre><code>//Mybatis的映射文件头（可以从mybatis-3.2.7.pdf文件中拷贝）：&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper    PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;    &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</code></pre><h4 id="根据用户ID来查询用户信息"><a href="#根据用户ID来查询用户信息" class="headerlink" title="根据用户ID来查询用户信息"></a>根据用户ID来查询用户信息</h4><h5 id="编写映射文件"><a href="#编写映射文件" class="headerlink" title="编写映射文件"></a>编写映射文件</h5><p>&emsp;在User.xml中添加以下代码：</p><pre><code>//&lt;!--     namespace：命名空间，它的作用就是对SQL进行分类化管理，可以理解为SQL隔离    注意：使用mapper代理开发时，namespace有特殊且重要的作用 --&gt;&lt;mapper namespace=&quot;test&quot;&gt;        &lt;!-- 根据用户ID，查询用户信息 --&gt;    &lt;!--         [id]：statement的id，要求在命名空间内唯一          [parameterType]：入参的java类型        [resultType]：查询出的单条结果集对应的java类型        [#{}]： 表示一个占位符?        [#{id}]：表示该占位符待接收参数的名称为id。注意：如果参数为简单类型时，#{}里面的参数名称可以是任意定义     --&gt;    &lt;select id=&quot;findUserById&quot; parameterType=&quot;int&quot; resultType=&quot;cn.itcast.mybatis.po.User&quot;&gt;        SELECT * FROM USER WHERE id = #{id}    &lt;/select&gt;&lt;/mapper&gt;</code></pre><h5 id="加载映射文件"><a href="#加载映射文件" class="headerlink" title="加载映射文件"></a>加载映射文件</h5><pre><code>//在SqlMapConfig.xml中，添加以下代码：&lt;!-- 加载mapper --&gt;&lt;mappers&gt;    &lt;mapper resource=&quot;sqlmap/User.xml&quot;/&gt;&lt;/mappers&gt;</code></pre><h5 id="编写测试程序"><a href="#编写测试程序" class="headerlink" title="编写测试程序"></a>编写测试程序</h5><pre><code>//public class MybatisFirst {                @Test        public void findUserByIdTest() throws Exception{                            //1、读取配置文件            String resource = &quot;SqlMapConfig.xml&quot;;            InputStream inputStream = Resources.getResourceAsStream(resource);            //2、根据配置文件创建SqlSessionFactory            SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);            //3、SqlSessionFactory创建SqlSession            SqlSession sqlSession = sqlSessionFactory.openSession();            //4、SqlSession执行statement，并返回映射结果            //第一个参数：statement的id，建议：namespace.statementId（确保唯一）            //第二个参数：入参的值，它的类型要和映射文件中对应的statement的入参类型一致            User user = sqlSession.selectOne(&quot;findUserById&quot;, 1);                            //打印输出结果集            System.out.println(user);                            //5、关闭SqlSession            sqlSession.close();        }    }</code></pre><h4 id="根据用户名称来模糊查询用户信息列表"><a href="#根据用户名称来模糊查询用户信息列表" class="headerlink" title="根据用户名称来模糊查询用户信息列表"></a>根据用户名称来模糊查询用户信息列表</h4><h5 id="编写映射文件-1"><a href="#编写映射文件-1" class="headerlink" title="编写映射文件"></a>编写映射文件</h5><pre><code>//在User.xml中，添加以下内容&lt;!-- 根据用户名称模糊查询用户信息列表 --&gt;&lt;!--     [${}]：表示拼接SQL字符串    [${value}]：表示要拼接的是简单类型参数。    注意：      1、如果参数为简单类型时，${}里面的参数名称必须为value       2、${}会引起SQL注入，一般情况下不推荐使用。但是有些场景必须使用${}，比如order by ${colname}--&gt;&lt;select id=&quot;findUsersByName&quot; parameterType=&quot;String&quot; resultType=&quot;cn.itcast.mybatis.po.User&quot;&gt;    SELECT * FROM USER WHERE username LIKE &apos;%${value}%&apos;&lt;/select&gt;</code></pre><h5 id="加载映射文件-1"><a href="#加载映射文件-1" class="headerlink" title="加载映射文件"></a>加载映射文件</h5><pre><code>//已配置，此处无需再次配置</code></pre><h5 id="编写测试程序-1"><a href="#编写测试程序-1" class="headerlink" title="编写测试程序"></a>编写测试程序</h5><pre><code>//@Testpublic void findUsersByNameTest() throws Exception {    // 1、读取配置文件    String resource = &quot;SqlMapConfig.xml&quot;;    InputStream inputStream = Resources.getResourceAsStream(resource);    // 2、根据配置文件创建SqlSessionFactory    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);    // 3、SqlSessionFactory创建SqlSession    SqlSession sqlSession = sqlSessionFactory.openSession();    // 4、SqlSession执行statement，并返回映射结果    // 第一个参数：statement的id，建议：namespace.statementId（确保唯一）    // 第二个参数：入参的值，它的类型要和映射文件中对应的statement的入参类型一致    List&lt;User&gt; users = sqlSession.selectList(&quot;test.findUsersByName&quot;, &quot;小明&quot;);    // 打印输出结果集    System.out.println(users);    // 5、关闭SqlSession    sqlSession.close();}</code></pre><h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><h5 id="编写映射文件-2"><a href="#编写映射文件-2" class="headerlink" title="编写映射文件"></a>编写映射文件</h5><pre><code>//&lt;!-- 添加用户 --&gt;&lt;!-- 如果主键的值是通过MySQL自增机制生成的，那么我们此处不需要再显示的给ID赋值 --&gt;&lt;insert id=&quot;insertUser&quot; parameterType=&quot;cn.itcast.mybatis.po.User&quot;&gt;    INSERT INTO USER(username,sex,birthday,address) VALUES (#{username},#{sex},#{birthday},#{address})&lt;/insert&gt;</code></pre><h5 id="加载映射文件-2"><a href="#加载映射文件-2" class="headerlink" title="加载映射文件"></a>加载映射文件</h5><pre><code>//已配置，此处无需再次配置</code></pre><h5 id="编写测试程序-2"><a href="#编写测试程序-2" class="headerlink" title="编写测试程序"></a>编写测试程序</h5><pre><code>//注意：增删改操作要对SqlSession执行commit操作。@Test    public void insertUserTest() throws Exception {        // 1、读取配置文件        String resource = &quot;SqlMapConfig.xml&quot;;        InputStream inputStream = Resources.getResourceAsStream(resource);        // 2、根据配置文件创建SqlSessionFactory        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder()                .build(inputStream);        // 3、SqlSessionFactory创建SqlSession        SqlSession sqlSession = sqlSessionFactory.openSession();        // 4、SqlSession执行statement，并返回映射结果        //构建user参数，没有赋值的属性采取默认值        User user = new User();        user.setUsername(&quot;东哥1&quot;);        user.setAddress(&quot;清河宝盛西里&quot;);        // 第一个参数：statement的id，建议：namespace.statementId（确保唯一）        // 第二个参数：入参的值，它的类型要和映射文件中对应的statement的入参类型一致        sqlSession.insert(&quot;insertUser&quot;, user);        //切记：增删改操作时，要执行commit操作        sqlSession.commit();        // 5、关闭SqlSession        sqlSession.close();    }</code></pre><h5 id="主键返回之MySQL自增主键"><a href="#主键返回之MySQL自增主键" class="headerlink" title="主键返回之MySQL自增主键"></a>主键返回之MySQL自增主键</h5><p>思路：</p><ul><li>MySQL自增主键，是指在insert之前MySQL会自动生成一个自增的主键。</li><li>我们可以通过MySQL的函数获取到刚插入的自增主键:LAST_INSERT_ID()</li><li>这个函数是在insert语句之后去调用。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//修改映射文件：</span><br><span class="line"><span class="comment">&lt;!-- 添加用户之自增主键返回（selectKey方式） --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">[selectKey标签]：通过select查询来生成主键</span></span><br><span class="line"><span class="comment">[keyProperty]：指定存放生成主键的属性</span></span><br><span class="line"><span class="comment">[resultType]：生成主键所对应的Java类型</span></span><br><span class="line"><span class="comment">[order]：指定该查询主键SQL语句的执行顺序，相对于insert语句</span></span><br><span class="line"><span class="comment">[last_insert_id]：MySQL的函数，要配合insert语句一起使用</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"cn.itcast.mybatis.po.User"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span>&gt;</span></span><br><span class="line">SELECT LAST_INSERT_ID()</span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">INSERT INTO USER(username,sex,birthday,address) VALUES (#&#123;username&#125;,#&#123;sex&#125;,#&#123;birthday&#125;,#&#123;address&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="主键返回之MySQL函数UUID"><a href="#主键返回之MySQL函数UUID" class="headerlink" title="主键返回之MySQL函数UUID"></a>主键返回之MySQL函数UUID</h5><pre><code>// 注意：使用mysql的uuid()函数生成主键，需要修改表中id字段类型为string，长度设置成35位。&lt;!-- 添加用户之UUID主键返回 --&gt;&lt;!--     [uuid]：MySQL的函数，生成的主键是35位的字符串，所以使用它时要修改id的类型为字符类型    注意：        1、此时order采用BEFORE，因为需要先生成出主键，再执行insert语句        2、显式的给ID赋值--&gt;&lt;insert id=&quot;insertUser&quot; parameterType=&quot;cn.itcast.mybatis.po.User&quot;&gt;    &lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;string&quot; order=&quot;BEFORE&quot;&gt;        SELECT UUID()    &lt;/selectKey&gt;    INSERT INTO USER(id,username,sex,birthday,address) VALUES (#{id},#{username},#{sex},#{birthday},#{address})&lt;/insert&gt;</code></pre><h5 id="主键返回之Oracle序列返回"><a href="#主键返回之Oracle序列返回" class="headerlink" title="主键返回之Oracle序列返回"></a>主键返回之Oracle序列返回</h5><pre><code>//&lt;!-- 添加用户之sequence返回 --&gt;&lt;!--     通过Oracle的sequence获取主键方式与MySQL的uuid方式基本一致    --&gt;&lt;insert id=&quot;insertUser&quot; parameterType=&quot;cn.itcast.mybatis.po.User&quot;&gt;    &lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;int&quot; order=&quot;BEFORE&quot;&gt;        SELECT user_seq.nextval() FROM dual    &lt;/selectKey&gt;    INSERT INTO USER(id,username,sex,birthday,address) VALUES (#{id},#{username},#{sex},#{birthday},#{address})&lt;/insert&gt;</code></pre><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><h5 id="编写映射文件-3"><a href="#编写映射文件-3" class="headerlink" title="编写映射文件"></a>编写映射文件</h5><pre><code>//&lt;!-- 根据ID删除用户 --&gt;&lt;delete id=&quot;deleteUser&quot; parameterType=&quot;int&quot;&gt;    DELETE FROM USER WHERE id= #{id}&lt;/delete&gt;</code></pre><h5 id="加载映射文件-3"><a href="#加载映射文件-3" class="headerlink" title="加载映射文件"></a>加载映射文件</h5><pre><code>//已配置，此处无需再次配置。</code></pre><h5 id="编写测试程序-3"><a href="#编写测试程序-3" class="headerlink" title="编写测试程序"></a>编写测试程序</h5><pre><code>//@Testpublic void deleteUserTest() throws Exception{    // 1、读取配置文件    String resource = &quot;SqlMapConfig.xml&quot;;    InputStream inputStream = Resources.getResourceAsStream(resource);    // 2、根据配置文件创建SqlSessionFactory    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder()                .build(inputStream);    // 3、SqlSessionFactory创建SqlSession    SqlSession sqlSession = sqlSessionFactory.openSession();    // 4、SqlSession执行statement，并返回映射结果    // 第一个参数：statement的id，建议：namespace.statementId（确保唯一）    // 第二个参数：入参的值，它的类型要和映射文件中对应的statement的入参类型一致    sqlSession.delete(&quot;test.deleteUser&quot;, 30);                //切记：增删改操作时，要执行commit操作    sqlSession.commit();       // 5、关闭SqlSession    sqlSession.close();}</code></pre><h4 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h4><h5 id="编写映射文件-4"><a href="#编写映射文件-4" class="headerlink" title="编写映射文件"></a>编写映射文件</h5><pre><code>//&lt;!-- 根据传入的用户信息修改用户 --&gt;&lt;update id=&quot;updateUser&quot; parameterType=&quot;cn.itcast.mybatis.po.User&quot;&gt;    UPDATE USER SET username = #{username},sex=#{sex} WHERE id=#{id}&lt;/update&gt;</code></pre><h5 id="加载映射文件-4"><a href="#加载映射文件-4" class="headerlink" title="加载映射文件"></a>加载映射文件</h5><pre><code>//已配置，此处无需再次配置。</code></pre><h5 id="编写测试程序-4"><a href="#编写测试程序-4" class="headerlink" title="编写测试程序"></a>编写测试程序</h5><pre><code>//@Testpublic void updateUserTest() throws Exception{    // 1、读取配置文件    String resource = &quot;SqlMapConfig.xml&quot;;    InputStream inputStream = Resources.getResourceAsStream(resource);    // 2、根据配置文件创建SqlSessionFactory    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);    // 3、SqlSessionFactory创建SqlSession    SqlSession sqlSession = sqlSessionFactory.openSession();    // 4、SqlSession执行statement，并返回映射结果               //构建user参数，没有赋值的属性采取默认值    User user = new User();    user.setId(28);    user.setUsername(&quot;东哥11&quot;);    user.setAddress(&quot;清河宝盛西里&quot;);                // 第一个参数：statement的id，建议：namespace.statementId（确保唯一）    // 第二个参数：入参的值，它的类型要和映射文件中对应的statement的入参类型一致    sqlSession.update(&quot;test.updateUser&quot;, user);                //切记：增删改操作时，要执行commit操作    sqlSession.commit();        // 5、关闭SqlSession    sqlSession.close();}</code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h3 id="parameterType和resultType"><a href="#parameterType和resultType" class="headerlink" title="parameterType和resultType"></a>parameterType和resultType</h3><ul><li>parameterType指定输入参数的java类型，可以填写别名或Java类的全限定名。</li><li>resultType指定输出结果的java类型，可以填写别名或Java类的全限定名。</li></ul><h3 id="和"><a href="#和" class="headerlink" title="#{}和${}"></a>#{}和${}</h3><ul><li>#{}：相当于预处理中的占位符？。</li><li>#{}里面的参数表示接收java输入参数的名称。</li><li>#{}可以接受HashMap、简单类型、POJO类型的参数。</li><li>当接受简单类型的参数时，#{}里面可以是value，也可以是其他。</li><li>#{}可以防止SQL注入。</li><li>${}：相当于拼接SQL串，对传入的值不做任何解释的原样输出。</li><li>${}会引起SQL注入，所以要谨慎使用。</li><li>${}可以接受HashMap、简单类型、POJO类型的参数。</li><li>当接受简单类型的参数时，${}里面只能是value。</li></ul><h3 id="selectOne和selectList"><a href="#selectOne和selectList" class="headerlink" title="selectOne和selectList"></a>selectOne和selectList</h3><ul><li>selectOne：只能查询0或1条记录，大于1条记录的话，会报错；</li><li>selectList：可以查询0或N条记录</li></ul><h1 id="Mybatis开发dao"><a href="#Mybatis开发dao" class="headerlink" title="Mybatis开发dao"></a>Mybatis开发dao</h1><p>&emsp;&emsp;Mybatis在项目中主要使用的地方就是开发dao（数据访问层），所以下面讲解一下mybatis开发dao的方法。有两种方式：原始dao开发方式、mapper代理开发方式（推荐）。</p><h2 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h2><ol><li>根据用户ID来查询用户信息；</li><li>根据用户名称来模糊查询用户信息列表；</li><li>添加用户； </li></ol><h2 id="原始dao开发方式"><a href="#原始dao开发方式" class="headerlink" title="原始dao开发方式"></a>原始dao开发方式</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>程序员需要写dao接口和dao实现类。</li></ul><h3 id="编程步骤-1"><a href="#编程步骤-1" class="headerlink" title="编程步骤"></a>编程步骤</h3><ol><li>根据需求创建po类</li><li>编写全局配置文件</li><li>根据需求编写映射文件</li><li>加载映射文件</li><li>编写dao接口</li><li>编写dao实现类</li><li>编写测试代码</li></ol><h3 id="程序编写"><a href="#程序编写" class="headerlink" title="程序编写"></a>程序编写</h3><p>&emsp;&emsp;步骤中的1、2、3、4都在入门程序中进行了编写，此处不需要重新编写。</p><h4 id="开发dao接口"><a href="#开发dao接口" class="headerlink" title="开发dao接口"></a>开发dao接口</h4><pre><code>//public interface UserDao {           public User findUserById(int id);//根据用户ID来查询用户信息            public List&lt;User&gt; findUsersByName(String username);//根据用户名称来模糊查询用户信息列表    public void insertUser(User user);//添加用户}</code></pre><h4 id="开发dao实现类"><a href="#开发dao实现类" class="headerlink" title="开发dao实现类"></a>开发dao实现类</h4><h5 id="SqlSession使用范围"><a href="#SqlSession使用范围" class="headerlink" title="SqlSession使用范围"></a>SqlSession使用范围</h5><p>&emsp;&emsp;通过入门程序，大家可以看出，在测试代码中，有大量的重复代码。所以我们第一反应就是想给它抽取出共性的部分，但是SqlSession、SqlSessionFactory、SqlSessionFactoryBuilder有着各自的生命周期，因为这些生命周期的不同，抽取时要有针对性的处理。</p><p>&emsp;&emsp;所以在抽取之前，我们先来了解并总结下它们三个的生命周期。</p><ul><li>SqlSessionFactoryBuilder</li></ul><p>&emsp;&emsp;它的作用只是通过配置文件创建SqlSessionFactory，所以只要创建出SqlSessionFactory，它就可以销毁了。所以说，它的生命周期是在方法之内。</p><ul><li>SqlSessionFactory</li></ul><p>&emsp;&emsp;它的作用是创建SqlSession的工厂，工厂一旦创建，除非应用停掉，不要销毁。<br>所以说它的生命周期是在应用范围内。这里可以通过单例模式来管理它。<br>&emsp;&emsp;在mybatis整合spring之后，最好的处理方式是把SqlSessionFactory交由spring来做单例管理。</p><ul><li>SqlSession</li></ul><p>&emsp;&emsp;SqlSession是一个面向用户（程序员）的接口，它的默认实现是DefaultSqlSession。<br>&emsp;&emsp;Mybatis是通过SqlSession来操作数据库的。SqlSession中不仅包含要处理的SQL信息，还包括一些数据信息，所以说它是线程不安全的，因此它最佳的生命周期范围是在方法体之内。</p><h5 id="Dao实现类代码"><a href="#Dao实现类代码" class="headerlink" title="Dao实现类代码"></a>Dao实现类代码</h5><ul><li>需要向dao实现类中注入SqlSessionFactory，在方法体内通过SqlSessionFactory创建SqlSession</li><li>要注意SqlSession和SqlSessionFactory的生命周期。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//public class UserDaoImpl implements UserDao &#123;    </span></span><br><span class="line"><span class="comment">//注入SqlSessionFactory</span></span><br><span class="line"><span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"><span class="comment">//使用构造方法来初始化SqlSessionFactory</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">&#125;    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="comment">//通过工厂，在方法内部获取SqlSession，这样就可以避免线程不安全</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//返回结果集</span></span><br><span class="line"><span class="keyword">return</span> sqlSession.selectOne(<span class="string">"test.findUserById"</span>, id);</span><br><span class="line">&#125;    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUsersByName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="comment">//通过工厂，在方法内部获取SqlSession，这样就可以避免线程不安全</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">return</span> sqlSession.selectList(<span class="string">"test.findUsersByName"</span>, username);</span><br><span class="line">&#125;    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line"><span class="comment">//通过工厂，在方法内部获取SqlSession，这样就可以避免线程不安全</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">sqlSession.insert(<span class="string">"test.insertUser"</span>, user);</span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h5><pre><code>//public class UserDaoTest {    //声明全局的SqlSessionFactory    private SqlSessionFactory sqlSessionFactory;            @Before    public void setUp() throws Exception {        // 1、读取配置文件        String resource = &quot;SqlMapConfig.xml&quot;;        InputStream inputStream = Resources.getResourceAsStream(resource);        // 2、根据配置文件创建SqlSessionFactory        sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);    }        @Test    public void testFindUserById() {        //构造UserDao对象        UserDao userDao = new UserDaoImpl(sqlSessionFactory);        //调用UserDao对象的方法        User user = userDao.findUserById(1);                    System.out.println(user);    }       @Test    public void testFindUsersByName() {        //构造UserDao对象        UserDao userDao = new UserDaoImpl(sqlSessionFactory);        //调用UserDao对象的方法        List&lt;User&gt; list = userDao.findUsersByName(&quot;小明&quot;);                    System.out.println(list);    }        @Test    public void testInsertUser() {        //构造UserDao对象        UserDao userDao = new UserDaoImpl(sqlSessionFactory);        //构造User对象        User user = new User();        user.setUsername(&quot;东哥3&quot;);        user.setAddress(&quot;清河宝盛西里3&quot;);                    //调用UserDao对象的方法        userDao.insertUser(user);                    System.out.println(user.getId());    }    }</code></pre><h3 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h3><p>&emsp;原始dao开发存在一些问题：</p><ul><li>存在一定量的模板代码。比如：通过SqlSessionFactory创建SqlSession；调用SqlSession的方法操作数据库；关闭Sqlsession。</li><li>存在一些硬编码。调用SqlSession的方法操作数据库时，需要指定statement的id，这里存在了硬编码。</li></ul><h2 id="Mapper代理开发方式（推荐）"><a href="#Mapper代理开发方式（推荐）" class="headerlink" title="Mapper代理开发方式（推荐）"></a>Mapper代理开发方式（推荐）</h2><p>&emsp;&emsp;Mapper代理的开发方式，程序员只需要编写mapper接口（相当于dao接口）即可。Mybatis会自动的为mapper接口生成动态代理实现类。<br>&emsp;&emsp;不过要实现mapper代理的开发方式，需要遵循一些开发规范。</p><h3 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h3><ol><li>mapper接口的全限定名要和mapper映射文件的namespace的值相同。</li><li>mapper接口的方法名称要和mapper映射文件中的statement的id相同；<br>3.mapper接口的方法参数只能有一个，且类型要和mapper映射文件中statement的parameterType的值保持一致。</li><li>mapper接口的返回值类型要和mapper映射文件中statement的resultType值或resultMap中的type值保持一致；</li></ol><p>&emsp;注：通过规范式的开发mapper接口，可以解决原始dao开发当中存在的问题：</p><ul><li>模板代码已经去掉；</li><li>剩下去不掉的操作数据库的代码，其实就是一行代码。这行代码中硬编码的部分，通过第一和第二个规范就可以解决。</li></ul><h3 id="编程步骤-2"><a href="#编程步骤-2" class="headerlink" title="编程步骤"></a>编程步骤</h3><ol><li>根据需求创建po类</li><li>编写全局配置文件</li><li>根据需求编写映射文件</li><li>加载映射文件</li><li>编写mapper接口</li><li>编写测试代码</li></ol><h3 id="程序编写-1"><a href="#程序编写-1" class="headerlink" title="程序编写"></a>程序编写</h3><p>&emsp;&emsp;步骤中的1、2都在入门程序中进行了编写，此处不需要重新编写。</p><h4 id="编写mapper映射文件"><a href="#编写mapper映射文件" class="headerlink" title="编写mapper映射文件"></a>编写mapper映射文件</h4><p>&emsp;&emsp;重新定义mapper映射文件UserMapper.xml（内容同Users.xml，除了namespace的值），放到新创建的目录mapper下。</p><pre><code>//&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper    PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;    &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;!-- namespace：此时用mapper代理方式，它的值必须等于对应mapper接口的全限定名  --&gt;&lt;mapper namespace=&quot;cn.itcast.mybatis.mapper.UserMapper&quot;&gt;        &lt;!-- 根据用户ID，查询用户信息 --&gt;    &lt;!--         [id]：statement的id，要求在命名空间内唯一          [parameterType]：入参的java类型，可是是简单类型、POJO、HashMap        [resultType]：查询出的单条结果集对应的java类型        [#{}]： 表示一个占位符?        [#{id}]：表示该占位符待接收参数的名称为id。注意：如果参数为简单类型时，#{}里面的参数名称可以是任意定义     --&gt;    &lt;select id=&quot;findUserById&quot; parameterType=&quot;int&quot; resultType=&quot;cn.itcast.mybatis.po.User&quot;&gt;        SELECT * FROM USER WHERE id = #{id}    &lt;/select&gt;                    &lt;!-- 根据用户名称模糊查询用户信息列表 --&gt;    &lt;!--         [${}]：表示拼接SQL字符串，即不加解释的原样输出         [${value}]：表示要拼接的是简单类型参数。         注意：        1、如果参数为简单类型时，${}里面的参数名称必须为value         2、${}会引起SQL注入，一般情况下不推荐使用。但是有些场景必须使用${}，比如order by ${colname}    --&gt;    &lt;select id=&quot;findUsersByName&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;cn.itcast.mybatis.po.User&quot;&gt;        SELECT * FROM USER WHERE username LIKE &apos;%${value}%&apos;    &lt;/select&gt;            &lt;!-- 添加用户之自增主键返回（selectKey方式） --&gt;    &lt;!--         [selectKey标签]：通过select查询来生成主键        [keyProperty]：指定存放生成主键的属性        [resultType]：生成主键所对应的Java类型        [order]：指定该查询主键SQL语句的执行顺序，相对于insert语句，此时选用AFTER        [last_insert_id]：MySQL的函数，要配合insert语句一起使用     --&gt;    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;cn.itcast.mybatis.po.User&quot;&gt;        &lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;int&quot; order=&quot;AFTER&quot;&gt;            SELECT LAST_INSERT_ID()        &lt;/selectKey&gt;        INSERT INTO USER(username,sex,birthday,address) VALUES (#{username},#{sex},#{birthday},#{address})    &lt;/insert&gt;        &lt;/mapper&gt;</code></pre><h4 id="加载mapper映射文件"><a href="#加载mapper映射文件" class="headerlink" title="加载mapper映射文件"></a>加载mapper映射文件</h4><pre><code>//&lt;!-- 加载mapper --&gt;&lt;mappers&gt;    &lt;mapper resource=&quot;sqlmap/User.xml&quot;/&gt;    &lt;mapper resource=&quot;mapper/UserMapper.xml&quot;/&gt;&lt;/mappers&gt;</code></pre><h4 id="编写mapper接口"><a href="#编写mapper接口" class="headerlink" title="编写mapper接口"></a>编写mapper接口</h4><p>&emsp;&emsp;内容同UserDao接口一样：</p><pre><code>//public interface UserMapper {    //根据用户ID来查询用户信息    public User findUserById(int id);    //根据用户名称来模糊查询用户信息列表    public List&lt;User&gt; findUsersByName(String username);    //添加用户    public void insertUser(User user);}</code></pre><h4 id="编写测试代码-1"><a href="#编写测试代码-1" class="headerlink" title="编写测试代码"></a>编写测试代码</h4><pre><code>//public class UserMapperTest {        // 声明全局的SqlSessionFactory    private SqlSessionFactory sqlSessionFactory;        @Before    public void setUp() throws Exception {        // 1、读取配置文件        String resource = &quot;SqlMapConfig.xml&quot;;        InputStream inputStream = Resources.getResourceAsStream(resource);        // 2、根据配置文件创建SqlSessionFactory        sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);    }        @Test    public void testFindUserById() {        // 创建SqlSession        SqlSession sqlSession = sqlSessionFactory.openSession();        // 通过SqlSession，获取mapper接口的动态代理对象        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);        // 调用mapper对象的方法        User user = userMapper.findUserById(1);            System.out.println(user);        // 关闭SqlSession        sqlSession.close();        }        @Test    public void testFindUsersByName() {        // 创建SqlSession        SqlSession sqlSession = sqlSessionFactory.openSession();        // 通过SqlSession，获取mapper接口的动态代理对象        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);        // 调用mapper对象的方法        List&lt;User&gt; list = userMapper.findUsersByName(&quot;小明&quot;);            System.out.println(list);        // 关闭SqlSession        sqlSession.close();    }        @Test    public void testInsertUser() {        // 创建SqlSession        SqlSession sqlSession = sqlSessionFactory.openSession();        // 通过SqlSession，获取mapper接口的动态代理对象        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);                    //构造User对象        User user = new User();        user.setUsername(&quot;东哥4&quot;);        user.setAddress(&quot;清河宝盛西里4&quot;);                    // 调用mapper对象的方法        userMapper.insertUser(user);            System.out.println(user.getId());                    //执行SqlSession的commit操作        sqlSession.commit();        // 关闭SqlSession        sqlSession.close();    }    }</code></pre><h1 id="Mybatis全局配置文件"><a href="#Mybatis全局配置文件" class="headerlink" title="Mybatis全局配置文件"></a>Mybatis全局配置文件</h1><p>&emsp;&emsp;SqlMapConfig.xml是mybatis的全局配置文件，它的名称可以是任意命名的。</p><h2 id="全部配置内容"><a href="#全部配置内容" class="headerlink" title="全部配置内容"></a>全部配置内容</h2><p>&emsp;SqlMapConfig.xml的配置内容和顺序如下（顺序不能乱）：</p><ul><li>Properties（属性）</li><li>Settings（全局参数设置）</li><li>typeAliases（类型别名）</li><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins（插件）</li><li>environments（环境信息集合）</li><li><ul><li>environment（单个环境信息）</li></ul></li><li><ul><li><ul><li>transactionManager（事物）</li></ul></li></ul></li><li><ul><li><ul><li>dataSource（数据源）</li></ul></li></ul></li><li>mappers（映射器）</li></ul><h2 id="常用配置详解"><a href="#常用配置详解" class="headerlink" title="常用配置详解"></a>常用配置详解</h2><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><p>&emsp;SqlMapConfig.xml文件中可以引用java属性文件中的配置信息<br>&emsp;&emsp;db.properties配置信息如下：</p><pre><code>//db.driver=com.mysql.jdbc.Driverdb.url=jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf8db.username=rootdb.password=root</code></pre><p>SqlMapConfig.xml使用properties标签后，如下所示：</p><pre><code>//&lt;!-- 通过properties标签，读取java配置文件的内容 --&gt;&lt;properties resource=&quot;db.properties&quot; /&gt;    &lt;!-- 配置mybatis的环境信息 --&gt;&lt;environments default=&quot;development&quot;&gt;    &lt;environment id=&quot;development&quot;&gt;        &lt;!-- 配置JDBC事务控制，由mybatis进行管理 --&gt;        &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;        &lt;!-- 配置数据源，采用dbcp连接池 --&gt;        &lt;dataSource type=&quot;POOLED&quot;&gt;            &lt;property name=&quot;driver&quot; value=&quot;${db.driver}&quot;/&gt;            &lt;property name=&quot;url&quot; value=&quot;${db.url}&quot;/&gt;            &lt;property name=&quot;username&quot; value=&quot;${db.username}&quot;/&gt;            &lt;property name=&quot;password&quot; value=&quot;${db.password}&quot;/&gt;        &lt;/dataSource&gt;    &lt;/environment&gt;&lt;/environments&gt;              </code></pre><p>&emsp;使用${}，可以引用已经加载的java配置文件中的信息。</p><p>&emsp;&emsp;注意：mybatis将按照下面的顺序加载属性：</p><ul><li>Properties标签体内定义的属性首先被读取</li><li>Properties引用的属性会被读取，如果发现上面已经有同名的属性了，那后面会覆盖前面的值</li><li>parameterType接收的值会最后被读取，如果发现上面已经有同名的属性了，那后面会覆盖前面的值</li></ul><p>&emsp;所以说，mybatis读取属性的顺序由高到低分别是：parameterType接收的属性值、properties引用的属性、properties标签内定义的属性。</p><h3 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h3><p>&emsp;&emsp;mybatis全局配置参数，全局参数将会影响mybatis的运行行为。详细如下：</p><p><img src="/images/mybatis/setting%E9%85%8D%E7%BD%AE1.png" alt="setting配置1"><br><img src="/images/mybatis/setting%E9%85%8D%E7%BD%AE2.png" alt="setting配置2"></p><h3 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h3><p>&emsp;&emsp;别名是使用是为了在映射文件中，更方便的去指定入参和结果集的类型，不再用写很长的一段全限定名。</p><h4 id="mybatis支持的别名"><a href="#mybatis支持的别名" class="headerlink" title="mybatis支持的别名"></a>mybatis支持的别名</h4><table><thead><tr><th style="text-align:center">别名</th><th style="text-align:center">映射的类型</th></tr></thead><tbody><tr><td style="text-align:center">_byte</td><td style="text-align:center">byte</td></tr><tr><td style="text-align:center">_long</td><td style="text-align:center">long</td></tr><tr><td style="text-align:center">_short</td><td style="text-align:center">short</td></tr><tr><td style="text-align:center">_int</td><td style="text-align:center">int</td></tr><tr><td style="text-align:center">_integer</td><td style="text-align:center">int</td></tr><tr><td style="text-align:center">_double</td><td style="text-align:center">double</td></tr><tr><td style="text-align:center">_float</td><td style="text-align:center">float</td></tr><tr><td style="text-align:center">_boolean</td><td style="text-align:center">boolean</td></tr><tr><td style="text-align:center">string</td><td style="text-align:center">String</td></tr><tr><td style="text-align:center">byte</td><td style="text-align:center">Byte</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">Long</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">Short</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">Integer</td></tr><tr><td style="text-align:center">integer</td><td style="text-align:center">Integer</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">Double</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">Float</td></tr><tr><td style="text-align:center">boolean</td><td style="text-align:center">Boolean</td></tr><tr><td style="text-align:center">date</td><td style="text-align:center">Date</td></tr><tr><td style="text-align:center">decimal</td><td style="text-align:center">BigDecimal</td></tr><tr><td style="text-align:center">bigdecimal</td><td style="text-align:center">BigDecimal</td></tr></tbody></table><h4 id="自定义别名"><a href="#自定义别名" class="headerlink" title="自定义别名"></a>自定义别名</h4><p>&emsp;&emsp;SqlMapConfig.xml配置信息如下：</p><pre><code>//&lt;!-- 定义别名 --&gt;    &lt;typeAliases&gt;        &lt;!-- 单个定义别名 --&gt;        &lt;typeAlias type=&quot;cn.itcast.mybatis.po.User&quot; alias=&quot;user&quot;/&gt;                    &lt;!-- 批量定义别名（推荐） --&gt;        &lt;!-- [name]：指定批量定义别名的类包，别名为类名（首字母大小写都可） --&gt;        &lt;package name=&quot;cn.itcast.mybatis.po&quot;/&gt;    &lt;/typeAliases&gt;                </code></pre><h3 id="mappers"><a href="#mappers" class="headerlink" title="mappers"></a>mappers</h3><h4 id="lt-mapper-resource-’’-gt"><a href="#lt-mapper-resource-’’-gt" class="headerlink" title="&lt;mapper resource=’’/&gt;"></a><code>&lt;mapper resource=’’/&gt;</code></h4><p>&emsp;&emsp;使用相对于类路径的资源<br>&emsp;&emsp;&emsp;如：<code>&lt;mapper resource=&quot;sqlmap/User.xml&quot; /&gt;</code></p><h4 id="lt-mapper-url-’’-gt"><a href="#lt-mapper-url-’’-gt" class="headerlink" title="&lt;mapper url=’’/&gt;"></a><code>&lt;mapper url=’’/&gt;</code></h4><p>&emsp;&emsp;使用完全限定路径如：<br>&emsp;&emsp;&emsp;<code>&lt;mapper url=&quot;file:///D:\workspace_spingmvc\mybatis_01\config\sqlmap\User.xml&quot; /&gt;</code></p><h4 id="lt-mapper-class-’’-gt"><a href="#lt-mapper-class-’’-gt" class="headerlink" title="&lt;mapper class=’’/&gt;"></a><code>&lt;mapper class=’’/&gt;</code></h4><p>&emsp;&emsp;使用mapper接口的全限定名<br>&emsp;&emsp;&emsp;如：<code>&lt;mapper class=&quot;cn.itcast.mybatis.mapper.UserMapper&quot;/&gt;</code><br><strong>注意：此种方法要求mapper接口和mapper映射文件要名称相同，且放到同一个目录下;</strong></p><h4 id="lt-package-name-’’-gt-（推荐）"><a href="#lt-package-name-’’-gt-（推荐）" class="headerlink" title="&lt;package name=’’/&gt;`（推荐）"></a><code>&lt;package name=’’/&gt;`</code>（推荐）</h4><p>&emsp;&emsp;注册指定包下的所有映射文件<br>&emsp;&emsp;&emsp;如：<code>&lt;package name=&quot;cn.itcast.mybatis.mapper&quot;/&gt;</code><br><strong>注意：此种方法要求mapper接口和mapper映射文件要名称相同，且放到同一个目录下;</strong></p><h1 id="Mybatis映射文件（核心）"><a href="#Mybatis映射文件（核心）" class="headerlink" title="Mybatis映射文件（核心）"></a>Mybatis映射文件（核心）</h1><h2 id="输入映射"><a href="#输入映射" class="headerlink" title="输入映射"></a>输入映射</h2><h3 id="ParameterType"><a href="#ParameterType" class="headerlink" title="ParameterType"></a>ParameterType</h3><p>&emsp;&emsp;指定输入参数的java类型，可以使用别名或者类的全限定名。它可以接收简单类型、POJO、HashMap。</p><h4 id="传递简单类型"><a href="#传递简单类型" class="headerlink" title="传递简单类型"></a>传递简单类型</h4><p>&emsp;&emsp;参考入门需求：根据用户ID查询用户信息。<br><img src="/images/mybatis/7.1.1.png" alt="7.1.1"></p><h4 id="传递POJO对象"><a href="#传递POJO对象" class="headerlink" title="传递POJO对象"></a>传递POJO对象</h4><p>&emsp;&emsp;参考入门需求：添加用户。<br><img src="/images/mybatis/7.1.2.png" alt="7.1.2"></p><h4 id="传递POJO包装对象"><a href="#传递POJO包装对象" class="headerlink" title="传递POJO包装对象"></a>传递POJO包装对象</h4><p>&emsp;&emsp;开发中通过pojo传递查询条件 ，查询条件是综合的查询条件，不仅包括用户查询条件还包括其它的查询条件（比如将用户购买商品信息也作为查询条件），这时可以使用包装对象传递输入参数。</p><h5 id="需求-2"><a href="#需求-2" class="headerlink" title="需求"></a>需求</h5><p>&emsp;&emsp;综合查询用户信息，需要传入查询条件复杂，比如（用户信息、订单信息、商品信息）。</p><h5 id="定义包装对象"><a href="#定义包装对象" class="headerlink" title="定义包装对象"></a>定义包装对象</h5><p>&emsp;&emsp;一般User.java类要和数据表表字段一致，最好不要在这里面添加其他字段，学习mybatis的逆向工程时，会根据表结构，生成po类，如果在po类中扩展字段，此时会被覆盖掉。<br>&emsp;&emsp;所以针对要扩展的po类，我们需要创建一个扩展类，来继承它。<br><img src="/images/mybatis/7.1.3.png" alt="7.1.3"></p><p>&emsp;&emsp;定义POJO包装类：<br><img src="/images/mybatis/7.1.4.png" alt="7.1.4"></p><h5 id="编写Mapper接口"><a href="#编写Mapper接口" class="headerlink" title="编写Mapper接口"></a>编写Mapper接口</h5><pre><code>//通过包装类来进行复杂的用户信息综合查询    public List&lt;UserExt&gt; findUserList(UserQueryVO userQueryVO);</code></pre><h5 id="编写mapper映射文件-1"><a href="#编写mapper映射文件-1" class="headerlink" title="编写mapper映射文件"></a>编写mapper映射文件</h5><pre><code>&lt;!-- 通过包装类来进行复杂的用户信息综合查询 --&gt;    &lt;select id=_&quot;findUserList&quot;_ parameterType=_&quot;userQueryVO&quot;_ resultType=_&quot;userExt&quot;_&gt;  SELECT * FROM USER WHERE sex=#{userExt.sex} AND username LIKE &apos;%${userExt.username}%&apos;    &lt;/select&gt;  </code></pre><p> <strong>注意：入参的类型变为UserQueryVO、结果集的类型变为UserExt，#{}里面的参数变为UserQueryVO对象中的userExt属性的sex和username子属性。</strong></p><h5 id="编写测试代码-2"><a href="#编写测试代码-2" class="headerlink" title="编写测试代码"></a>编写测试代码</h5><pre><code>//@Testpublic void findUserListTest() {    // 创建SqlSession    SqlSession sqlSession = sqlSessionFactory.openSession();    // 通过SqlSession，获取mapper接口的动态代理对象    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);        //构造userQueryVO对象    UserQueryVO userQueryVO = new UserQueryVO();               // 构造UserExt对象    UserExt userExt = new UserExt();    userExt.setSex(&quot;1&quot;);    userExt.setUsername(&quot;小明&quot;);                userQueryVO.setUserExt(userExt);        // 调用mapper对象的方法    List&lt;UserExt&gt; list = userMapper.findUserList(userQueryVO);        System.out.println(list);    // 关闭SqlSession    sqlSession.close();}</code></pre><h4 id="传递HashMap（练习）"><a href="#传递HashMap（练习）" class="headerlink" title="传递HashMap（练习）"></a>传递HashMap（练习）</h4><ul><li>同传递POJO对象一样，map的key相当于pojo的属性。</li></ul><h5 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h5><pre><code>&lt;!-- 传递hashmap综合查询用户信息 --&gt;      &lt;select id=&quot;findUserByHashmap&quot; parameterType=&quot;hashmap&quot; resultType=&quot;user&quot;&gt;     select * from user where id=#{id} and username like &apos;%${username}%&apos;     &lt;/select&gt;          </code></pre><p>  &emsp;&emsp; 上边引用的是hashmap的key。</p><h5 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h5><pre><code>Public void testFindUserByHashmap()throws Exception{      //获取session     SqlSession session = sqlSessionFactory.openSession();      //获限mapper接口实例     UserMapper userMapper = session.getMapper(UserMapper.class);      //构造查询条件Hashmap对象     HashMap&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();     map.put(&quot;id&quot;, 1);     map.put(&quot;username&quot;, &quot;管理员&quot;);     //传递Hashmap对象查询用户列表     List&lt;User&gt;list = userMapper.findUserByHashmap(map);      //关闭session     session.close();     }</code></pre><p>&emsp;异常测试：</p><ul><li>传递的map中的key和sql中解析的key不一致。</li><li>测试结果没有报错，只是通过key获取值为空。</li></ul><h2 id="输出映射"><a href="#输出映射" class="headerlink" title="输出映射"></a>输出映射</h2><h3 id="resultType"><a href="#resultType" class="headerlink" title="resultType"></a>resultType</h3><p>&emsp;&emsp;先看下原先resultType作为输出结果映射时，它的特点，如何再把列名改为别名，看看是否还能不能映射成功。</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ul><li>使用resultType进行结果映射时，查询的列名和映射的pojo属性名完全一致，该列才能映射成功。</li><li>如果查询的列名和映射的pojo属性名全部不一致，则不会创建pojo对象；</li><li>如果查询的列名和映射的pojo属性名有一个一致，就会创建pojo对象。</li></ul><h4 id="输出简单类型"><a href="#输出简单类型" class="headerlink" title="输出简单类型"></a>输出简单类型</h4><p>&emsp;&emsp;当输出结果只有一列时，可以使用ResultType指定简单类型作为输出结果类型。</p><h5 id="需求-3"><a href="#需求-3" class="headerlink" title="需求"></a>需求</h5><p> &emsp;&emsp;综合查询用户总数，需要传入查询条件复杂，比如（用户信息、订单信息、商品信息）。</p><h5 id="Mapper映射文件"><a href="#Mapper映射文件" class="headerlink" title="Mapper映射文件"></a>Mapper映射文件</h5><pre><code>&lt;!-- 综合查询用户信息总数，需要传入查询条件复杂，比如（用户信息、订单信息、商品信息） --&gt;    &lt;select id=&quot;findUsersCount&quot; parameterType=&quot;UserQueryVO&quot;     resultType=&quot;int&quot;&gt;     SELECT count(1) FROM USER WHERE sex = #{userExt.sex} AND username LIKE &apos;%${userExt.username}%&apos;    &lt;/select&gt;</code></pre><h5 id="Mapper接口"><a href="#Mapper接口" class="headerlink" title="Mapper接口"></a>Mapper接口</h5><pre><code>//综合查询用户信息总数。学习：resultType输出简单类型    public int findUsersCount(UserQueryVO vo);        </code></pre><h5 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h5><pre><code>//@Testpublic void testFindUsersCount() {    // 创建SqlSession    SqlSession sqlSession = sqlSessionFactory.openSession();    // 通过SqlSession，获取mapper接口的动态代理对象    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);        //构造userQueryVO对象    UserQueryVO userQueryVO = new UserQueryVO();                // 构造UserExt对象    UserExt userExt = new UserExt();    userExt.setSex(&quot;1&quot;);    userExt.setUsername(&quot;小明&quot;);               userQueryVO.setUserExt(userExt);        int count = mapper.findUsersCount(userQueryVO);    System.out.println(count);    // 关闭SqlSession    sqlSession.close();}</code></pre><h4 id="输出POJO单个对象和列表"><a href="#输出POJO单个对象和列表" class="headerlink" title="输出POJO单个对象和列表"></a>输出POJO单个对象和列表</h4><p>&emsp;<strong>注意：输出单个pojo对象和pojo列表（盛放pojo对象）时，mapper映射文件中的resultType的类型是一样的，mapper接口的方法返回值不同。</strong></p><h5 id="Mapper映射文件-1"><a href="#Mapper映射文件-1" class="headerlink" title="Mapper映射文件"></a>Mapper映射文件</h5><p>&emsp;&emsp;Mapper映射文件是同一个</p><pre><code>&lt;select id=&quot;findUsersByName&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;cn.itcast.mybatis.po.User&quot;&gt;     SELECT * FROM USER WHERE username LIKE &apos;%${value}%&apos;    &lt;/select&gt;</code></pre><h5 id="Mapper接口-1"><a href="#Mapper接口-1" class="headerlink" title="Mapper接口"></a>Mapper接口</h5><p>&emsp;&emsp;下面看下mapper接口的不同之处</p><ol><li>输出单个pojo对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//根据用户名称来模糊查询用户信息  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findUsersByName</span><span class="params">(String username)</span></span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>输出pojo列表</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据用户名称来模糊查询用户信息列表    </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUsersByName</span><span class="params">(String username)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>总结：同样的mapper映射文件，返回单个对象和对象列表时，mapper接口在生成动态代理的时候，会根据返回值的类型，决定调用selectOne方法还是selectList方法。</li></ul><h3 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h3><p>&emsp;&emsp;resultMap可以进行高级结果映射（一对一、一对多映射）。</p><h4 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h4><p>&emsp;&emsp;如果查询出来的列名和属性名不一致，通过定义一个resultMap将列名和pojo属性名之间作一个映射关系。</p><ol><li>定义resultMap</li><li>使用resultMap作为statement的输出映射类型。</li></ol><h4 id="需求-4"><a href="#需求-4" class="headerlink" title="需求"></a>需求</h4><p>&emsp;&emsp;把下面SQL的输出结果集进行映射</p><pre><code>SELECT id id_,username username_,sex sex_ FROM USER WHERE id = 1</code></pre><h4 id="Mapper映射文件-2"><a href="#Mapper映射文件-2" class="headerlink" title="Mapper映射文件"></a>Mapper映射文件</h4><p>&emsp;&emsp;定义resultMap：</p><pre><code>&lt;!-- 定义resultMap --&gt;    &lt;!--     [id]：定义resultMap的唯一标识    [type]：定义该resultMap最终映射的pojo对象     [id标签]：映射结果集的唯一标识列，如果是多个字段联合唯一，则定义多个id标签     [result标签]：映射结果集的普通列     [column]：SQL查询的列名，如果列有别名，则该处填写别名     [property]：pojo对象的属性名    --&gt;    &lt;resultMap type=&quot;user&quot; id=&quot;userResultMap&quot;&gt;      &lt;id column=&quot;id_&quot; property=&quot;id&quot;/&gt;      &lt;result column=&quot;username_&quot; property=&quot;username&quot;/&gt;      &lt;result column=&quot;sex_&quot; property=&quot;sex&quot;/&gt;    &lt;/resultMap&gt;</code></pre><p>&emsp;&emsp;定义statement：</p><pre><code>&lt;!-- 根据ID查询用户信息（学习resultMap） --&gt;    &lt;select id=&quot;findUserByIdResultMap&quot; parameterType=&quot;int&quot; resultMap=&quot;userResultMap&quot;&gt;    SELECT id id_,username username_,sex sex_ FROM USER WHERE id = #{id}    &lt;/select&gt;</code></pre><h4 id="Mapper接口定义"><a href="#Mapper接口定义" class="headerlink" title="Mapper接口定义"></a>Mapper接口定义</h4><pre><code>//根据ID查询用户信息（学习resultMap）public User findUserByIdResultMap(int id);</code></pre><ul><li>定义Statement使用resultMap映射结果集时，Mapper接口定义方法的返回值类型为mapper映射文件中resultMap的type类型。</li></ul><h4 id="测试代码-2"><a href="#测试代码-2" class="headerlink" title="测试代码"></a>测试代码</h4><pre><code>@Test    public  void findUserByIdResultMapTest() {      // 创建SqlSession    SqlSession sqlSession = sqlSessionFactory.openSession();      // 通过SqlSession，获取mapper接口的动态代理对象     UserMapper userMapper = sqlSession.getMapper(UserMapper.class);      // 调用mapper对象的方法     User user = userMapper.findUserByIdResultMap(1);     System._out_.println(user);      // 关闭SqlSession    sqlSession.close();</code></pre><h2 id="动态SQL（重点）"><a href="#动态SQL（重点）" class="headerlink" title="动态SQL（重点）"></a>动态SQL（重点）</h2><p>&emsp;&emsp;通过Mybatis提供的各种动态标签实现动态拼接sql，使得mapper映射文件在编写SQL时更加灵活，方便。常用动态SQL标签有：if、where、foreach；</p><h3 id="If和where"><a href="#If和where" class="headerlink" title="If和where"></a>If和where</h3><ul><li><p>If标签：作为判断入参来使用的，如果符合条件，则把if标签体内的SQL拼接上。<br><strong>注意：用if进行判断是否为空时，不仅要判断null，也要判断空字符串‘’；</strong></p></li><li><p>Where标签：会去掉条件中的第一个and符号。</p></li></ul><h4 id="需求-5"><a href="#需求-5" class="headerlink" title="需求"></a>需求</h4><p>&emsp;&emsp;用户信息综合查询列表和用户信息综合查询总数这两个statement的定义使用动态SQL。</p><h4 id="映射文件-1"><a href="#映射文件-1" class="headerlink" title="映射文件"></a>映射文件</h4><pre><code>&lt;!-- 综合查询用户信息，需要传入查询条件复杂，比如（用户信息、订单信息、商品信息） --&gt;   &lt;select id=&quot;findUsersByQueryVO&quot; parameterType=&quot;cn.itcast.mybatis.po.QueryUserVO&quot;     resultType=&quot;User&quot;&gt;    SELECT * FROM USER      &lt;where&gt;      &lt;if test=&quot;userExt != null&quot;&gt;      &lt;if test=&quot;userExt.sex != null and userExt.sex != &apos;&apos;&quot;&gt;     AND sex = #{userExt.sex}      &lt;/if&gt;      &lt;if test=&quot;userExt.username != null and userExt.username != &apos;&apos;&quot;&gt;     AND username LIKE &apos;%${userExt.username}%&apos;      &lt;/if&gt;      &lt;/if&gt;      &lt;/where&gt;    &lt;/select&gt;    &lt;!-- 综合查询用户信息总数，需要传入查询条件复杂，比如（用户信息、订单信息、商品信息） --&gt;    &lt;select id=&quot;findUsersCount&quot; parameterType=&quot;QueryUserVO&quot;    resultType=&quot;int&quot;&gt;     SELECT count(1) FROM USER      &lt;where&gt;      &lt;if test=&quot;userExt != null&quot;&gt;      &lt;if test=&quot;userExt.sex != null and userExt.sex != &apos;&apos;&quot;&gt;    AND sex = #{userExt.sex}      &lt;/if&gt;      &lt;if test=&quot;userExt.username != null and userExt.username != &apos;&apos;&quot;&gt;     AND username LIKE &apos;%${userExt.username}%&apos;      &lt;/if&gt;      &lt;/if&gt;      &lt;/where&gt;    &lt;/select&gt;</code></pre><h4 id="Mapper接口-2"><a href="#Mapper接口-2" class="headerlink" title="Mapper接口"></a>Mapper接口</h4><pre><code>//通过包装类来进行复杂的用户信息综合查询    public List&lt;UserExt&gt; findUserList(UserQueryVO userQueryVO);    //综合查询用户总数    public int findUsersCount(UserQueryVO userQueryVO);</code></pre><h4 id="测试代码-3"><a href="#测试代码-3" class="headerlink" title="测试代码"></a>测试代码</h4><p>&emsp;&emsp;不传用户名：<br><img src="/images/mybatis/7.3.1.png" alt="7.3.1"></p><p>&emsp;&emsp;输出的SQL如下（也不包含用户名）：<br><img src="/images/mybatis/7.3.2.png" alt="7.3.2"></p><p>&emsp;通过测试可以得知，打印出的SQL语句确实会随着条件的满足情况而不一样。</p><h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><p>&emsp;&emsp;Mybatis提供了SQL片段的功能，可以提高SQL的可重用性。</p><h4 id="定义SQL片段"><a href="#定义SQL片段" class="headerlink" title="定义SQL片段"></a>定义SQL片段</h4><p>&emsp;&emsp;使用sql标签来定义一个SQL片段：</p><pre><code>//&lt;!-- 定义SQL片段 --&gt;    &lt;!--     [sql标签]：定义一个SQL片段     [id]：SQL片段的唯一标识      建议：     1、SQL片段中的内容最好是以单表来定义     2、如果是查询字段，则不要写上SELECT     3、如果是条件语句，则不要写上WHERE     --&gt;    &lt;sql id=_&quot;select_user_where&quot;_&gt;      &lt;if test=_&quot;userExt != null&quot;_&gt;      &lt;if test=_&quot;userExt.sex != null and userExt.sex != &apos;&apos;&quot;_&gt;     AND sex = #{userExt.sex}      &lt;/if&gt;      &lt;if test=_&quot;userExt.username != null and userExt.username != &apos;&apos;&quot;_&gt;     AND username LIKE &apos;%${userExt.username}%&apos;      &lt;/if&gt;      &lt;/if&gt;    &lt;/sql&gt;</code></pre><h4 id="引用SQL片段"><a href="#引用SQL片段" class="headerlink" title="引用SQL片段"></a>引用SQL片段</h4><p>&emsp;&emsp;使用<code>&lt;include refid=’’ /&gt;</code> 来引用SQL片段：</p><pre><code>//&lt;!-- 根据用户id来查询用户信息（使用SQL片段） --&gt;    &lt;!--     [include标签]：引用已经定义好的SQL片段     [refid]：引用的SQL片段id    --&gt;    &lt;select id=_&quot;findUserList&quot;_ parameterType=_&quot;userQueryVO&quot;_ resultType=_&quot;userExt&quot;_&gt;    SELECT * FROM USER    &lt;where&gt;      &lt;include refid=_&quot;select_user_where&quot;_/&gt;     &lt;/where&gt;    &lt;/select&gt;    &lt;!-- 综合查询用户信息总数，需要传入查询条件复杂，比如（用户信息、订单信息、商品信息） --&gt;    &lt;select id=_&quot;findUsersCount&quot;_ parameterType=_&quot;QueryUserVO&quot;_     resultType=_&quot;int&quot;_&gt;     SELECT count(1) FROM USER      &lt;where&gt;      &lt;include refid=_&quot;select_user_where&quot;_/&gt;      &lt;/where&gt;    &lt;/select&gt;</code></pre><h3 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h3><p>&emsp;&emsp;向sql传递数组或List时，mybatis使用foreach解析数组里的参数并拼接到SQL中。</p><h4 id="传递pojo对象中的List集合"><a href="#传递pojo对象中的List集合" class="headerlink" title="传递pojo对象中的List集合"></a>传递pojo对象中的List集合</h4><h5 id="需求-6"><a href="#需求-6" class="headerlink" title="需求"></a>需求</h5><p>&emsp;&emsp;在用户查询列表和查询总数的statement中增加多个id输入查询。</p><h5 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h5><p><code>SELECT * FROM user WHERE id IN (1,10,16)</code></p><p>定义pojo中的List属性<br><img src="/images/mybatis/7.3.3.png" alt="7.3.3"></p><h5 id="映射文件-2"><a href="#映射文件-2" class="headerlink" title="映射文件"></a>映射文件</h5><pre><code>//&lt;!-- [foreach标签]：表示一个foreach循环 --&gt;    &lt;!-- [collection]：集合参数的名称，如果是直接传入集合参数，则该处的参数名称只能填写[list]。 --&gt;    &lt;!-- [item]：每次遍历出来的对象 --&gt;    &lt;!-- [open]：开始遍历时拼接的串 --&gt;    &lt;!-- [close]：结束遍历时拼接的串 --&gt;    &lt;!-- [separator]：遍历出的每个对象之间需要拼接的字符 --&gt;    &lt;if test=_&quot;idList != null and idList.size &gt; 0&quot;_&gt;    &lt;foreach collection=_&quot;idList&quot;_ item=_&quot;id&quot;_ open=_&quot;AND id IN (&quot;_ close=_&quot;)&quot;_ separator=_&quot;,&quot;_&gt;     #{id}    &lt;/foreach&gt;    &lt;/if&gt;</code></pre><h5 id="Mapper接口-3"><a href="#Mapper接口-3" class="headerlink" title="Mapper接口"></a>Mapper接口</h5><p>&emsp;&emsp;根据用户ID的集合查询用户列表（学习foreach标签之通过POJO对象传ID集合）<br><code>public List&lt;UserExt&gt; findUserList(UserQueryVO vo);</code></p><h5 id="测试代码-4"><a href="#测试代码-4" class="headerlink" title="测试代码"></a>测试代码</h5><pre><code>//@Test    public  void testFindUserList() {      // 创建SqlSession     SqlSession sqlSession = sqlSessionFactory.openSession();      // 通过SqlSession，获取mapper接口的动态代理对象     UserMapper mapper = sqlSession.getMapper(UserMapper.class);      // 构造QueryUserVO对象     QueryUserVO vo = new QueryUserVO();      // UserExt ext = new UserExt();      // ext.setUsername(&quot;小明&quot;);      // ext.setSex(&quot;1&quot;);      // vo.setUserExt(ext);      // 创建用户ID集合，然后设置到QueryUserVO对象中     List&lt;Integer&gt; idList = new ArrayList&lt;Integer&gt;();     idList.add(1);     idList.add(10);     idList.add(16);     vo.setIdList(idList);      // 调用mapper代理对象的方法     List&lt;UserExt&gt; list = mapper.findUserList(vo);     System._out_.println(list);      // 关闭SqlSession     sqlSession.close();    }</code></pre><h4 id="直接传递List集合"><a href="#直接传递List集合" class="headerlink" title="直接传递List集合"></a>直接传递List集合</h4><h5 id="需求-7"><a href="#需求-7" class="headerlink" title="需求"></a>需求</h5><p>&emsp;&emsp;根据用户ID的集合查询用户列表</p><h5 id="SQL-1"><a href="#SQL-1" class="headerlink" title="SQL"></a>SQL</h5><p><code>SELECT * FROM user WHERE id IN (1,10,16)</code></p><h5 id="映射文件-3"><a href="#映射文件-3" class="headerlink" title="映射文件"></a>映射文件</h5><pre><code>//&lt;!-- 根据用户ID的集合查询用户列表（学习foreach标签之直接传ID集合） --&gt;    &lt;!--     [foreach标签]：表示一个foreach循环     [collection]：集合参数的名称，如果是直接传入集合参数，则该处的参数名称只能填写[list]。     [item]：定义遍历集合之后的参数名称     [open]：开始遍历之前需要拼接的SQL串     [close]：结束遍历之后需要拼接的SQL串     [separator]：遍历出的每个对象之间需要拼接的字符     --&gt;    &lt;select id=&quot;findUsersByIdList&quot; parameterType=&quot;java.util.List&quot; resultType=&quot;user&quot;&gt;     SELECT * FROM USER      &lt;where&gt;      &lt;if test=&quot;list!= null and list.size &gt; 0&quot;&gt;      &lt;foreach collection=&quot;list&quot; item=&quot;id&quot; open=&quot;AND id IN (&quot; close=&quot;)&quot;_separator=&quot;,&quot;&gt;     #{id}      &lt;/foreach&gt;      &lt;/if&gt;      &lt;/where&gt;    &lt;/select&gt;</code></pre><h5 id="Mapper接口-4"><a href="#Mapper接口-4" class="headerlink" title="Mapper接口"></a>Mapper接口</h5><pre><code>//根据用户ID的集合查询用户列表（学习foreach标签之直接传ID集合)    public List&lt;User&gt; findUsersByIdList (List&lt;Integer&gt; idList);</code></pre><h5 id="测试代码-5"><a href="#测试代码-5" class="headerlink" title="测试代码"></a>测试代码</h5><pre><code>//@Test    public  void findUsersByIdListTest() {      // 创建SqlSession     SqlSession sqlSession = sqlSessionFactory.openSession();      // 通过SqlSession，获取mapper接口的动态代理对象     UserMapper userMapper = sqlSession.getMapper(UserMapper.class);      // 构造List&lt;Integer&gt;集合     List&lt;Integer&gt; idList = new ArrayList&lt;Integer&gt;();     idList.add(1);     idList.add(10);    idList.add(16);      // 调用mapper对象的方法     List&lt;User&gt; list = userMapper.findUsersByIdList (idList);     System.out.println(list);      // 关闭SqlSession     sqlSession.close();    }</code></pre><h1 id="mybatis与hibernate的区别及各自应用场景"><a href="#mybatis与hibernate的区别及各自应用场景" class="headerlink" title="mybatis与hibernate的区别及各自应用场景"></a>mybatis与hibernate的区别及各自应用场景</h1><p>&emsp;Mybatis技术特点：</p><ol><li>通过直接编写SQL语句，可以直接对SQL进行性能的优化；</li><li>学习门槛低，学习成本低。只要有SQL基础，就可以学习mybatis，而且很容易上手；</li><li>由于直接编写SQL语句，所以灵活多变，代码维护性更好。</li><li>不能支持数据库无关性，即数据库发生变更，要写多套代码进行支持，移植性不好。</li><li>需要编写结果映射。</li></ol><p>&emsp;Hibernate技术特点：</p><ol><li>标准的orm框架，程序员不需要编写SQL语句。</li><li>具有良好的数据库无关性，即数据库发生变化的话，代码无需再次编写。</li><li>学习门槛高，需要对数据关系模型有良好的基础，而且在设置OR映射的时候，需要考虑好性能和对象模型的权衡。</li><li>程序员不能自主的去进行SQL性能优化。</li></ol><p>&emsp;Mybatis应用场景：</p><p>  &emsp;&emsp;需求多变的互联网项目，例如电商项目。</p><p>&emsp;Hibernate应用场景：</p><p>  &emsp;&emsp;需求明确、业务固定的项目，例如OA项目、ERP项目等。</p><h1 id="关联查询映射"><a href="#关联查询映射" class="headerlink" title="关联查询映射"></a>关联查询映射</h1><h2 id="分析数据模型"><a href="#分析数据模型" class="headerlink" title="分析数据模型"></a>分析数据模型</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li><p>每张表记录的数据内容<br>&emsp;&emsp;分模块对每张表记录的内容进行熟悉，相当于你学习系统需求（功能）的过程。</p></li><li><p>每张表重要的字段<br>&emsp;&emsp;主键、外键、非空字段</p></li><li><p>数据库级别表与表的关系<br>&emsp;&emsp;外键关系</p></li><li><p>表与表之间的业务关系<br>&emsp;&emsp;在分析表与表之间的业务关系时一定要建立 在某个业务意义基础上去分析。<br>&emsp;&emsp;图形分析:<br><img src="/images/mybatis/9.1.png" alt="9.1"></p></li></ol><h3 id="数据库表之间有外键关系的业务关系"><a href="#数据库表之间有外键关系的业务关系" class="headerlink" title="数据库表之间有外键关系的业务关系"></a>数据库表之间有外键关系的业务关系</h3><p>user和orders：<br>&emsp;&emsp;user—-&gt;orders：一个用户可以创建多个订单，一对多<br>&emsp;&emsp;orders—&gt;user：一个订单只由一个用户创建，一对一</p><p>orders和orderdetail：<br>&emsp;&emsp;orders—&gt;orderdetail：一个订单可以包括 多个订单明细，因为一个订单可以购买多个商品，每个商品的购买信息在orderdetail记录，一对多关系<br>&emsp;&emsp;orderdetail–&gt; orders：一个订单明细只能包括在一个订单中，一对一</p><p>orderdetail和itesm：<br>&emsp;&emsp;orderdetail—&gt;itesms：一个订单明细只对应一个商品信息，一对一<br>&emsp;&emsp;items—&gt; orderdetail:一个商品可以包括在多个订单明细 ，一对多</p><h3 id="数据库表之间没有外键关系的业务关系"><a href="#数据库表之间没有外键关系的业务关系" class="headerlink" title="数据库表之间没有外键关系的业务关系"></a>数据库表之间没有外键关系的业务关系</h3><p>Orders和items：//这两张表没有直接的外键关系，通过业务及数据库的间接关系分析出它们是多对多的关系。<br>&emsp;&emsp;Orders—&gt; orderdetai—&gt;items：一个订单可以有多个订单明细，一个订单明细对应一个商品，所以一个订单对应多个商品<br>&emsp;&emsp;Items—&gt;orderdetail—&gt;orders：一个商品可以对应多个订单明细，一个订单明细对应一个订单，所以一个商品对应多个订单</p><p>User和items：//这两张表没有直接的外键关系，通过业务及数据库的间接关系分析出它们是多对多的关系。<br>&emsp;&emsp;User—&gt;orders—&gt;orderdetail—&gt;items：一个用户有多个订单，一个订单有多个订单明细、一个订单明细对应一个商品，所以一个用户对应多个商品<br>&emsp;&emsp;Items—&gt;orderdetail—&gt;orders—&gt;user：一个商品对应多个订单明细，一个订单明细对应一个订单，一个订单对应一个用户，所以一个商品对应多个用户</p><h2 id="一对一查询"><a href="#一对一查询" class="headerlink" title="一对一查询"></a>一对一查询</h2><h3 id="需求-8"><a href="#需求-8" class="headerlink" title="需求"></a>需求</h3><p>&emsp;&emsp;查询订单信息，关联查询创建订单的用户信息</p><h3 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h3><p>&emsp;&emsp;确定查询的主表：订单表<br>&emsp;&emsp;确定查询的关联表：用户表<br>&emsp;&emsp;关联查询使用内链接？还是外链接？</p><pre><code>//Select        Orders.id,        Orders.user_id,        orders.number,        orders.createtime,        orders.note,        user.username,        user.address    from orders,user    where orders.user_id = user.id</code></pre><h3 id="resultType-1"><a href="#resultType-1" class="headerlink" title="resultType"></a>resultType</h3><p>&emsp;&emsp;复杂查询时，单表对应的po类已不能满足输出结果集的映射。所以要根据需求建立一个扩展类来作为resultType的类型。</p><h4 id="创建po类"><a href="#创建po类" class="headerlink" title="创建po类"></a>创建po类</h4><pre><code>//通过此类映射订单和用户查询的结果，让此类继承包括 字段较多的pojo类public class OrdersExt extends Orders{            //添加用户属性    /*USER.username,      USER.address */            private String username;    private String address;    public String getUsername() {        return username;    }    public void setUsername(String username) {        this.username = username;    }    public String getAddress() {        return address;    }    public void setAddress(String address) {        this.address = address;    }        }</code></pre><h4 id="编写mapper接口-1"><a href="#编写mapper接口-1" class="headerlink" title="编写mapper接口"></a>编写mapper接口</h4><p>&emsp;&emsp;创建OrdersMapper接口类，在类中添加以下内容：</p><pre><code>// 进行订单信息查询，包括用户的名称和地址信息    public List&lt;OrdersExt&gt; findOrdersUser();</code></pre><h4 id="编写映射文件-5"><a href="#编写映射文件-5" class="headerlink" title="编写映射文件"></a>编写映射文件</h4><pre><code>//&lt;mapper namespace=&quot;cn.itcast.mybatis.mapper.OrdersMapper&quot;&gt;      &lt;!-- 定义查询订单表列名的SQL片段 --&gt;      &lt;sql id=&quot;select_orders&quot;&gt;     Orders.id,     Orders.user_id,    orders.number,     orders.createtime,     orders.note      &lt;/sql&gt;      &lt;!-- 定义查询用户表列名的SQL片段 --&gt;      &lt;sql id=&quot;select_user&quot;&gt;     user.username,     user.address      &lt;/sql&gt;      &lt;!-- 进行订单信息查询，包括用户的名称和地址信息 --&gt;      &lt;select id=&quot;findOrdersUser&quot; resultType=&quot;OrdersExt&quot;&gt;     Select      &lt;include refid=&quot;select_orders&quot; /&gt;      &lt;include refid=&quot;select_user&quot;&gt;&lt;/include&gt;     from orders,user     where orders.user_id = user.id      &lt;/select&gt;    &lt;/mapper&gt;</code></pre><h4 id="加载映射文件-5"><a href="#加载映射文件-5" class="headerlink" title="加载映射文件"></a>加载映射文件</h4><pre><code>//&lt;!-- 批量加载mapper文件，需要mapper接口文件和mapper映射文件名称相同且在同一个包下 --&gt;&lt;package name=&quot;cn.itcast.mybatis.mapper&quot;/&gt;</code></pre><h4 id="编写测试代码-3"><a href="#编写测试代码-3" class="headerlink" title="编写测试代码"></a>编写测试代码</h4><pre><code>//@Test    public  void testFindOrdersUser() {      // 创建sqlSession     SqlSession sqlSession = sqlSessionFactory.openSession();      // 通过SqlSession构造usermapper的代理对象     OrdersMapper ordersMapper = sqlSession.getMapper(OrdersMapper.class);      // 调用usermapper的方法     List&lt;OrdersExt&gt; list = ordersMapper.findOrdersUser();    System.out.println(list);      // 释放SqlSession     sqlSession.close();    }</code></pre><h3 id="resultMap-1"><a href="#resultMap-1" class="headerlink" title="resultMap"></a>resultMap</h3><h4 id="修改po类"><a href="#修改po类" class="headerlink" title="修改po类"></a>修改po类</h4><p>&emsp;&emsp;在Orders类中，添加User对象</p><pre><code>//public class Orders {private Integer id;private Integer userId;private String number;private Date createtime;private String note;    //用户信息private User user;</code></pre><h4 id="编写mapper接口-2"><a href="#编写mapper接口-2" class="headerlink" title="编写mapper接口"></a>编写mapper接口</h4><pre><code> // 进行订单信息查询，包括用户的名称和地址信息（resultMap）public List&lt;OrdersExt&gt; findOrdersUserRstMap();</code></pre><h4 id="编写映射文件-6"><a href="#编写映射文件-6" class="headerlink" title="编写映射文件"></a>编写映射文件</h4><pre><code>//&lt;!-- 进行订单信息查询，包括用户的名称和地址信息 (ResultMap) --&gt;      &lt;select id=&quot;findOrdersUserRstMap&quot; resultMap=&quot;OrdersUserRstMap&quot;&gt;          Select          &lt;include refid=&quot;select_orders&quot; /&gt;          ,          &lt;include refid=&quot;select_user&quot;&gt;&lt;/include&gt;          from orders,user          where orders.user_id = user.id      &lt;/select&gt;            &lt;!-- 定义orderUserResultMap --&gt;      &lt;resultMap type=&quot; cn.itcast.mybatis.po.Orders&quot; id=&quot;OrdersUserRstMap&quot;&gt;          &lt;id column=&quot;id&quot; property=&quot;id&quot; /&gt;          &lt;result column=&quot;user_id&quot; property=&quot;userId&quot; /&gt;          &lt;result column=&quot;number&quot; property=&quot;number&quot; /&gt;          &lt;result column=&quot;createtime&quot; property=&quot;createtime&quot; /&gt;          &lt;result column=&quot;note&quot; property=&quot;note&quot; /&gt;          &lt;!-- 映射一对一关联关系的用户对象--&gt;          &lt;!--               property：指定关联对象要映射到Orders的哪个属性上               javaType：指定关联对象所要映射的java类型            --&gt;          &lt;!-- id标签：指定关联对象结果集的唯一标识，很重要，不写不会报错，但是会影响性能 --&gt;          &lt;association property=&quot;user&quot; javaType=&quot;cn.itcast.mybatis.po.User&quot;&gt;              &lt;id column=&quot;user_id&quot; property=&quot;id&quot; /&gt;              &lt;result column=&quot;username&quot; property=&quot;username&quot; /&gt;              &lt;result column=&quot;address&quot; property=&quot;address&quot; /&gt;          &lt;/association&gt;      &lt;/resultMap&gt;</code></pre><h4 id="编写测试代码-4"><a href="#编写测试代码-4" class="headerlink" title="编写测试代码"></a>编写测试代码</h4><pre><code>//@Test    public  void testFindOrdersUserRstMap() {      // 创建sqlSession     SqlSession sqlSession = sqlSessionFactory.openSession();      // 通过SqlSession构造usermapper的代理对象     OrdersMapper ordersMapper = sqlSession.getMapper(OrdersMapper.class);      // 调用usermapper的方法     List&lt;Orders&gt; list = ordersMapper.findOrdersUserRstMap();      //此处我们采用debug模式来跟踪代码，然后验证结果集是否正确     System.out.println(list);     // 释放SqlSession     sqlSession.close();    }</code></pre><h3 id="一对一小结"><a href="#一对一小结" class="headerlink" title="一对一小结"></a>一对一小结</h3><p>实现一对一查询：</p><ul><li><p>resultType：使用resultType实现较为简单，如果pojo中没有包括查询出来的列名，需要增加列名对应的属性，即可完成映射。如果没有查询结果的特殊要求建议使用resultType。</p></li><li><p>resultMap：需要单独定义resultMap，实现有点麻烦，如果对查询结果有特殊的要求，使用resultMap可以完成将关联查询映射pojo的对象属性中。resultMap可以实现延迟加载，resultType无法实现延迟加载。</p></li></ul><h2 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h2><p>&emsp;&emsp;一对多查询和一对一查询的配置基本类似。只是如果使用resultMap的话，映射一对多关联关系要使用collection标签。</p><h3 id="需求-9"><a href="#需求-9" class="headerlink" title="需求"></a>需求</h3><p>&emsp;&emsp;查询订单信息及订单明细信息</p><h3 id="SQL语句-1"><a href="#SQL语句-1" class="headerlink" title="SQL语句"></a>SQL语句</h3><p>&emsp;&emsp;确定主查询表：订单表<br>&emsp;&emsp;确定关联查询表：订单明细表<br>&emsp;&emsp;在一对一查询基础上添加订单明细表关联即可。</p><pre><code>//Select    Orders.id,    Orders.user_id,    orders.number,    orders.createtime,    orders.note,    user.username,    user.address,    orderdetail.id detail_id,    orderdetail.items_id,    orderdetail.items_numfrom orders,user,orderdetailwhere orders.user_id = user.id     and orders.id = orderdetail.orders_id</code></pre><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>&emsp;&emsp;使用resultType将上边的 查询结果映射到pojo中，订单信息将会重复。<br><img src="/images/mybatis/7.3.4.png" alt="7.3.4"></p><p>&emsp;要求：<br>&emsp;&emsp;对orders映射不能出现重复记录。</p><ul><li>在orders.java类中添加List<orderdetail> detailList属性。最终会将订单信息映射到orders中，订单所对应的订单明细映射到orders中的detailList属性中。<br><img src="/images/mybatis/7.3.5.png" alt="7.3.5"></orderdetail></li><li>映射成的orders记录数为两条（orders信息不重复）,每个orders中的detailList属性存储了该订单所对应的订单明细集合。</li></ul><h3 id="修改PO类"><a href="#修改PO类" class="headerlink" title="修改PO类"></a>修改PO类</h3><p>&emsp;&emsp;在Orders类中添加以下属性，并提供get/set方法：</p><pre><code>//订单明细private List&lt;Orderdetail&gt; detailList;</code></pre><h3 id="编写mapper接口-3"><a href="#编写mapper接口-3" class="headerlink" title="编写mapper接口"></a>编写mapper接口</h3><pre><code>// 查询订单信息及订单明细信息（一对多映射之使用resultMap）public List&lt;Orders&gt; findOrdersAndOrderdetailRstMap();</code></pre><h3 id="编写映射文件-7"><a href="#编写映射文件-7" class="headerlink" title="编写映射文件"></a>编写映射文件</h3><pre><code>//&lt;!-- 定义OrdersAndOrderdetailRstMap --&gt;&lt;!-- extends：继承已有的ResultMap，值为继承的ResultMap的唯一标示 --&gt;&lt;resultMap type=&quot;Orders&quot; id=&quot;OrdersAndOrderdetailRstMap&quot;    extends=&quot;OrdersUserRstMap&quot;&gt;        &lt;!-- 映射关联关系（一对多） --&gt;        &lt;!-- collection标签：定义一个一对多关系            ofType：指定该集合参数所映射的类型         --&gt;        &lt;collection property=&quot;detailList&quot; ofType=&quot;Orderdetail&quot;&gt;            &lt;id column=&quot;detail_id&quot; property=&quot;id&quot; /&gt;            &lt;result column=&quot;items_id&quot; property=&quot;itemsId&quot; /&gt;            &lt;result column=&quot;items_num&quot; property=&quot;itemsNum&quot; /&gt;        &lt;/collection&gt;    &lt;/resultMap&gt;    &lt;!-- 查询订单信息，包括用户名称、用户地址，订单商品信息（嵌套结果） --&gt;&lt;select id=&quot;findOrdersAndOrderdetailRstMap&quot; resultMap=&quot;OrdersAndOrderdetailRstMap&quot;&gt;            Select        &lt;include refid=&quot;select_orders&quot; /&gt;        ,        &lt;include refid=&quot;select_user&quot;/&gt;        ,        orderdetail.id detail_id,        orderdetail.items_id,        orderdetail.items_num        from orders,user,orderdetail        where orders.user_id = user.id        and        orders.id = orderdetail.orders_id        &lt;/select&gt;</code></pre><p>&emsp;&emsp;resultMap的extends属性：可以用此属性来继承一个已有的resultmap。但是它继承的resultMap的type和它本身的type要保持一致。</p><h3 id="编写测试代码-5"><a href="#编写测试代码-5" class="headerlink" title="编写测试代码"></a>编写测试代码</h3><pre><code>//@Testpublic void testFindOrdersAndOrderdetailRstMap() {    // 创建sqlSession    SqlSession sqlSession = sqlSessionFactory.openSession();        // 通过SqlSession构造usermapper的代理对象    OrdersMapper ordersMapper = sqlSession.getMapper(OrdersMapper.class);    // 调用usermapper的方法    List&lt;Orders&gt; list = ordersMapper.findOrdersAndOrderdetailRstMap();                //此处我们采用debug模式来跟踪代码，然后验证结果集是否正确    System.out.println(list);    // 释放SqlSession    sqlSession.close();}</code></pre><h3 id="一对多小结"><a href="#一对多小结" class="headerlink" title="一对多小结"></a>一对多小结</h3><p>&emsp;&emsp;mybatis使用resultMap的collection对关联查询的多条记录映射到一个list集合属性中。<br>使用resultType实现：</p><ul><li>需要对结果集进行二次处理。</li><li>将订单明细映射到orders中的orderdetails中，需要自己处理，使用双重循环遍历，去掉重复记录，将订单明细放在orderdetails中。</li></ul><h2 id="多对多查询"><a href="#多对多查询" class="headerlink" title="多对多查询"></a>多对多查询</h2><h3 id="需求-10"><a href="#需求-10" class="headerlink" title="需求"></a>需求</h3><p>&emsp;&emsp;查询用户信息及用户购买的商品信息，要求将关联信息映射到主pojo的pojo属性中</p><h3 id="SQL语句-2"><a href="#SQL语句-2" class="headerlink" title="SQL语句"></a>SQL语句</h3><p>&emsp;&emsp;查询主表：user<br>&emsp;&emsp;查询关联表：orders、orderdetail、items</p><pre><code>//Select      Orders.id,      Orders.user_id,      orders.number,    orders.createtime,    orders.note,    user.username,    user.address,    orderdetail.id detail_id,    orderdetail.items_id,    orderdetail.items_num    items.name items_name,    items.detail items_detail    FROM    orders,  USER,    orderdetail,    items   WHERE user.`id` = orders.`user_id`     AND orders.`id` = orderdetail.`orders_id`     AND orderdetail.`items_id` = items.`id`</code></pre><h3 id="映射思路"><a href="#映射思路" class="headerlink" title="映射思路"></a>映射思路</h3><ul><li>将用户信息映射到user中。</li><li>在user类中添加订单列表属性List<orders> orderslist，将用户创建的订单映射到orderslist</orders></li><li>在Orders中添加订单明细列表属性List<orderdetail> detailList，将订单的明细映射到detailList</orderdetail></li><li>在Orderdetail中添加Items属性，将订单明细所对应的商品映射到Items</li></ul><h3 id="修改PO类-1"><a href="#修改PO类-1" class="headerlink" title="修改PO类"></a>修改PO类</h3><p>&emsp;&emsp;在user类中添加List<orders> ordersList 属性</orders></p><pre><code>// 订单信息private List&lt;Orders&gt; ordersList;</code></pre><p>&emsp;&emsp;在Orders类中添加List<orderdetail>属性</orderdetail></p><pre><code>//订单明细private List&lt;Orderdetail&gt; detailList;</code></pre><p>&emsp;&emsp;在Orderdetail类中添加Items属性</p><pre><code>//商品信息private Items items;</code></pre><h3 id="编写mapper接口-4"><a href="#编写mapper接口-4" class="headerlink" title="编写mapper接口"></a>编写mapper接口</h3><pre><code>//查询用户及用户购买商品信息（多对多映射之使用resultMap）public List&lt;User&gt; findUserAndItemsRstMap();</code></pre><h3 id="编写映射文件-8"><a href="#编写映射文件-8" class="headerlink" title="编写映射文件"></a>编写映射文件</h3><pre><code>//&lt;!-- 定义UserAndItemsRstMap --&gt;    &lt;resultMap type=&quot;User&quot; id=&quot;UserAndItemsRstMap&quot;&gt;        &lt;!-- 用户信息 --&gt;        &lt;!-- id：关联查询用户的唯一标示 --&gt;        &lt;id column=&quot;user_id&quot; property=&quot;id&quot; /&gt;        &lt;result column=&quot;username&quot; property=&quot;username&quot; /&gt;        &lt;result column=&quot;address&quot; property=&quot;address&quot; /&gt;        &lt;!-- 订单信息 （一个用户有多个订单） --&gt;        &lt;collection property=&quot;ordersList&quot; ofType=&quot;orders&quot;&gt;            &lt;id column=&quot;id&quot; property=&quot;id&quot; /&gt;            &lt;result column=&quot;user_id&quot; property=&quot;userId&quot; /&gt;            &lt;result column=&quot;number&quot; property=&quot;number&quot; /&gt;            &lt;result column=&quot;createtime&quot; property=&quot;createtime&quot; /&gt;            &lt;result column=&quot;note&quot; property=&quot;note&quot; /&gt;            &lt;!-- 订单明细信息（一个订单有多个订单明细） --&gt;            &lt;collection property=&quot;detailList&quot; ofType=&quot;orderdetail&quot;&gt;                &lt;id column=&quot;detail_id&quot; property=&quot;id&quot; /&gt;                &lt;result column=&quot;items_id&quot; property=&quot;itemsId&quot; /&gt;                &lt;result column=&quot;items_num&quot; property=&quot;itemsNum&quot; /&gt;                &lt;!-- 商品信息 （一个订单明细对应一个商品） --&gt;                &lt;association property=&quot;items&quot; javaType=&quot;cn.itcast.mybatis.po.Items&quot;&gt;                    &lt;id column=&quot;items_id&quot; property=&quot;id&quot; /&gt;                    &lt;result column=&quot;items_name&quot; property=&quot;name&quot; /&gt;                    &lt;result column=&quot;items_detail&quot; property=&quot;detail&quot; /&gt;                &lt;/association&gt;            &lt;/collection&gt;        &lt;/collection&gt;    &lt;/resultMap&gt;        &lt;!-- 查询用户及用户购买商品信息（多对多映射之使用resultMap） --&gt;    &lt;select id=&quot;findUserAndItemsRstMap&quot; resultMap=&quot;UserAndItemsRstMap&quot;&gt;        Select        &lt;include refid=&quot;select_orders&quot; /&gt;        ,        &lt;include refid=&quot;select_user&quot; /&gt;        ,        &lt;include refid=&quot;select_orderdetail&quot;&gt;&lt;/include&gt;        ,        items.name items_name,        items.detail items_detail        from        orders,user,orderdetail,items        where orders.user_id = user.id        and        orders.id = orderdetail.orders_id        and orderdetail.items_id = items.id    &lt;/select&gt;</code></pre><h3 id="编写测试代码-6"><a href="#编写测试代码-6" class="headerlink" title="编写测试代码"></a>编写测试代码</h3><pre><code>//@Test    public void testFindUserAndItemsRstMap() {        // 创建sqlSession        SqlSession sqlSession = sqlSessionFactory.openSession();            // 通过SqlSession构造usermapper的代理对象        OrdersMapper ordersMapper = sqlSession.getMapper(OrdersMapper.class);        // 调用usermapper的方法        List&lt;User&gt; list = ordersMapper.findUserAndItemsRstMap();            // 此处我们采用debug模式来跟踪代码，然后验证结果集是否正确        System.out.println(list);        // 释放SqlSession        sqlSession.close();    }</code></pre><h3 id="多对多查询小结"><a href="#多对多查询小结" class="headerlink" title="多对多查询小结"></a>多对多查询小结</h3><p>&emsp;&emsp;将查询用户购买的商品信息明细清单，（用户名、用户地址、购买商品名称、购买商品时间、购买商品数量）<br>&emsp;&emsp;针对上边的需求就使用resultType将查询到的记录映射到一个扩展的pojo中，很简单实现明细清单的功能。</p><p>&emsp;&emsp;一对多是多对多的特例，如下需求：//查询用户购买的商品信息，用户和商品的关系是多对多关系。</p><ul><li><p>需求1：<br>&emsp;&emsp;&emsp;&emsp;查询字段：用户账号、用户名称、用户性别、商品名称、商品价格(最常见)<br>&emsp;&emsp;&emsp;&emsp;企业开发中常见明细列表，用户购买商品明细列表，使用resultType将上边查询列映射到pojo输出。</p></li><li><p>需求2：<br>&emsp;&emsp;&emsp;&emsp;查询字段：用户账号、用户名称、购买商品数量、商品明细（鼠标移上显示明细）<br>&emsp;&emsp;&emsp;&emsp;使用resultMap将用户购买的商品明细列表映射到user对象中。</p></li></ul><p><strong>总结：</strong><br>&emsp;&emsp;使用resultMap是针对那些对查询结果映射有特殊要求的功能，，比如特殊要求映射成list中包括 多个list。</p><h2 id="高级映射总结"><a href="#高级映射总结" class="headerlink" title="高级映射总结"></a>高级映射总结</h2><ul><li><p>resultType：<br>&emsp;&emsp;作用：<br>&emsp;&emsp;&emsp;&emsp;将查询结果按照sql列名pojo属性名一致性映射到pojo中。<br>&emsp;&emsp;场合：<br>&emsp;&emsp;&emsp;&emsp;常见一些明细记录的展示，比如用户购买商品明细，将关联查询信息全部展示在页面时，此时可直接使用resultType将每一条记录映射到pojo中，在前端页面遍历list（list中是pojo）即可。</p></li><li><p>resultMap：<br>&emsp;&emsp;使用association和collection完成一对一和一对多高级映射（对结果有特殊的映射要求）。</p></li><li><ul><li>association：<br>&emsp;&emsp;作用：<br>&emsp;&emsp;&emsp;&emsp;  将关联查询信息映射到一个pojo对象中。<br>&emsp;&emsp;场合：<br>&emsp;&emsp;&emsp;&emsp;为了方便查询关联信息可以使用association将关联订单信息映射为用户对象的pojo属性中，比如：查询订单及关联用户信息。</li></ul></li></ul><p>//  &emsp;&emsp;使用resultType无法将查询结果映射到pojo对象的pojo属性中，根据对结果集查询遍历的需要选择使用resultType还是resultMap。</p><ul><li><ul><li>collection：<br>&emsp;&emsp;作用：<br>&emsp;&emsp;&emsp;&emsp; 将关联查询信息映射到一个list集合中。<br>&emsp;&emsp;场合：<br>&emsp;&emsp;&emsp;&emsp;为了方便查询遍历关联信息可以使用collection将关联信息映射到list集合中，比如：查询用户权限范围模块及模块下的菜单，可使用collection将模块映射到模块list中，将菜单列表映射到模块对象的菜单list属性中，这样的作的目的也是方便对查询结果集进行遍历查询。</li></ul></li></ul><p>//&emsp;&emsp;  如果使用resultType无法将查询结果映射到list集合中。</p><h1 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h1><h2 id="什么是延迟加载"><a href="#什么是延迟加载" class="headerlink" title="什么是延迟加载"></a>什么是延迟加载</h2><p>&emsp;&emsp;resultMap中的association和collection标签具有延迟加载的功能。<br>&emsp;&emsp;延迟加载的意思是说，在关联查询时，利用延迟加载，先加载主信息。需要关联信息时再去按需加载关联信息。这样会大大提高数据库性能，因为查询单表要比关联查询多张表速度要快。</p><h2 id="设置延迟加载"><a href="#设置延迟加载" class="headerlink" title="设置延迟加载"></a>设置延迟加载</h2><p>&emsp;&emsp;Mybatis默认是不开启延迟加载功能的，我们需要手动开启。<br>&emsp;&emsp;需要在SqlMapConfig.xml文件中，在<settings>标签中开启延迟加载功能。</settings></p><table><thead><tr><th style="text-align:center">设置项</th><th style="text-align:left">描述</th><th style="text-align:center">允许值</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td style="text-align:center">lazyLoadingEnabled</td><td style="text-align:left">全局性设置懒加载。如果设为‘false’，则所有相关联的都会被初始化加载。</td><td style="text-align:center">true or false</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">aggressiveLazyLoading</td><td style="text-align:left">当设置为‘true’的时候，懒加载的对象可能被任何懒属性全部加载。否则，每个属性都按需加载。</td><td style="text-align:center">true or false</td><td style="text-align:center">true</td></tr></tbody></table><p><img src="/images/mybatis/10.1.png" alt="10.1"></p><h2 id="使用association进行延迟加载"><a href="#使用association进行延迟加载" class="headerlink" title="使用association进行延迟加载"></a>使用association进行延迟加载</h2><h3 id="需求-11"><a href="#需求-11" class="headerlink" title="需求"></a>需求</h3><p>&emsp;&emsp;查询订单并且关联查询用户信息（对用户信息的加载要求是按需加载）</p><h3 id="编写映射文件-9"><a href="#编写映射文件-9" class="headerlink" title="编写映射文件"></a>编写映射文件</h3><p>&emsp;&emsp;需要定义两个mapper的方法对应的statement。</p><ol><li>只查询订单信息</li></ol><p><code>SELECT * FROM orders</code></p><p>&emsp;&emsp;在查询订单的statement中使用association去延迟加载（执行）下边的satatement(关联查询用户信息)</p><pre><code>//&lt;!-- 定义OrdersUserLazyLoadingRstMap --&gt;    &lt;resultMap type=&quot;cn.itcast.mybatis.po.Orders&quot; id=&quot;OrdersUserLazyLoadingRstMap&quot;&gt;                &lt;id column=&quot;id&quot; property=&quot;id&quot; /&gt;          &lt;result column=&quot;user_id&quot; property=&quot;userId&quot; /&gt;          &lt;result column=&quot;number&quot; property=&quot;number&quot; /&gt;          &lt;result column=&quot;createtime&quot; property=&quot;createtime&quot; /&gt;          &lt;result column=&quot;note&quot; property=&quot;note&quot; /&gt;                      &lt;!-- 延迟加载用户信息 --&gt;          &lt;!-- select：指定延迟加载需要执行的statement的id（是根据user_id查询用户信息的statement）          我们使用UserMapper.xml中的findUserById完成根据用户ID（user_id）查询用户信息          如果findUserById不在本mapper中，前边需要加namespace          --&gt;          &lt;!-- column：主信息表中需要关联查询的列，此处是user_id --&gt;          &lt;association property=&quot;user&quot; select=&quot;cn.itcast.mybatis.mapper.UserMapper.findUserById&quot; column=&quot;user_id&quot;&gt;&lt;/association&gt;      &lt;/resultMap&gt;          &lt;!-- 查询订单信息，延迟加载关联查询的用户信息 --&gt;      &lt;select id=&quot;findOrdersUserLazyLoading&quot; resultMap=&quot;OrdersUserLazyLoadingRstMap&quot;&gt;          SELECT * FROM orders      &lt;/select&gt;</code></pre><ol start="2"><li><p>关联查询用户信息</p><p>&emsp;&emsp;通过上边查询到的订单信息中user_id去关联查询用户信息,使用UserMapper.xml中的findUserById</p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;select id="findUserById" parameterType="int" resultType="cn.itcast.mybatis.po.User"&gt;</span></span><br><span class="line">SELECT * FROM user WHERE id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;&emsp;&emsp;上边先去执行findOrdersUserLazyLoading，当需要去查询用户的时候再去执行findUserById，通过resultMap的定义将延迟加载执行配置起来。</p><h3 id="加载映射文件-6"><a href="#加载映射文件-6" class="headerlink" title="加载映射文件"></a>加载映射文件</h3><pre><code>//&lt;!-- 批量加载mapper文件，需要mapper接口文件和mapper映射文件名称相同且在同一个包下 --&gt;   &lt;package name=_&quot;cn.itcast.mybatis.mapper&quot;_/&gt;</code></pre><h3 id="编写mapper接口-5"><a href="#编写mapper接口-5" class="headerlink" title="编写mapper接口"></a>编写mapper接口</h3><pre><code>// 查询订单信息，延迟加载关联查询的用户信息    public List&lt;Orders&gt; findOrdersUserLazyLoading();</code></pre><h3 id="编写测试代码-7"><a href="#编写测试代码-7" class="headerlink" title="编写测试代码"></a>编写测试代码</h3><p><strong>思路：</strong></p><ol><li>执行上边mapper方法（findOrdersUserLazyLoading），内部去调用cn.itcast.mybatis.mapper.OrdersMapper中的findOrdersUserLazyLoading只查询orders信息（单表）。</li><li>在程序中去遍历上一步骤查询出的List<orders>，当我们调用Orders中的getUser方法时，开始进行延迟加载。</orders></li><li>执行延迟加载，去调用UserMapper.xml中findUserbyId这个方法获取用户信息。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOrdersUserLazyLoading</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建sqlSession</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();    </span><br><span class="line"><span class="comment">// 通过SqlSession构造usermapper的代理对象</span></span><br><span class="line">OrdersMapper ordersMapper = sqlSession.getMapper(OrdersMapper.class);</span><br><span class="line"><span class="comment">// 调用usermapper的方法</span></span><br><span class="line">List&lt;Orders&gt; list = ordersMapper.findOrdersUserLazyLoading();    </span><br><span class="line"><span class="keyword">for</span>(Orders orders : list)&#123;</span><br><span class="line">System.out.println(orders.getUser());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放SqlSession</span></span><br><span class="line">sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="延迟加载思考"><a href="#延迟加载思考" class="headerlink" title="延迟加载思考"></a>延迟加载思考</h2><p>&emsp;&emsp;不使用mybatis提供的association及collection中的延迟加载功能，如何实现延迟加载？？</p><p>&emsp;&emsp;实现方法如下：<br>&emsp;&emsp;//定义两个mapper方法：</p><ol><li>查询订单列表</li><li>根据用户id查询用户信息</li></ol><p><strong>实现思路：</strong></p><p>先去查询第一个mapper方法，获取订单信息列表<br>在程序中（service），按需去调用第二个mapper方法去查询用户信息。</p><p><strong>总之：</strong><br>&emsp;&emsp;使用延迟加载方法，先去查询简单的sql（最好单表，也可以关联查询），再去按需要加载关联查询的其它信息。</p><h1 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h1><h2 id="mybatis缓存分析"><a href="#mybatis缓存分析" class="headerlink" title="mybatis缓存分析"></a>mybatis缓存分析</h2><p>&emsp;&emsp;mybatis提供查询缓存，如果缓存中有数据就不用从数据库中获取，用于减轻数据压力，提高系统性能。<br><img src="/images/mybatis/11.1.png" alt="11.1"><br>&emsp;&emsp;一级缓存是SqlSession级别的缓存。在操作数据库时需要构造 sqlSession对象，在对象中有一个数据结构（HashMap）用于存储缓存数据。不同的sqlSession之间的缓存数据区域（HashMap）是互相不影响的。<br>&emsp;&emsp;二级缓存是mapper级别的缓存，多个SqlSession去操作同一个Mapper的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。</p><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><img src="/images/mybatis/11.2.png" alt="11.2"></p><p>&emsp;&emsp;第一次发起查询用户id为1的用户信息，先去找缓存中是否有id为1的用户信息，如果没有，从数据库查询用户信息。<br>&emsp;&emsp;得到用户信息，将用户信息存储到一级缓存中。<br>&emsp;&emsp;如果sqlSession去执行commit操作（执行插入、更新、删除），清空SqlSession中的一级缓存，这样做的目的为了让缓存中存储的是最新的信息，避免脏读。<br>&emsp;&emsp;第二次发起查询用户id为1的用户信息，先去找缓存中是否有id为1的用户信息，缓存中有，直接从缓存中获取用户信息。</p><p><strong>注：Mybatis默认支持一级缓存。</strong></p><h3 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h3><pre><code>//@Test    public void testOneLevelCache() {        SqlSession sqlSession = sqlSessionFactory.openSession();        UserMapper mapper = sqlSession.getMapper(UserMapper.class);        // 第一次查询ID为1的用户，去缓存找，找不到就去查找数据库        User user1 = mapper.findUserById(1);        System.out.println(user1);                    // 第二次查询ID为1的用户        User user2 = mapper.findUserById(1);        System.out.println(user2);            sqlSession.close();    }</code></pre><p>&emsp;&emsp;只输出一次SQL：<br><img src="/images/mybatis/11.3.png" alt="11.3"></p><h3 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h3><pre><code>//@Test    public void testOneLevelCache() {        SqlSession sqlSession = sqlSessionFactory.openSession();        UserMapper mapper = sqlSession.getMapper(UserMapper.class);        // 第一次查询ID为1的用户，去缓存找，找不到就去查找数据库        User user1 = mapper.findUserById(1);        System.out.println(user1);                    User user = new User();        user.setUsername(&quot;东哥1&quot;);        user.setAddress(&quot;清河宝盛西里&quot;);        //执行增删改操作，清空缓存        mapper.insertUser(user);                    // 第二次查询ID为1的用户        User user2 = mapper.findUserById(1);        System.out.println(user2);            sqlSession.close();    }</code></pre><p>&emsp;&emsp;中间执行了commit操作，同样的查询SQL输出两次：<br><img src="/images/mybatis/11.4.png" alt="11.4"></p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>&emsp;&emsp;正式开发，是将mybatis和spring进行整合开发，事务控制在service中。<br>&emsp;&emsp;一个service方法中包括 很多mapper方法调用。</p><pre><code>//service{     //开始执行时，开启事务，创建SqlSession对象     //第一次调用mapper的方法findUserById(1)    //第二次调用mapper的方法findUserById(1)，从一级缓存中取数据     //方法结束，sqlSession关闭    }</code></pre><p>&emsp;&emsp;如果是执行两次service调用查询相同 的用户信息，不走一级缓存，因为session方法结束，sqlSession就关闭，一级缓存就清空。</p><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>&emsp;&emsp;下图是多个sqlSession请求UserMapper的二级缓存图解。<br><img src="/images/mybatis/11.5.png" alt="11.5"></p><p>&emsp;&emsp;二级缓存是mapper级别的。<br>&emsp;&emsp;第一次调用mapper下的SQL去查询用户信息。查询到的信息会存到该mapper对应的二级缓存区域内。<br>&emsp;&emsp;第二次调用相同namespace下的mapper映射文件中相同的SQL去查询用户信息。会去对应的二级缓存内取结果。<br>&emsp;&emsp;如果调用相同namespace下的mapper映射文件中的增删改SQL，并执行了commit操作。此时会清空该namespace下的二级缓存。</p><h3 id="开启二级缓存"><a href="#开启二级缓存" class="headerlink" title="开启二级缓存"></a>开启二级缓存</h3><p><strong>注：Mybatis默认是没有开启二级缓存</strong></p><ol><li>在核心配置文件SqlMapConfig.xml中加入以下内容（开启二级缓存总开关）：</li></ol><p>在settings标签中添加以下内容：</p><pre><code>&lt;!-- 开启二级缓存总开关 --&gt;    &lt;setting name=_&quot;cacheEnabled&quot;_ value=_&quot;true&quot;_/&gt;</code></pre><ol start="2"><li><p>在UserMapper映射文件中，加入以下内容，开启二级缓存：</p> <!-- 开启本mapper下的namespace的二级缓存，默认使用的是mybatis提供的PerpetualCache --> <cache></cache></li></ol><h3 id="实现序列化"><a href="#实现序列化" class="headerlink" title="实现序列化"></a>实现序列化</h3><p>&emsp;&emsp;由于二级缓存的数据不一定都是存储到内存中，它的存储介质多种多样，所以需要给缓存的对象执行序列化。<br>&emsp;&emsp;如果该类存在父类，那么父类也要实现序列化。<br><img src="/images/mybatis/11.6.png" alt="11.6"></p><h3 id="测试1-1"><a href="#测试1-1" class="headerlink" title="测试1"></a>测试1</h3><pre><code>//@Test    public void testTwoLevelCache() {        SqlSession sqlSession1 = sqlSessionFactory.openSession();        SqlSession sqlSession2 = sqlSessionFactory.openSession();        SqlSession sqlSession3 = sqlSessionFactory.openSession();            UserMapper mapper1 = sqlSession1.getMapper(UserMapper.class);        UserMapper mapper2 = sqlSession2.getMapper(UserMapper.class);        UserMapper mapper3 = sqlSession3.getMapper(UserMapper.class);        // 第一次查询ID为1的用户，去缓存找，找不到就去查找数据库        User user1 = mapper1.findUserById(1);        System.out.println(user1);        // 关闭SqlSession1        sqlSession1.close();            // 第二次查询ID为1的用户        User user2 = mapper2.findUserById(1);        System.out.println(user2);        // 关闭SqlSession2        sqlSession2.close();    }</code></pre><p>&emsp;SQL输出结果：<br><img src="/images/mybatis/11.7.png" alt="11.7"></p><p>&emsp;Cache Hit Radio  ： 缓存命中率 </p><ul><li>第一次缓存中没有记录，则命中率0.0；</li><li>第二次缓存中有记录，则命中率0.5（访问两次，有一次命中）</li></ul><h3 id="测试2-1"><a href="#测试2-1" class="headerlink" title="测试2"></a>测试2</h3><pre><code>//@Test    public void testTwoLevelCache() {        SqlSession sqlSession1 = sqlSessionFactory.openSession();        SqlSession sqlSession2 = sqlSessionFactory.openSession();        SqlSession sqlSession3 = sqlSessionFactory.openSession();          UserMapper mapper1 = sqlSession1.getMapper(UserMapper.class);        UserMapper mapper2 = sqlSession2.getMapper(UserMapper.class);        UserMapper mapper3 = sqlSession3.getMapper(UserMapper.class);        // 第一次查询ID为1的用户，去缓存找，找不到就去查找数据库        User user1 = mapper1.findUserById(1);        System.out.println(user1);        // 关闭SqlSession1        sqlSession1.close();            //修改查询出来的user1对象，作为插入语句的参数        user1.setUsername(&quot;东哥1&quot;);        user1.setAddress(&quot;清河宝盛西里&quot;);            mapper3.insertUser(user1);          // 提交事务        sqlSession3.commit();        // 关闭SqlSession3        sqlSession3.close();            // 第二次查询ID为1的用户        User user2 = mapper2.findUserById(1);        System.out.println(user2);        // 关闭SqlSession2        sqlSession2.close();    }        </code></pre><p>&emsp;SQL输出结果：<br>&emsp;&emsp;根据SQL分析，确实是清空了二级缓存了。<br><img src="/images/mybatis/11.8.png" alt="11.8"></p><h3 id="禁用二级缓存"><a href="#禁用二级缓存" class="headerlink" title="禁用二级缓存"></a>禁用二级缓存</h3><p>&emsp;&emsp;该statement中设置userCache=false，可以禁用当前select语句的二级缓存，即每次查询都是去数据库中查询，默认情况下是true，即该statement使用二级缓存。</p><pre><code>//&lt;select id=&quot;findUserById&quot; parameterType=&quot;int&quot;        resultType=&quot;cn.itcast.mybatis.po.User&quot; useCache=&quot;true&quot;&gt;    SELECT * FROM user WHERE id = #{id}&lt;/select&gt;</code></pre><h3 id="刷新二级缓存"><a href="#刷新二级缓存" class="headerlink" title="刷新二级缓存"></a>刷新二级缓存</h3><p>&emsp;&emsp;该statement中设置flushCache=true可以刷新当前的二级缓存，默认情况下如果是select语句，那么flushCache是false。如果是insert、update、delete语句，那么flushCache是true。</p><ul><li>如果查询语句设置成true，那么每次查询都是去数据库查询，即意味着该查询的二级缓存失效。</li><li>如果查询语句设置成false，即使用二级缓存，那么如果在数据库中修改了数据，而缓存数据还是原来的，这个时候就会出现脏读。<br>&emsp;flushCache设置如下：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;select id="findUserById" parameterType="int"</span></span><br><span class="line">resultType=<span class="string">"cn.itcast.mybatis.po.User"</span> useCache=<span class="string">"true"</span> flushCache=<span class="string">"true"</span>&gt;</span><br><span class="line">SELECT * FROM user WHERE id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="整合ehcache（了解）"><a href="#整合ehcache（了解）" class="headerlink" title="整合ehcache（了解）"></a>整合ehcache（了解）</h3><p>&emsp;&emsp;Ehcache是一个分布式缓存。</p><h4 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h4><p>&emsp;&emsp;系统为了提高性能，通常会对系统采用分布式部署（集群部署方式）<br><img src="/images/mybatis/11.9.png" alt="11.9"></p><p>&emsp;&emsp;不使用分布式缓存，缓存的数据在各个服务单独存储，不方便开发。所以要使用分布式缓存对缓存数据进行集中式管理。<br>&emsp;&emsp;Mybatis自身无法实现分布式缓存，需要和其它分布式缓存框架进行整合。</p><h4 id="整合思路（重点）"><a href="#整合思路（重点）" class="headerlink" title="整合思路（重点）"></a>整合思路（重点）</h4><p>Mybatis提供了一个cache接口，同时它自己有一个默认的实现类PerpetualCache。</p><p>通过实现cache接口可以实现mybatis缓存数据通过其他缓存数据库整合，mybatis的特长是sql，缓存数据管理不是mybatis的特长，为了提高mybatis的性能，所以需要mybatis和第三方缓存数据库整合，比如ehcache、memcache、redis等</p><p>&emsp;Mybatis提供接口如下：<br><img src="/images/mybatis/11.10.png" alt="11.10"></p><p>&emsp;&emsp;Mybatis的默认实现类：<br><img src="/images/mybatis/11.11.png" alt="11.11"></p><h4 id="整合ehcache的步骤"><a href="#整合ehcache的步骤" class="headerlink" title="整合ehcache的步骤"></a>整合ehcache的步骤</h4><ol><li>引入ehcache的jar包；</li><li>在mapper映射文件中，配置cache标签的type为ehcache对cache接口的实现类类型。</li><li>加入ehcache的配置文件</li></ol><h4 id="第一步：引入ehcache的jar包"><a href="#第一步：引入ehcache的jar包" class="headerlink" title="第一步：引入ehcache的jar包"></a>第一步：引入ehcache的jar包</h4><ul><li>ehcache-core-2.6.5.jar</li><li>mybatis-ehcache-1.0.2.jar</li></ul><h4 id="第二步：配置cache的type属性"><a href="#第二步：配置cache的type属性" class="headerlink" title="第二步：配置cache的type属性"></a>第二步：配置cache的type属性</h4><pre><code>&lt;!-- 使用默认二级缓存 --&gt;&lt;cache type=_&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;_ /&gt;</code></pre><h4 id="第三步：添加ehcache的配置文件"><a href="#第三步：添加ehcache的配置文件" class="headerlink" title="第三步：添加ehcache的配置文件"></a>第三步：添加ehcache的配置文件</h4><p>&emsp;&emsp;在classpath下添加ehcache.xml</p><pre><code>//&lt;ehcache xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xsi:noNamespaceSchemaLocation=&quot;../config/ehcache.xsd&quot;&gt;    &lt;!-- 缓存数据要存放的磁盘地址 --&gt;    &lt;diskStore path=&quot;F:\develop\ehcache&quot; /&gt;    &lt;!-- diskStore：指定数据在磁盘中的存储位置。  defaultCache：当借助CacheManager.add(&quot;demoCache&quot;)创建Cache时，EhCache便会采用&lt;defalutCache/&gt;指定的的管理策略     以下属性是必须的：          maxElementsInMemory - 在内存中缓存的element的最大数目         maxElementsOnDisk - 在磁盘上缓存的element的最大数目，若是0表示无穷大  eternal - 设定缓存的elements是否永远不过期。如果为true，则缓存的数据始终有效，如果为false那么还要根据timeToIdleSeconds，timeToLiveSeconds判断          overflowToDisk - 设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上     以下属性是可选的：          timeToIdleSeconds - 当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时，这些数据便会删除，默认值是0,也就是可闲置时间无穷大         timeToLiveSeconds - 缓存element的有效生命期，默认是0.,也就是element存活时间无穷大         diskSpoolBufferSizeMB-这个参数设置DiskStore(磁盘缓存)的缓存区大小.默认是30MB.每个Cache都应该有自己的一个缓冲区.          diskPersistent - 在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false。         diskExpiryThreadIntervalSeconds - 磁盘缓存的清理线程运行间隔，默认是120秒。每个120s，相应的线程会进行一次EhCache中数据的清理工作         memoryStoreEvictionPolicy - 当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出） --&gt;        &lt;defaultCache maxElementsInMemory=&quot;1000&quot;        maxElementsOnDisk=&quot;10000000&quot; eternal=&quot;false&quot; overflowToDisk=&quot;false&quot;        timeToIdleSeconds=&quot;120&quot; timeToLiveSeconds=&quot;120&quot;        diskExpiryThreadIntervalSeconds=&quot;120&quot; memoryStoreEvictionPolicy=&quot;LRU&quot;&gt;    &lt;/defaultCache&gt;&lt;/ehcache&gt;</code></pre><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>&emsp;使用场景：<strong>对于访问响应速度要求高，但是实时性不高的查询，可以采用二级缓存技术</strong>。</p><p><strong>注意：在使用二级缓存的时候，要设置一下刷新间隔（cache标签中有一个flashInterval属性）来定时刷新二级缓存，这个刷新间隔根据具体需求来设置，比如设置30分钟、60分钟等，单位为毫秒。</strong></p><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><ul><li>Mybatis二级缓存对细粒度的数据级别的缓存实现不好。<br>&emsp;场景：对商品信息进行缓存，由于商品信息查询访问量大，但是要求用户每次查询都是最新的商品信息，此时如果使用二级缓存，就无法实现当一个商品发生变化只刷新该商品的缓存信息而不刷新其他商品缓存信息，因为二级缓存是mapper级别的，当一个商品的信息发送更新，所有的商品信息缓存数据都会清空。<br>&emsp;&emsp;解决此类问题，需要在业务层根据需要对数据有针对性的缓存。比如可以对经常变化的数据操作单独放到另一个namespace的mapper中。</li></ul><h1 id="mybatis与spring集成"><a href="#mybatis与spring集成" class="headerlink" title="mybatis与spring集成"></a>mybatis与spring集成</h1><h2 id="集成思路"><a href="#集成思路" class="headerlink" title="集成思路"></a>集成思路</h2><ul><li>需要spring来管理数据源信息。</li><li>需要spring通过单例方式管理SqlSessionFactory。</li><li>使用SqlSessionFactory创建SqlSession。（spring和mybatis整合自动完成）</li><li>持久层的mapper都需要由spring进行管理，spring和mybatis整合生成mapper代理对象。</li></ul><h2 id="集成步骤"><a href="#集成步骤" class="headerlink" title="集成步骤"></a>集成步骤</h2><ol><li>jar包集成；</li><li>配置文件集成（数据源）；</li><li>SqlSessionFactory集成；</li><li>Mapper接口集成；</li></ol><h2 id="开始集成"><a href="#开始集成" class="headerlink" title="开始集成"></a>开始集成</h2><h3 id="搭建工程结构"><a href="#搭建工程结构" class="headerlink" title="搭建工程结构"></a>搭建工程结构</h3><p><img src="/images/mybatis/12.1.png" alt="12.1"></p><h3 id="包集成"><a href="#包集成" class="headerlink" title="包集成"></a>包集成</h3><p>&emsp;&emsp;Jar包如下：</p><ul><li><p>Mybatis3.2.7 的jar包（mybatis核心包、依赖包）<br><img src="/images/mybatis/12.2.png" alt="12.2"></p></li><li><p>Spring3.2.0 的jar包<br><img src="/images/mybatis/12.3.png" alt="12.3"></p></li><li><p>Spring与mybatis的集成包:mybatis-spring-1.2.2.jar</p></li><li><p>数据库驱动包:mysql-connector-java-5.1.7-bin.jar</p></li><li><p>Junit包:junit-4.9.jar</p><ul><li>Dbcp连接池包<br><img src="/images/mybatis/12.4.png" alt="12.4"></li></ul></li></ul><h3 id="配置文件集成"><a href="#配置文件集成" class="headerlink" title="配置文件集成"></a>配置文件集成</h3><ul><li>注意：Mybatis的配置文件中的数据源配置去掉，由spring进行管理配置。</li></ul><h4 id="Mybatis的SqlMapConfig-xml"><a href="#Mybatis的SqlMapConfig-xml" class="headerlink" title="Mybatis的SqlMapConfig.xml"></a>Mybatis的SqlMapConfig.xml</h4><pre><code>//&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configurationPUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;           &lt;!-- 设置全局参数 --&gt;    &lt;settings&gt;        &lt;!-- lazyLoadingEnabled：延迟加载的开关，默认是false --&gt;        &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;        &lt;!-- aggressiveLazyLoading：默认为true，一旦为true上面的懒加载开关失效 --&gt;        &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;                    &lt;!-- cacheEnabled：二级缓存的总开关 默认是false--&gt;        &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;    &lt;/settings&gt;            &lt;!-- 定义别名 --&gt;    &lt;typeAliases&gt;        &lt;!-- 批量定义别名 --&gt;        &lt;!-- name：指定需要别名定义的包的名称 它的别名就是类名（类名的首字母大小写都可）--&gt;        &lt;package name=&quot;cn.itcast.ssm.po&quot;&gt;&lt;/package&gt;    &lt;/typeAliases&gt;       &lt;!-- 注意：与spring集成后，数据源和事务交给spring来管理 --&gt;            &lt;!-- 加载mapper文件 --&gt;    &lt;mappers&gt;        &lt;mapper resource=&quot;mybatis/sqlmap/User.xml&quot;&gt;&lt;/mapper&gt;        &lt;!-- 批量加载mapper            注意：mapper接口文件和mapper映射文件，名称相同，在同一个包下         --&gt;        &lt;package name=&quot;cn.itcast.mybatis.mapper&quot;/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><h4 id="Spring的applicationContext-xml"><a href="#Spring的applicationContext-xml" class="headerlink" title="Spring的applicationContext.xml"></a>Spring的applicationContext.xml</h4><pre><code>//&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans-3.2.xsd         http://www.springframework.org/schema/mvc         http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd         http://www.springframework.org/schema/context         http://www.springframework.org/schema/context/spring-context-3.2.xsd         http://www.springframework.org/schema/aop         http://www.springframework.org/schema/aop/spring-aop-3.2.xsd         http://www.springframework.org/schema/tx         http://www.springframework.org/schema/tx/spring-tx-3.2.xsd &quot;&gt;&lt;!-- 引用java配置文件 --&gt;&lt;context:property-placeholder location=&quot;db.properties&quot;/&gt;            &lt;!-- 配置数据源，使用dbcp连接池 --&gt;&lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot;&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;${db.driver}&quot; /&gt;        &lt;property name=&quot;url&quot; value=&quot;${db.url}&quot; /&gt;        &lt;property name=&quot;username&quot; value=&quot;${db.username}&quot; /&gt;        &lt;property name=&quot;password&quot; value=&quot;${db.password}&quot; /&gt;        &lt;property name=&quot;maxActive&quot; value=&quot;10&quot; /&gt;        &lt;property name=&quot;maxIdle&quot; value=&quot;5&quot; /&gt;&lt;/bean&gt;&lt;/beans&gt;        </code></pre><h3 id="Spring对SqlSessionFactory进行管理配置"><a href="#Spring对SqlSessionFactory进行管理配置" class="headerlink" title="Spring对SqlSessionFactory进行管理配置"></a>Spring对SqlSessionFactory进行管理配置</h3><pre><code>&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;    &lt;!-- mybatis的配置文件路径 --&gt;    &lt;property name=&quot;configLocation&quot; value=&quot;sqlMapConfig.xml&quot;&gt;&lt;/property&gt;    &lt;!-- SqlSessionFactory需要数据源信息，之前是写在sqlmapconfig.xml，现在需要重新指定 --&gt;    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre><h3 id="Mybatis程序编写"><a href="#Mybatis程序编写" class="headerlink" title="Mybatis程序编写"></a>Mybatis程序编写</h3><h4 id="原始dao方式"><a href="#原始dao方式" class="headerlink" title="原始dao方式"></a>原始dao方式</h4><h5 id="编写dao接口"><a href="#编写dao接口" class="headerlink" title="编写dao接口"></a>编写dao接口</h5><pre><code>//public interface UserDao {    // 1、 根据用户ID来查询用户信息；    public User findUserById(int id);        // 2、 根据用户名称来模糊查询用户信息列表；    public List&lt;User&gt; findUsersByName(String name);        // 3、 添加用户；    public void insertUser(User user);}</code></pre><h5 id="编写dao实现类（继承SqlSessionDaoSupport）"><a href="#编写dao实现类（继承SqlSessionDaoSupport）" class="headerlink" title="编写dao实现类（继承SqlSessionDaoSupport）"></a>编写dao实现类（继承SqlSessionDaoSupport）</h5><pre><code>//通过this.getSqlSession()获取sqlsession。public class UserDaoImpl extends SqlSessionDaoSupport implements UserDao {        @Override    public User findUserById(int id) {            return this.getSqlSession().selectOne(&quot;test.findUserById&quot;, id);    }        }</code></pre><h5 id="编写Mapper映射文件"><a href="#编写Mapper映射文件" class="headerlink" title="编写Mapper映射文件"></a>编写Mapper映射文件</h5><p><img src="/images/mybatis/12.5.png" alt="12.5"></p><h5 id="Spring定义bean"><a href="#Spring定义bean" class="headerlink" title="Spring定义bean"></a>Spring定义bean</h5><pre><code>//&lt;!-- 由spring管理原始dao的实现 --&gt;&lt;bean id=&quot;userDao&quot; class=&quot;cn.itcast.mybatis.dao.UserDaoImpl&quot;&gt;&lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;/&gt;&lt;/bean&gt;</code></pre><h5 id="编写测试代码-8"><a href="#编写测试代码-8" class="headerlink" title="编写测试代码"></a>编写测试代码</h5><pre><code>//public class UserDaoTest {    //spring上下文    private ApplicationContext ctx;            @Before    public void setUp() throws Exception {        //读取spring的上下文，然后封装到ctx        ctx = new ClassPathXmlApplicationContext(&quot;spring/applicationContext.xml&quot;);    }        @Test    public void testFindUserById() {        //创建userdao对象        UserDao userDao = (UserDao) ctx.getBean(&quot;userDao&quot;);        //调用userdao对象的方法        User user = userDao.findUserById(1);        System.out.println(user);    }    }</code></pre><h4 id="Mapper代理方式"><a href="#Mapper代理方式" class="headerlink" title="Mapper代理方式"></a>Mapper代理方式</h4><h5 id="编写mapper接口-6"><a href="#编写mapper接口-6" class="headerlink" title="编写mapper接口"></a>编写mapper接口</h5><pre><code>public  interface UserMapper {      // 1、  根据用户ID来查询用户信息      public User findUserById(int id);    }</code></pre><h5 id="编写mapper映射文件-2"><a href="#编写mapper映射文件-2" class="headerlink" title="编写mapper映射文件"></a>编写mapper映射文件</h5><p><img src="/images/mybatis/12.6.png" alt="12.6"></p><h5 id="Spring定义bean-1"><a href="#Spring定义bean-1" class="headerlink" title="Spring定义bean"></a>Spring定义bean</h5><p>&emsp;&emsp;Mapper代理开发方式有两种bean的定义方法，一种是MapperFactoryBean，一种是MapperScannerConfigurer（推荐）。</p><h6 id="通过MapperFactoryBean创建代理对象（了解）"><a href="#通过MapperFactoryBean创建代理对象（了解）" class="headerlink" title="通过MapperFactoryBean创建代理对象（了解）"></a>通过MapperFactoryBean创建代理对象（了解）</h6><pre><code>&lt;!-- mapper代理开发方式之单个mapper配置 --&gt;&lt;bean id=&quot;userMapper&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt;    &lt;property name=&quot;mapperInterface&quot; value=&quot;cn.itcast.mybatis.mapper.UserMapper&quot;&gt;&lt;/property&gt;    &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre><h5 id="通过MapperScannerConfigurer批量扫描创建代理对象（掌握）"><a href="#通过MapperScannerConfigurer批量扫描创建代理对象（掌握）" class="headerlink" title="通过MapperScannerConfigurer批量扫描创建代理对象（掌握）"></a>通过MapperScannerConfigurer批量扫描创建代理对象（掌握）</h5><p>&emsp;&emsp;存在问题：一个mapper定义一个bean，很麻烦。</p><pre><code>//&lt;!-- mapper代理开发方式之批量mapper配置 --&gt;&lt;!-- bean的名字默认为mapper接口类名的首字母小写 --&gt;&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;    &lt;!-- 指定批量mapper配置的包名 --&gt;    &lt;property name=&quot;basePackage&quot; value=&quot;cn.itcast.mybatis.mapper&quot;&gt;&lt;/property&gt;    &lt;!-- 指定使用的SqlSessionFactory --&gt;    &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre><h5 id="编写测试代码-9"><a href="#编写测试代码-9" class="headerlink" title="编写测试代码"></a>编写测试代码</h5><pre><code>//private ApplicationContext ctx;    @Before    public void setUp() throws Exception {        ctx = new ClassPathXmlApplicationContext(                &quot;spring/applicationContext.xml&quot;);    }        @Test    public void testFindUserById() {        // 创建mapper对象        UserMapper userMapper = (UserMapper) ctx.getBean(&quot;userMapper&quot;);        // 调用mapper对象的方法        User user = userMapper.findUserById(1);            System.out.println(user);    }</code></pre><h1 id="Mybatis的逆向工程（会用）"><a href="#Mybatis的逆向工程（会用）" class="headerlink" title="Mybatis的逆向工程（会用）"></a>Mybatis的逆向工程（会用）</h1><h2 id="什么是逆向工程"><a href="#什么是逆向工程" class="headerlink" title="什么是逆向工程"></a>什么是逆向工程</h2><p>&emsp;&emsp;简单点说，就是通过数据库中的单表，自动生成java代码。<br>&emsp;&emsp;Mybatis官方提供了逆向工程，可以针对单表自动生成mybatis代码（mapper.java\mapper.xml\po类）<br>&emsp;&emsp;企业开发中，逆向工程是个很常用的工具。</p><p>##下载逆向工程</p><p><a href="https://github.com/mybatis/generator/releases/tag/mybatis-generator-1.3.2" target="_blank" rel="noopener">https://github.com/mybatis/generator/releases/tag/mybatis-generator-1.3.2</a></p><h2 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li>创建generator配置文件；</li><li>使用java类来执行逆向工程；</li><li>把生成的代码拷贝到项目中。</li><li>在正式项目中使用逆向工程生成的代码</li></ol><h3 id="第一步：创建generator配置文件"><a href="#第一步：创建generator配置文件" class="headerlink" title="第一步：创建generator配置文件"></a>第一步：创建generator配置文件</h3><p>&emsp;&emsp;在classpath下，创建generator.xml配置文件：（文件内容可以从逆向工程的jar包中docs目录下的index.html中找到相关代码）</p><pre><code>//&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration  PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;  &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;    &lt;generatorConfiguration&gt;    &lt;context id=&quot;testTables&quot; targetRuntime=&quot;MyBatis3&quot;&gt;        &lt;commentGenerator&gt;            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot; /&gt;        &lt;/commentGenerator&gt;        &lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;            connectionURL=&quot;jdbc:mysql://localhost:3306/mybatis&quot; userId=&quot;root&quot;            password=&quot;mysql&quot;&gt;        &lt;/jdbcConnection&gt;        &lt;!-- &lt;jdbcConnection driverClass=&quot;oracle.jdbc.OracleDriver&quot;            connectionURL=&quot;jdbc:oracle:thin:@127.0.0.1:1521:yycg&quot;             userId=&quot;yycg&quot;            password=&quot;yycg&quot;&gt;        &lt;/jdbcConnection&gt; --&gt;            &lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal --&gt;        &lt;javaTypeResolver&gt;            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot; /&gt;        &lt;/javaTypeResolver&gt;            &lt;!-- targetProject:生成PO类的位置 --&gt;        &lt;javaModelGenerator targetPackage=&quot;cn.itcast.ssm.po&quot;            targetProject=&quot;.\src&quot;&gt;            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;            &lt;!-- 从数据库返回的值被清理前后的空格 --&gt;            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt;        &lt;/javaModelGenerator&gt;        &lt;!-- targetProject:mapper映射文件生成的位置 --&gt;        &lt;sqlMapGenerator targetPackage=&quot;cn.itcast.ssm.mapper&quot;             targetProject=&quot;.\src&quot;&gt;            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;        &lt;/sqlMapGenerator&gt;        &lt;!-- targetPackage：mapper接口生成的位置 --&gt;        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot;            targetPackage=&quot;cn.itcast.ssm.mapper&quot;             targetProject=&quot;.\src&quot;&gt;            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;        &lt;/javaClientGenerator&gt;        &lt;!-- 指定数据库表 --&gt;        &lt;table tableName=&quot;items&quot;&gt;&lt;/table&gt;        &lt;table tableName=&quot;orders&quot;&gt;&lt;/table&gt;        &lt;table tableName=&quot;orderdetail&quot;&gt;&lt;/table&gt;        &lt;table tableName=&quot;user&quot;&gt;&lt;/table&gt;                    &lt;/context&gt;&lt;/generatorConfiguration&gt;</code></pre><h3 id="第二步：使用java类来执行逆向工程"><a href="#第二步：使用java类来执行逆向工程" class="headerlink" title="第二步：使用java类来执行逆向工程"></a>第二步：使用java类来执行逆向工程</h3><pre><code>//public class Generator {    /**     *@param args     */    public static void main(String[] args)  throws Exception{        List&lt;String&gt; warnings = new ArrayList&lt;String&gt;();        boolean overwrite = true;        File configFile = new File(&quot;config/generator.xml&quot;);        ConfigurationParser cp = new ConfigurationParser(warnings);        Configuration config = cp.parseConfiguration(configFile);        DefaultShellCallback callback = new DefaultShellCallback(overwrite);        MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config,                callback, warnings);        myBatisGenerator.generate(null);    }    }</code></pre><h3 id="第三步：把生成的代码拷贝到项目中"><a href="#第三步：把生成的代码拷贝到项目中" class="headerlink" title="第三步：把生成的代码拷贝到项目中"></a>第三步：把生成的代码拷贝到项目中</h3><ol><li>如果正式项目中已经有po类所在的包了，那么就只需要拷贝po类到指定包下就可以。</li><li>如果正式项目中没有po包，那么就把逆向工程中整个po类的包拷贝过去。</li><li>Mapper.xml和mapper.java的拷贝与po类一样。</li></ol><h3 id="第四步：使用生成的代码"><a href="#第四步：使用生成的代码" class="headerlink" title="第四步：使用生成的代码"></a>第四步：使用生成的代码</h3><pre><code>//public class ItemsMapperTest {        // spring上下文    private ApplicationContext ctx;        @Before    public void setUp() throws Exception {        // 读取spring的上下文，然后封装到ctx        ctx = new ClassPathXmlApplicationContext(                &quot;spring/applicationContext.xml&quot;);    }        @Test    public void testSelectByExample() {        ItemsMapper mapper = (ItemsMapper) ctx.getBean(&quot;itemsMapper&quot;);        ItemsExample example = new ItemsExample();        //使用它进行参数封装传递        Criteria criteria = example.createCriteria();        //设置参数        criteria.andNameEqualTo(&quot;背包&quot;);                    List&lt;Items&gt; list = mapper.selectByExample(example);                    System.out.println(list);    }    }                </code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>&emsp;&emsp;Mapper.xml文件已经存在时，如果进行重新生成则mapper.xml文件时，内容不被覆盖而是进行内容追加，结果导致mybatis解析失败。</p><ul><li>解决方法：删除原来已经生成的mapper.xml文件再进行生成。Mybatis自动生成的po及mapper.java文件不是内容而是直接覆盖没有此问题。</li></ul>]]></content>
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Struts2学习笔记</title>
      <link href="/2018/07/23/Struts2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/07/23/Struts2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="知识导入"><a href="#知识导入" class="headerlink" title="知识导入"></a>知识导入</h1><h2 id="xml解析"><a href="#xml解析" class="headerlink" title="xml解析"></a>xml解析</h2><p>&emsp;&emsp; dom4j解析</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>&emsp;&emsp; 有完整类名，并且含有空参构造函数，如何创建出对象？</p><pre><code>//使用反射创建对象Class clazz = Class.forName(&quot;xxx&quot;);clazz.newInstance();</code></pre><a id="more"></a><h2 id="filter过滤器"><a href="#filter过滤器" class="headerlink" title="filter过滤器"></a>filter过滤器</h2><ul><li>过滤来自浏览器发送的请求.在请求到达访问资源之前.会先经过过滤器.</li><li>可以完成批处理. 还可以根据filterChain来决定是否放行.</li><li>也可以使用请求转发,或重定向,不让请求到目标路径.</li></ul><h2 id="自己定义一个struts-Mini"><a href="#自己定义一个struts-Mini" class="headerlink" title="自己定义一个struts-Mini"></a>自己定义一个struts-Mini</h2><p><img src="/images/struts2/struts-mini%E5%9B%BE%E8%A7%A3.png" alt="struts-mini图解"></p><h1 id="Struts2"><a href="#Struts2" class="headerlink" title="Struts2"></a>Struts2</h1><h2 id="框架相关"><a href="#框架相关" class="headerlink" title="框架相关"></a>框架相关</h2><ul><li>什么是框架？<br>&emsp; 微观：由一个一个类构成的包，包再构成框架<br>&emsp; 宏观：半成品的项目，我们需要执行什么业务时，为框架填写业务逻辑即可</li><li>三大框架：SSH=&gt;Struts,Spring,Hibernate<br>&emsp; Struts的版本：<br>&emsp;&emsp; Struts1（已经淘汰）<br>&emsp;&emsp; Struts2（我们要学的）也叫xwork。</li><li>三大框架的作用？<br>&emsp; 简化我们的开发，降低开发成本，提高开发效率<br>&emsp;Struts=&gt; WEB层框架：<br>&emsp;&emsp; 优势：<br>&emsp;&emsp; &emsp; 1.不用侵入性比较高的Servlet.可以直接写普通java类作为处理请求逻辑的处理类.这样更易于测试.<br>&emsp;&emsp; &emsp; 2.整合了一些之前需要手动来做的功能. 后台验证,表单回显,自动将表单参数封装,防止表单重复提交，如果不够用我们还可以扩展框架的功能.</li></ul><h2 id="Struts2的HelloWorld"><a href="#Struts2的HelloWorld" class="headerlink" title="Struts2的HelloWorld"></a>Struts2的HelloWorld</h2><pre><code>//---------------------------------//cn.pinzhi.action.HelloAction//-----------------------------    package cn.pinzhi.action;    public class HelloAction {        public String execute(){            System.out.println(&quot;hello world&quot;);            return &quot;success&quot;; // 结果页面命名        }    }//-----------------------------------------//src下的struts.xml//------------------------------------------&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE struts PUBLIC&quot;-//Apache Software Foundation//DTD Struts Configuration 2.3//EN&quot;&quot;http://struts.apache.org/dtds/struts-2.3.dtd&quot;&gt;&lt;struts&gt;&lt;!-- name:单纯的给包起一个名字，不要与其他包名重复    namespace:为action访问加上一层或多层路径    etends：继承一个其他包，目的是引入其他包的配置 --&gt;    &lt;package name=&quot;hello&quot; namespace=&quot;/&quot; extends=&quot;struts-default&quot;&gt;        &lt;!--name:为action类加上一个标识，在访问时填入name名称，就可以找到action              class：action完整类名            method：处理的方法        --&gt;        &lt;action name=&quot;hello&quot; class=&quot;cn.pinzhi.action.HelloAction&quot;  method=&quot;execute&quot;&gt;          &lt;!--name：返回结果的标识，用于找到结果路径              type：可以决定跳转到结果的方式=》转发，重定向。。。           --&gt;            &lt;result name=&quot;success&quot;&gt;/success.jsp&lt;/result&gt;        &lt;/action&gt;    &lt;/package&gt;&lt;/struts&gt;//------------------------------------//web.xml//------------------------------------&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot; version=&quot;3.0&quot;&gt;    &lt;display-name&gt;helloStruts&lt;/display-name&gt;     &lt;!-- 重要：配置struts2的核心过滤器 --&gt;     &lt;!--配置struts2的过滤器，要放到其他过滤器后面，保证其他过滤器可以执行  --&gt;     &lt;filter&gt;            &lt;filter-name&gt;struts2&lt;/filter-name&gt;            &lt;filter-class&gt;org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter&lt;/filter-class&gt;    &lt;/filter&gt;    &lt;filter-mapping&gt;            &lt;filter-name&gt;struts2&lt;/filter-name&gt;            &lt;url-pattern&gt;/*&lt;/url-pattern&gt;     &lt;/filter-mapping&gt; &lt;/web-app&gt; //---------------------------</code></pre><h2 id="struts2的架构"><a href="#struts2的架构" class="headerlink" title="struts2的架构"></a>struts2的架构</h2><h3 id="struts2的架构图解"><a href="#struts2的架构图解" class="headerlink" title="struts2的架构图解"></a>struts2的架构图解</h3><p><img src="/images/struts2/struts2%E7%9A%84%E6%9E%B6%E6%9E%84.png" alt="struts2的架构"></p><h3 id="struts2中的6个配置文件"><a href="#struts2中的6个配置文件" class="headerlink" title="struts2中的6个配置文件"></a>struts2中的6个配置文件</h3><ol><li>default.properties ：用于配置struts 常量。例如：编码</li><li>struts-default.xml ：struts提供的默认核心配置文件，struts大部分功能都在此配置文件中。</li><li>struts-plugin.xml ： struts插件核心配置文件，struts整合其他框架或工具。</li></ol><ul><li>以上三个文件，用户自己不进行修改。</li></ul><ol start="4"><li>struts.xml ：用户自定义核心配置文件。<br>&emsp;  struts.xml 可以配置所有内容，包括：常量,如：<br>&emsp;&emsp; &lt; constant name=”struts.i18n.encoding” value=”GBK”&gt; &lt; /constant&gt;  //配置编码</li><li>struts.properties ： 用于自定义struts常量配置文件。一般不使用。</li><li>web.xml ：也可以配置struts常量<br>@@@注意：如果配置常量，所有的配置文件存在优先级，编号越大优先级越高。</li></ol><h3 id="常见的struts常量"><a href="#常见的struts常量" class="headerlink" title="常见的struts常量"></a>常见的struts常量</h3><ol><li>用于配置项目编码//struts.i18n.encoding=UTF-8</li><li>struts整合spring需要配置，默认注释掉了//struts.objectFactory = spring</li><li>struts默认使用文件上传解析工具：apache-commons-fileupload<br>struts.multipart.parser=jakarta</li><li>临时文件保存位置//struts.multipart.saveDir=</li><li>上传文件最大大小，默认值：2M，单位字节//struts.multipart.maxSize</li><li>用于设置action请求路径扩展名。默认：action或空。多个值使用逗号分隔//struts.action.extension=action,,<br>例如：/hello/userAction 或 /hello/userAction.action</li><li>确定是否使用动态方法调用。默认关闭的。//struts.enable.DynamicMethodInvocation = false</li><li>设置开发模式，默认关闭。如果设置true：将提供更多提示信息，自动加载文件。//struts.devMode = false</li><li>自动重新加载国际化资源文件//struts.i18n.reload = true</li><li>自动冲洗加载xml配置文件。例如：struts.xml。但不会自动加载action类。//struts.configuration.xml.reload = true</li><li>设置struts标签主题，默认值：xhtml。取值：simple。//struts.ui.theme=xhtml<br>//开发中常用simple。xhtml存在默认布局，开发中布局使用美工提供页面，布局自定义。</li></ol><h3 id="struts-xml详解"><a href="#struts-xml详解" class="headerlink" title="struts.xml详解"></a>struts.xml详解</h3><ul><li><p>&lt; constant&gt; 用于配置struts常量<br>—name：struts提供固定常量名称。此名称从 default.properties文件获得<br>—value：常量值<br>例如：&lt;constant name=”struts.devMode” value=”true”&gt; &lt;/constant&gt; </p></li><li><p>&lt;package&gt; struts用于管理所有action类<br>—name：给当前包进行唯一命名，必填项。用于其他包继承的。<br>例如：struts-default.xml//&lt;package name=”struts-default” abstract=”true”&gt; //将struts已经完成的功能，作为一个包存在。名称是固定值struts-default。<br>—namespace：action访问路径前缀。<br>例如：”/“<br>“/hello”<br>“/a/b/c”<br>“”<br>—extends：用于继承其他包的。<br>例如：&lt;package extends=”struts-default”&gt;  当前action继承struts已经完成功能。<br>—abstract：是否抽象，如果设置为true，表示没有具体action实现功能。(了解)</p></li><li><p>&lt;action&gt;  用于配置action类（请求处理类）<br>—name：action名称，用于在请求路径进行访问<br>—class：action类全限定类名<br>—method:用于确定action类中需要执行的方法，默认值：execute</p></li><li><p>&lt;result&gt; 用于配置结果集<br>—name：用于确定action类中，方法的返回值<br>—text：标签体用于设置jsp路径<br>—type:结果集类型<br>&emsp; — dispatcher：请求转发，从一个action到jsp页面，默认值。<br>&emsp;— redirect：重定向到jsp页面<br>&emsp;— redirectAction：重定向到另一个action<br>&emsp;— stream：以流的方法发送浏览器，用于文件下载。<br>&emsp;— chain：链，在一次请求中，从一个action到另一个action</p></li><li><p>&lt;result-types&gt;  用于配置结果集类型的，一般不用，但需要看的懂。</p></li><li><p>&lt;interceptors&gt;  用于配置拦截器<br>— &lt;interceptor&gt;  用于注册拦截器的<br>—&lt;interceptor-stack&gt;  拦截器栈，将已经注册的拦截器组合在一起，形成一个栈。<br>例如：&lt;interceptor-stack name=”defaultStack”&gt;  声明一个拦截器栈，名称是：defaultStack</p></li><li><p>&lt;default-interceptor-ref&gt; 用于确定当前默认拦截器的<br>例如：&lt;default-interceptor-ref name=”defaultStack”/&gt;  将“defaultStack”拦截器栈，声明默认拦截器栈</p></li><li><p>&lt;default-action-ref&gt; 如果访问的action不存在，默认执行的aciton。<br>例如：/a/b/c/d/oneAction 此aciton没有配置，默认情况返回action找不到<br>!!!如果配置&lt;default-action-ref&gt; 如果存在404时，不显示action找不到，而是指定action</p></li><li><p>&lt;default-class-ref &gt;  用于配置 默认action实现类<br>例如：&lt;default-class-ref class=”com.opensymphony.xwork2.ActionSupport” /&gt;<br>!!!如果编写配置文件时没有声明class属性，及&lt;action name=””&gt;  将执行ActionSupport类。</p></li><li><p>&lt;include&gt;  将多个struts配置文件组合成一个。<br>struts.xml 入口配置文件，大家共用的。用于存放通用模块。<br>&emsp;&lt;include file=”struts-user.xml” /&gt;<br>&emsp;&lt;include file=”struts-book.xml” /&gt;<br>提供子配置文件<br>&emsp;struts-user.xml<br>&emsp;struts-book.xml</p></li></ul><h3 id="动态方法调用"><a href="#动态方法调用" class="headerlink" title="动态方法调用"></a>动态方法调用</h3><p><img src="/images/struts2/%E5%8A%A8%E6%80%81%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8.png" alt="动态方法调用"></p>]]></content>
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Struts2，ssh </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hinernate学习笔记</title>
      <link href="/2018/07/23/Hinernate%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/07/23/Hinernate%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p> hibernate</p><h1 id="Hibernate初印象"><a href="#Hibernate初印象" class="headerlink" title="Hibernate初印象"></a>Hibernate初印象</h1><p>ssh执行的基本流程<br><img src="/images/ssh执行的基本流程.png" alt="ssh执行的基本流程"></p><a id="more"></a><p>hibernate执行的基本流程<br><img src="/images/hibernate%E6%89%A7%E8%A1%8C%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.png" alt="hibernate执行的基本流程"></p><h2 id="准备文件"><a href="#准备文件" class="headerlink" title="准备文件"></a>准备文件</h2><p><strong>&emsp;download from hibernate.org:</strong><br>&emsp;&emsp; hibernate-annotation-3.4.0.GA.zip<br>&emsp;&emsp;  hibernate-distrubution-3.3.2.GA-dist.zip<br>&emsp;&emsp;  slf4j-1.5.8.zip</p><h1 id="暂停，先学mybatis"><a href="#暂停，先学mybatis" class="headerlink" title="暂停，先学mybatis"></a>暂停，先学mybatis</h1>]]></content>
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh框架学习 hibernate </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>markdown学习与文档</title>
      <link href="/2018/07/22/artical-title/"/>
      <url>/2018/07/22/artical-title/</url>
      <content type="html"><![CDATA[<h1 id="第一篇markdown文档"><a href="#第一篇markdown文档" class="headerlink" title="第一篇markdown文档"></a>第一篇markdown文档</h1><h2 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><h1 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h1><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><a id="more"></a><hr><blockquote><p>区块引用1</p><blockquote><p>区块引用2</p><blockquote><p>区块引用3 </p></blockquote></blockquote></blockquote><hr><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul><li>1 </li><li>2</li><li>3</li></ul><ul><li>1</li><li>2</li><li>3</li></ul><hr><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ol><li>1</li><li>2</li><li>2 </li><li>1 </li><li>2  </li></ol><hr><p>分割线</p><hr><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><pre><code>*   //两个tap代码块/8个空格+字符         int i = 0;         int j =i;*          </code></pre><hr><p>行<a href="https://" target="_blank" rel="noopener">内</a>链接</p><hr><p>行内<a href="http://www.baidu.com" title="参考式内容1" target="_blank" rel="noopener">参</a>考式1</p><hr><p>行内<a href="http://www.baidu.com" title="参考式内容2" target="_blank" rel="noopener">参考</a>式2</p><hr><p><em>强调1</em><br><em>强调2</em><br><strong>强调3</strong></p><hr><p>句内代码 <code>aa</code>块<br>Use the <code>printf()</code> function.</p><hr><p><img src="d:/1.jpg" alt="图片"></p><hr><p><a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a><br>普通连接</p><hr><p> 转义符<br>*<br>></p><hr><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><table><thead><tr><th style="text-align:right">列1（右对齐）</th><th style="text-align:center">列2（居中）</th><th style="text-align:left">列3（左对齐）</th></tr></thead><tbody><tr><td style="text-align:right"> A</td><td style="text-align:center">B</td><td style="text-align:left">C</td></tr><tr><td style="text-align:right"> D</td><td style="text-align:center">E</td><td style="text-align:left">F </td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> TestDoc </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/07/22/hello-world/"/>
      <url>/2018/07/22/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>

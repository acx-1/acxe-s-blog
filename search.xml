<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>2019年华为人工智能校园创新大赛“沙漏计事”之AI模块嵌入篇</title>
      <link href="/2019/07/26/2019%E5%B9%B4%E5%8D%8E%E4%B8%BA%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%A0%A1%E5%9B%AD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E2%80%9C%E6%B2%99%E6%BC%8F%E8%AE%A1%E4%BA%8B%E2%80%9D%E4%B9%8BAI%E6%A8%A1%E5%9D%97%E5%B5%8C%E5%85%A5%E7%AF%87/"/>
      <url>/2019/07/26/2019%E5%B9%B4%E5%8D%8E%E4%B8%BA%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E6%A0%A1%E5%9B%AD%E5%88%9B%E6%96%B0%E5%A4%A7%E8%B5%9B%E2%80%9C%E6%B2%99%E6%BC%8F%E8%AE%A1%E4%BA%8B%E2%80%9D%E4%B9%8BAI%E6%A8%A1%E5%9D%97%E5%B5%8C%E5%85%A5%E7%AF%87/</url>
      <content type="html"><![CDATA[<!-- build time:Tue Nov 05 2019 10:56:58 GMT+0800 (GMT+08:00) --><blockquote><p>&emsp;&emsp;本篇的主要内容为本人在2019年华为人工智能校园创新大赛比赛中的经验总结，在比赛中参与的作品为“沙漏计事”，是一款记事型app。在其中，我负责的部分是应用的ai模块的嵌入。以华为提供的HiAI为媒介，我将语音识别、自然语言处理接口嵌入到应用中，同时，我还利用他们提供的模型转换功能，将一个自训练的文本分类模型封装并嵌入到应用中。<br><a id="more"></a></p></blockquote><h1 id="0-概述"><a href="#0-概述" class="headerlink" title="0 概述"></a>0 概述</h1><p>&emsp;&emsp;以2019年华为人工智能校园创新大赛为契机，“沙漏记事”得以在多年的尘封中得到再次发展。“沙漏记事”是我们队长kofes本科以来就想要完成的作品。在这样一个难得的条件下，我们队伍四人决定一起完成这份一直未能实现的设计。</p><h1 id="1-项目介绍"><a href="#1-项目介绍" class="headerlink" title="1  项目介绍"></a>1 项目介绍</h1><p>&emsp;&emsp;沙漏记事 (以下简称应用) 是一款提供用户制定计划并实现计时提醒服务的手机应用。有别于同类型的竞品应用，在华为HIAI技术的支持下 (离线语音识别、自然语义理解等)，它呈现了一种一呼直达、知悉意图的智能交互方案。最直白的效果就是，你通俗地描述一句待办，不用复杂繁琐的设置操作，应用一步到位即可帮你设定好主题、期限或者周期的提醒安排。与此同时，我们还充分挖掘了应用的应用价值，在基础功能的前提下融入了多套可视化管理和分析工具，为你提供更加专业的记事、计划、提醒的管理方式，旨在帮助你养成受益终身的时间管理习惯。</p><p><img src="/images/HourGlassAI/appTotal.png" alt="appTotal"></p><center>图1-1 应用功能架构图</center>&emsp;&emsp;如图 1-1 所示，应用由四大模块构成，分别是便签模块、一站式管理模块、可视化分析模块以及兴趣社交模块 (社交模块暂未上线)。便签记事、计划提醒作为应用的主线功能，而一站式管理模块、可视化分析模块以及兴趣社交模块始终服务于主线功能。这正是创造这款应用的初衷，既管再丰富的功能拓展也是为了做好一件事，旨在帮助用户养成良好的时间管理习惯。 ![func1](/images/HourGlassAI/func_2.png)<center>图1-2 应用功能-语音输入模块</center><h1 id="2-合作经验"><a href="#2-合作经验" class="headerlink" title="2 合作经验"></a>2 合作经验</h1><h1 id="3-AI模块嵌入"><a href="#3-AI模块嵌入" class="headerlink" title="3 AI模块嵌入"></a>3 AI模块嵌入</h1><h2 id="3-1-AI功能模块总体说明"><a href="#3-1-AI功能模块总体说明" class="headerlink" title="3.1 AI功能模块总体说明"></a>3.1 AI功能模块总体说明</h2><p>&emsp;&emsp;为了更好的说明应用的AI模块，下面先介绍模块的总体架构。</p><p><img src="/images/HourGlassAI/totalStruct.png" alt="totalStruct"></p><center>图2-1 AI模块总体架构图</center><p>&emsp;&emsp;如上图所示，沙漏记事的AI功能模块主要由语音识别、分词接口、智能算法模型、智能提单系统四个部分组成，涉及了语音输入、文本分类、文本关键信息提取这三方面的内容。<br>&emsp;&emsp;虽然涉及的技术较多，但是在应用的实际操作中，需要用户参与的部分并不多。用户只需通过应用提供的语音输入入口说出自己想要记录的内容，在华为HIAI的帮助下，应用程序准确地将语音转换成文本，提取并计算出其中的时间、记事类型、提醒方式等关键信息，高效地完成一次记事。<br>&emsp;&emsp;具体的，可以从以下场景进行体会。<br><img src="/images/HourGlassAI/eg_1.png" alt="eg_1"></p><center>图2-2 AI模块用例</center><p>&emsp;&emsp;[例]通过语音输入”每天下午6点提醒我去操场跑步”。“语音识别”将识别语音内容并将其转换成文本，“分词接口”对文本进行多粒度的分词，同时标记出各个词语的词性,“词性组合过滤器”按照一定的词性组合规则对临近的分词结果进行重组。最后，通过分词和词性重组的结果，“文本分类器”计算并得出最大概率的类别，“智能提单系统”推算出提醒的时间以及提醒类型，完成记事事件的填写。</p><p>&emsp;&emsp;更进一步，整个大模块的整体架构如下图所示：<br><img src="/images/HourGlassAI/totalStruct_2.png" alt="totalStruct_2"></p><center>图2-3 AI模块总体架构-细节</center><p>&emsp;&emsp;下面是沙漏记事中的AI功能模块的技术细节。</p><ul><li><p>语音识别<br>&emsp;&emsp;语音识别模块使用了 HiAI Energine 的语音识别接口。常见的语音识别功能都需要网络的支持，凭借华为NPU，我们的语音识别模块在没有网络的情景下都能做到准确的语音识别。</p></li><li><p>分词接口<br>&emsp;&emsp;分词接口部分使用了HiAIEnergine 的分词和词性标注的接口。多粒度分词，可以按不同的粒度提取出文本中的关键信息。词性标注，可以准确的判断出某个词是名词、动词、形容词等等，使得语义分析更方便扩展。<br>&emsp;&emsp;为了更好地将这一接口的功能运用到应用中去，我在接口原有的多粒度分词与词性标注的基础上做了更深一步的变化，增加了一个词性组合过滤器，目的是筛选出文本中不同词性组合的短语，为智能提单系统多种关键信息的提取做铺垫。</p></li><li><p>智能算法模型（文本分类器）<br>&emsp;&emsp;HiAI Foundation DDK，是海思发布的人工智能计算SDK，该SDK面向人工智能应用程序开发人员和机器学习算法人员，通过使用HiAI DDK，可以将自己训练的caffe或Tensorflow模型运行在带有NPU的设备上，可以更好的提升移动端机器学习模型运行速度。<br>&emsp;&emsp;智能算法模型部分,即应用中的文本分类器，使用了HiAI Foundation DDK，将我们自己训练的tensorflow神经网络模型(文本分类器)集成到应用中去。<br>&emsp;&emsp;在模型训练与转换部分，我首先利用数据集构建了一个TF-IDF语料库，TF-IDF语料库在模型训练阶段和后面预测分类阶段都要用到，主要作用是将单条文本的分词结果转换成对应的TF-IDF词向量。然后，参照HiAI DDK上的算子表搭建并训练了tensorflow神经网络，使用的是多层感知机。模型训练完成后，利用HiAI DDK提供的工具对模型进行转换并封装成arr包供主程序调用。<br>&emsp;&emsp;文本分类器的使用过程为，接收分词接口分类出来的分词结果，使用TF-IDF语料库将分词结果转换成向量。然后，使用之前封装好的模型即可对向量的类别进行预测。</p></li></ul><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h1><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> 经验总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能校园创新大赛 </tag>
            
            <tag> HIAI </tag>
            
            <tag> 沙漏记事 </tag>
            
            <tag> Digix极客创新竞赛 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数海钩沉</title>
      <link href="/2018/11/05/%E6%95%B0%E6%B5%B7%E5%8B%BE%E6%B2%89/"/>
      <url>/2018/11/05/%E6%95%B0%E6%B5%B7%E5%8B%BE%E6%B2%89/</url>
      <content type="html"><![CDATA[<!-- build time:Tue Nov 05 2019 10:56:58 GMT+0800 (GMT+08:00) --><blockquote><p>本笔记的主要内容是关于学习中可能用到的数学知识。之所以叫《数海钩沉》是为了致敬研一上过的一门关于逻辑学的课程的老师，在课上老师提起了一段关于数海钩沉的往事。数海钩沉，从词义上看便能看出写此笔记的本意，数学是现代科学的基础，为了做研究我们时时在这之间沉浮。在沉浮之间，愿各位都能在各自的领域中有所成就。<br><a id="more"></a></p></blockquote><h1 id="kappa系数"><a href="#kappa系数" class="headerlink" title="kappa系数"></a>kappa系数</h1><h2 id="混淆矩阵简介"><a href="#混淆矩阵简介" class="headerlink" title="混淆矩阵简介"></a>混淆矩阵简介</h2><p>&emsp;&emsp;混淆矩阵，也称误差矩阵，Confusion Matrix。是表示精度评价的一种标准格式，用n行n列的矩阵形式来表示。<br>&emsp;&emsp;混淆矩阵的每一列代表了预测类别，每一列的总数表示预测为该类别的数据的数目；每一行代表了数据的真实归属类别，每一行的数据总数表示该类别的数据实例的数目。每一列中的数值表示真实数据被预测为该类的数目：如下图，第一行第一列中的43表示有43个实际归属第一类的实例被预测为第一类，同理，第一行第二列的2表示有2个实际归属为第二类的实例被错误预测为第一类。</p><div class="table-container"><table><thead><tr><th></th><th></th><th>预</th><th></th><th>测</th></tr></thead><tbody><tr><td></td><td></td><td>类1</td><td>类2</td><td>类3</td></tr><tr><td>实</td><td>类1</td><td>43</td><td>2</td><td>0</td></tr><tr><td></td><td>类2</td><td>5</td><td>45</td><td>1</td></tr><tr><td>际</td><td>类3</td><td>2</td><td>3</td><td>49</td></tr></tbody></table></div><p>&emsp;&emsp;在人工智能中，混淆矩阵（confusion matrix）是可视化工具，特别用于监督学习，在无监督学习一般叫做匹配矩阵。在图像精度评价中，主要用于比较分类结果和实际测得值，可以把分类结果的精度显示在一个混淆矩阵里面。混淆矩阵是通过将每个实测像元的位置和分类与分类图像中的相应位置和分类相比较计算的。</p><h2 id="kappa系数-1"><a href="#kappa系数-1" class="headerlink" title="kappa系数"></a>kappa系数</h2><p>&emsp;&emsp;Kappa系数用于一致性检验，也可以用于衡量分类精度，但kappa系数的计算是基于混淆矩阵的。<br>&emsp;&emsp;kappa系数是一种衡量分类精度的指标。它是通过把所有地表真实分类中的像元总数（N）乘以混淆矩阵对角线（Xkk）的和，再减去某一类地表真实像元总数与该类中被分类像元总数之积对所有类别求和的结果，再除以总像元数的平方减去某一类地表真实像元总数与该类中被分类像元总数之积对所有类别求和的结果所得到的.</p><h3 id="计算公式如下："><a href="#计算公式如下：" class="headerlink" title="计算公式如下："></a>计算公式如下：</h3><script type="math/tex;mode=display">k = \frac{p_o - p_e}{1-p_e}</script><p>其中，$p_0$ 是每一类正确分类的样本数量之和除以总样本数，也就是总体分类精度 。$p_e$为每一类预测分类数和实际分类数的乘积之和除以预测样本数的平方。<br>&emsp;&emsp;以上面的混淆矩阵为例：</p><script type="math/tex;mode=display">p_0=\frac{43+45+49}{150}=0.9133,p_e=\frac{50\times45+50\times51+50\times54}{150\times150}=0.3333,</script><p>因此，$k=\frac{0.9133-0.3333}{1-0.3333}=0.8699$</p><h3 id="结果判定"><a href="#结果判定" class="headerlink" title="结果判定"></a>结果判定</h3><p>&emsp;&emsp;kappa计算结果为-1~1，但通常kappa是落在 0~1 间，可分为五组来表示不同级别的一致性：0.0~0.20极低的一致性(slight)、0.21~0.40一般的一致性(fair)、0.41~0.60 中等的一致性(moderate)、0.61~0.80 高度的一致性(substantial)和0.81~1几乎完全一致(almost perfect)。</p><h1 id="马氏距离"><a href="#马氏距离" class="headerlink" title="马氏距离"></a>马氏距离</h1><h2 id="公式推导"><a href="#公式推导" class="headerlink" title="公式推导"></a>公式推导</h2><h3 id="方差"><a href="#方差" class="headerlink" title="方差"></a>方差</h3><p>&emsp;&emsp;方差（Variance）可以度量一组数据的分散程度。是各个样本与样本均值的差的平方和的均值。计算公式如下：</p><script type="math/tex;mode=display">s^{2}=\frac{\sum_{i=1}^{n}({X_{i}-\bar{X}})^{2}}{n-1}</script><h3 id="协方差"><a href="#协方差" class="headerlink" title="协方差"></a>协方差</h3><p>&emsp;&emsp;协方差（Covariance）可以度量两个变量变动的同步程度，也就是度量两个变量线性相关的程度。若两个变量的协方差为0，则认为二者线性无关;若大于0，则认为变量间正相关；反之，则认为是反相关。计算公式如下：</p><script type="math/tex;mode=display">cov(X,Y)=\frac{\sum_{i=1}^{n}({X_{i}-\bar{X}})({Y_{i}-\bar{Y}})}{n-1}</script><h3 id="协方差矩阵"><a href="#协方差矩阵" class="headerlink" title="协方差矩阵"></a>协方差矩阵</h3><p>&emsp;&emsp;协方差矩阵（Covariance matrix）由数据集中两两变量的协方差组成。一个m*n的协方差矩阵如下所示：</p><script type="math/tex;mode=display">C=\begin{bmatrix}cov(x_{1},x_{1}) & cov(x_{1},x_{2}) &\cdots &cov(x_{1},x_{n})\\cov(x_{2},x_{1}) & cov(x_{2},x_{2}) &\cdots &cov(x_{2},x_{n})\\\vdots & \vdots &\ddots &\vdots \\cov(x_{m},x_{1}) & cov(x_{m},x_{2}) &\cdots &cov(x_{m},x_{n})\end{bmatrix}</script><h3 id="pearson相关系数"><a href="#pearson相关系数" class="headerlink" title="pearson相关系数"></a>pearson相关系数</h3><p>&emsp;&emsp;Pearson相关系数 （Pearson CorrelationCoefficient）是用来衡量两个数据集合是否在一条线上面，它用来衡量定距变量间的线性关系。用数学公式表示，皮尔森相关系数等于两个变量的协方差除于两个变量的标准差。计算公式如下：</p><script type="math/tex;mode=display">\begin{align}p_{x,y}&=\frac{cov(X,Y)}{\sigma_{x}\sigma_{y}}  \\&=\frac{E((X-\mu_{x})(Y-\mu_{y}))}{\sigma_{x}\sigma_{y}}\\&=\frac{E(XY)-E(X)E(Y)}{\sqrt{E(X^{2})-E^{2}(X)}\sqrt{E(Y^{2})-E^{2}(Y)}}\end{align}</script><ul><li>X、Y线性相关时，两个变量的协方差等于两个变量各自标准差的乘积，此时皮尔森相关系数为1。</li><li>当n较小时，相关系数的波动较大，对有些样本相关系数的绝对值易接近于1；当n较大时，相关系数的绝对值容易偏小。特别是当n=2时，相关系数的绝对值总为1。因此在样本容量n较小时，我们仅凭相关系数较大就判定变量x与y之间有密切的线性关系是不妥当的。</li></ul><h3 id="马氏距离-1"><a href="#马氏距离-1" class="headerlink" title="马氏距离"></a>马氏距离</h3><p>&emsp;&emsp;马氏距离（Mahalanobis distance）是用来表示某一点P与某一分布D之间的距离;表示数据的协方差距离。它是一种有效的计算两个未知样本集的相似度的方法。与欧氏距离不同的是它考虑到各种特性之间的联系。它不受量纲的影响，两点之间的马氏距离与原始数据的测量单位无关。</p><script type="math/tex;mode=display">\begin{align}&对于点X=(x_{1},x_{2},...,x_{n})^{T},与均值为\mu=(\mu_{1},\mu_{2},...,\mu_{n})^{T},协方差矩阵为S的分布,其马氏距离为：\\&\quad\quad D_{M}(x)=\sqrt{(X-\mu)^{T}S^{-1}(X-\mu)}\\& 对于两个服从同一分布并且协方差矩阵为S的随机向量X,Y,其马氏距离为\\&\quad\quad d(X,Y)=\sqrt{(\overrightarrow{X}-\overrightarrow{Y})^{T} S^{-1}(\overrightarrow{X}-\overrightarrow{Y})}\\&\quad\quad 其中，S^{-1}为S的逆矩阵,根号内的运算均为点积运算。\\&若协方差矩阵为单位矩阵，马氏距离变为欧式距离；\\&若协方差矩阵为对角线矩阵，称为标准化欧氏距离，其公式为：\\&\quad\quad d(X,Y)=\sqrt{\sum_{i=1}^{N}{\frac{(x_{i}-y_{i})^{2} }{S^{2}_{i}}}},其中S_{i}为(x_{i},y_{i})的方差\end{align}</script><p>参考文献：<br>&emsp;[1]<a href="https://blog.csdn.net/lyq_12/article/details/83780932" target="_blank" rel="noopener">协方差、协方差矩阵的数学概念及算法计算</a><br>&emsp;[2]<a href="https://blog.csdn.net/zzh1301051836/article/details/82217676" target="_blank" rel="noopener">协方差、相关系数（Pearson 相关系数）</a><br>&emsp;[3]<a href="https://www.jianshu.com/p/5706a108a0c6" target="_blank" rel="noopener">度量学习中的马氏距离</a><br>&emsp;[4]<a href="https://en.wikipedia.org/wiki/Mahalanobis_distance" target="_blank" rel="noopener">维基百科：马氏距离</a><br>&emsp;[5]<a href="https://www.cnblogs.com/denny402/p/7027954.html" target="_blank" rel="noopener">距离度量以及python实现(一)</a><br>&emsp;[6]<a href="https://zhuanlan.zhihu.com/p/30367622" target="_blank" rel="noopener">谢小娇的数学基础之马氏距离</a></p><h1 id="矩阵的QR分解"><a href="#矩阵的QR分解" class="headerlink" title="矩阵的QR分解"></a>矩阵的QR分解</h1><p>&emsp;&emsp;若n阶实非奇异矩阵A可以分解为正交矩阵Q与实非奇异上三角矩阵R的乘积，即A=QR，则称该分解式为矩阵A的QR分解。</p><ul><li>正交矩阵—-若矩阵A与A的转置矩阵乘积为单位矩阵E,则n阶实矩阵A称为正交矩阵。其满足:<ul><li>(1)A的转置矩阵也是正交矩阵；</li><li>(2)A及其转置矩阵的各行是单位向量且两两正交；</li><li>(3)|A|=1；</li><li>(4)A的转置矩阵也是其逆矩阵；</li></ul></li></ul><p>&emsp;&emsp;用施密特(Schmidt)正交方法求矩阵的QR分解过程，如例子所示：</p><script type="math/tex;mode=display">\begin{align}&例：用Schmidt正交化方法求矩阵A=\begin{bmatrix}1&2&2\\2&1&2\\1&2&1\\\end{bmatrix}的QR分解。\\&解：令\alpha_{1}=(1,2,1)^{T},\alpha_{2}=(2,1,2)^{T},\alpha_{3}=(2,2,1)^{T},正交化得：\\&\quad \quad \beta_{1}=\alpha_{1}=(1,2,1)^{T},\beta_{2}=\alpha_{2}-\beta_{1}=(1,-1,1)^{T},\beta_{3}=\alpha_{3}-\frac{1}{3}\beta_{2}-\frac{7}{6}\beta_{1}=(\frac{1}{2},0,-\frac{1}{2})^{T}\\&构造矩阵Q=\begin{bmatrix}\frac{1}{\sqrt{6}}&\frac{1}{\sqrt{3}}&\frac{1}{\sqrt{2}}\\\frac{2}{\sqrt{6}}&-\frac{1}{\sqrt{3}}&0\\\frac{1}{\sqrt{6}}&\frac{1}{\sqrt{3}}&-\frac{1}{\sqrt{2}} \end{bmatrix},R=\begin{bmatrix} \sqrt{6}&0&0\\0&\sqrt{3}&0\\0&0&\frac{1}{\sqrt{2}}\end{bmatrix}\begin{bmatrix}1&1&\frac{7}{6}\\0&1&\frac{1}{3}\\0&0&1\end{bmatrix}=\begin{bmatrix}\sqrt{6}&\sqrt{6}&\frac{7}{\sqrt{6}}\\0&\sqrt{3}&\frac{1}{\sqrt{3}}\\0&0&\frac{1}{\sqrt{2}}\end{bmatrix}\\&则有A=QR.\end{align}</script><p>参考文献：<br>&emsp;[1]<a href="http://oss.wanfangdata.com.cn/www/download.ashx/%E7%9F%A9%E9%98%B5QR%E5%88%86%E8%A7%A3%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95.ashx?isread=true&amp;type=perio&amp;resourceId=llgdzkxxxb200901007&amp;transaction=%7B%22id%22%3Anull%2C%22transferOutAccountsStatus%22%3Anull%2C%22transaction%22%3A%7B%22id%22%3A%221181477591614246912%22%2C%22status%22%3A1%2C%22createDateTime%22%3Anull%2C%22payDateTime%22%3A1570521183290%2C%22authToken%22%3A%22TGT-14753589-Hznu06LfZr6xulGjgqbN32ez5fgiDj2EHhyl2bzFUEijLYXaYr-my.wanfangdata.com.cn%22%2C%22user%22%3A%7B%22accountType%22%3A%22Group%22%2C%22key%22%3A%22gdgydxtsg%22%7D%2C%22transferIn%22%3A%7B%22accountType%22%3A%22Income%22%2C%22key%22%3A%22PeriodicalFulltext%22%7D%2C%22transferOut%22%3A%7B%22GTimeLimit.gdgydxtsg%22%3A3.0%7D%2C%22turnover%22%3A3.0%2C%22orderTurnover%22%3A0.0%2C%22productDetail%22%3A%22perio_llgdzkxxxb200901007%22%2C%22productTitle%22%3Anull%2C%22userIP%22%3A%22183.63.119.55%22%2C%22organName%22%3Anull%2C%22memo%22%3Anull%2C%22orderUser%22%3A%22gdgydxtsg%22%2C%22orderChannel%22%3A%22pc%22%2C%22payTag%22%3A%22%22%2C%22webTransactionRequest%22%3Anull%2C%22signature%22%3A%22XnYDMYzWQKsli0t2I4XeKI4MXadTlQvwDu4Cxu8VTrxzS7gJq1pniBX0k%2BeQ7IEkKKM61Kej0NPV%5CnJHCqfW6InFqkDt%2FW9P67zcVwq2WcQD3DMrtPgTYIo6FwDBLuCp6ZnlS%2Fs3ZGrmXMX2e3Z9zzr7eZ%5CnkDqTC6DD2APcfjDbW1k%3D%22%2C%22delete%22%3Afalse%7D%2C%22isCache%22%3Afalse%7D" target="_blank" rel="noopener">矩阵QR分解的三种方法</a></p><h1 id="To-be-continue…"><a href="#To-be-continue…" class="headerlink" title="To be continue…"></a>To be continue…</h1><!-- rebuild by neat -->]]></content>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《用python进行数据分析》学习笔记</title>
      <link href="/2018/10/26/%E3%80%8A%E7%94%A8python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/10/26/%E3%80%8A%E7%94%A8python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<!-- build time:Tue Nov 05 2019 10:56:58 GMT+0800 (GMT+08:00) --><blockquote><p>本篇文章主要内容来源于<a href="https://www.jianshu.com/p/04d180d90a3f" target="_blank" rel="noopener">《利用python进行数据分析》第二版</a>,主要是对学习资料的整理与补充，若是有疑问，欢迎指出~</p></blockquote><a id="more"></a><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><p><img src="/images/python-learning/bookface.png" alt="bookface"></p><p>&emsp;&emsp;本篇文章来源于Wes Mckinney 的《Python for Data Analysis.2nd edition》,我看的是SeanCheney对该书的中文翻译本，链接在开头已给出。</p><p><strong>&emsp;&emsp;目前可提供的链接如下：</strong></p><ul><li><a href="https://www.jianshu.com/p/fad9e41c1a42" target="_blank" rel="noopener">相关电子书下载链接</a></li><li><a href="https://github.com/iamseancheney/python_for_data_analysis_2nd_chinese_version" target="_blank" rel="noopener">GitHub链接</a></li><li><a href="https://github.com/iamseancheney/python_for_data_analysis_2nd_chinese_version" target="_blank" rel="noopener">GitBook链接</a></li><li><a href="https://github.com/wesm/pydata-book" target="_blank" rel="noopener">本书代码链接</a></li></ul><p><strong>&emsp;&emsp;第二版和第一版的不同之处在于：</strong></p><ul><li>包括Python教程内的所有代码升级为Python 3.6（第1版使用的是Python 2.7）</li><li>更新了Anaconda和其它包的Python安装方法</li><li>更新了Pandas为2017最新版</li><li>新增了一章，关于更高级的Pandas工具，外加一些tips</li><li>简要介绍了使用StatsModels和scikit-learn</li></ul><h2 id="python的一些特点"><a href="#python的一些特点" class="headerlink" title="python的一些特点"></a>python的一些特点</h2><p><strong>python的优点如下:</strong></p><ul><li><p>作为一种胶水语言<br>&emsp;&emsp;Python成为成功的科学计算工具的部分原因是，它能够轻松地集成C、C++以及Fortran代码。大部分现代计算环境都利用了一些Fortran和C库来实现线性代数、优选、积分、快速傅里叶变换以及其他诸如此类的算法。许多企业和国家实验室也利用Python来“粘合”那些已经用了多年的遗留软件系统。</p></li><li><p>拥有丰富的库资源<br>&emsp;&emsp;在数据分析、交互式计算以及数据可视化方面，Python将不可避免地与其他开源和商业的领域特定编程语言/工具进行对比，如R、MATLAB、SAS、Stata等。近年来，由于Python的库（例如pandas和scikit-learn）不断改良，使其成为数据分析任务的一个优选方案。结合其在通用编程方面的强大实力，我们完全可以只使用Python这一种语言构建以数据为中心的应用。</p></li></ul><p><strong>python的缺点如下：</strong></p><ul><li><p>运行速度比编译型语言（java,c等）慢<br>&emsp;&emsp;由于Python是一种解释型编程语言，因此大部分Python代码都要比用编译型语言（比如Java和C）编写的代码运行慢得多。由于程序员的时间通常都比CPU时间值钱，因此许多人也愿意对此做一些取舍。但是，在那些延迟要求非常小或高资源利用率的应用中（例如高频交易系统），耗费时间使用诸如C++这样更低级、更低生产率的语言进行编程也是值得的。</p></li><li><p>对高并发、多线程的应用程序支持较差<br>&emsp;&emsp;对于高并发、多线程的应用程序而言（尤其是拥有许多计算密集型线程的应用程序），Python并不是一种理想的编程语言。这是因为Python有一个叫做全局解释器锁（Global Interpreter Lock，GIL）的组件，这是一种防止解释器同时执行多条Python字节码指令的机制。虽然很多大数据处理应用程序为了能在较短的时间内完成数据集的处理工作都需要运行在计算机集群上，但是仍然有一些情况需要用单进程多线程系统来解决。<br>&emsp;&emsp;这并不是说Python不能执行真正的多线程并行代码。例如，Python的C插件使用原生的C或C++的多线程，可以并行运行而不被GIL影响，只要它们不频繁地与Python对象交互。</p></li></ul><h2 id="重要的python库"><a href="#重要的python库" class="headerlink" title="重要的python库"></a>重要的python库</h2><div class="table-container"><table><thead><tr><th style="text-align:center">库名</th><th style="text-align:left">简介</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:center">NumPy</td><td style="text-align:left">引入惯例：<code>import numpy as np</code><br>Numerical Python的简称，是Python科学计算的基础包</td><td style="text-align:left">①快速高效的多维数组对象ndarray；<br>②用于对数组执行元素级计算以及直接对数组执行数学运算的函数；<br>③用于读写硬盘上基于数组的数据集的工具；<br>④线性代数运算、傅里叶变换，以及随机数生成;<br>⑤成熟的C API， 用于Python插件和原生C、C++、Fortran代码访问NumPy的数据结构和计算工具。</td></tr><tr><td style="text-align:center">pandas</td><td style="text-align:left">引入惯例：<code>import pandas as pd</code><br>兼具NumPy高性能的数组计算功能以及电子表格和关系型数据库（如SQL）灵活的数据处理能力。</td><td style="text-align:left">①有标签轴的数据结构，支持自动或清晰的数据对齐。这可以防止由于数据不对齐，或处理来源不同的索引不同的数据，所造成的错误；<br>②集成时间序列功能；<br>③相同的数据结构用于处理时间序列数据和非时间序列数据；<br>④保存元数据的算术运算和压缩；<br>⑤灵活处理缺失数据；<br>⑥合并和其它流行数据库（例如基于SQL的数据库）的关系操作。</td></tr><tr><td style="text-align:center">matplolib</td><td style="text-align:left">引入惯例：<code>import matplotlib.pyplot as plt</code><br>是最流行的用于绘制图表和其它二维数据可视化的Python库。</td><td style="text-align:left">直接调用库即可绘图，很方便</td></tr><tr><td style="text-align:center">scipy</td><td style="text-align:left">是一组专门解决科学计算中各种标准问题域的包的集合。</td><td style="text-align:left">主要包括下面这些包：<br>①scipy.integrate：数值积分例程和微分方程求解器；<br>②scipy.linalg：扩展了由numpy.linalg提供的线性代数例程和矩阵分解功能；<br>③scipy.optimize：函数优化器（最小化器）以及根查找算法；<br>④scipy.signal：信号处理工具；<br>⑤scipy.sparse：稀疏矩阵和稀疏线性系统求解器；<br>⑥scipy.special：SPECFUN（这是一个实现了许多常用数学函数（如伽玛函数）的Fortran库）的包装器；<br>⑦scipy.stats：标准连续和离散概率分布（如密度函数、采样器、连续分布函数等）、各种统计检验方法，以及更好的描述统计法</td></tr><tr><td style="text-align:center">scikit-learn</td><td style="text-align:left">Python的通用机器学习工具包，与pandas、statsmodels和IPython一起，scikit-learn对于Python成为高效数据科学编程语言起到了关键作用。</td><td style="text-align:left">它的子模块包括：<br>①分类：SVM、近邻、随机森林、逻辑回归等等；<br>②回归：Lasso、岭回归等等；<br>③聚类：k-均值、谱聚类等等；<br>④降维：PCA、特征选择、矩阵分解等等；<br>⑤选型：网格搜索、交叉验证、度量；<br>⑥预处理：特征提取、标准化。</td></tr><tr><td style="text-align:center">statsmodels</td><td style="text-align:left">引入惯例：<code>import statsmodels as sm</code><br>包含经典统计学和经济计量学的算法，是一个统计分析包。</td><td style="text-align:left">包括如下子模块：<br>①回归模型：线性回归，广义线性模型，健壮线性模型，线性混合效应模型等等；<br>②方差分析（ANOVA）；<br>③时间序列分析：AR，ARMA，ARIMA，VAR和其它模型；<br>④非参数方法：核密度估计，核回归；<br>⑤统计模型结果可视化。</td></tr></tbody></table></div><h1 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h1><p>&emsp;&emsp;<strong>python基础</strong>的学习推荐<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">廖雪峰的python教程(点击进入)</a>。教程涵盖了python中常用的知识点，是作为快速入门教程的不错选择。里面的资料整理的很完整，在这一部分就不搬运了。<br>&emsp;&emsp;<strong>ps：</strong>ipython很好用，基本包含了ide常用的功能，推荐！</p><h1 id="NumPy基础：数组及矢量运算"><a href="#NumPy基础：数组及矢量运算" class="headerlink" title="NumPy基础：数组及矢量运算"></a>NumPy基础：数组及矢量运算</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>&emsp;&emsp;NumPy（Numerical Python的简称）是Python数值计算最重要的基础包。大多数提供科学计算的包都是用NumPy的数组作为构建基础。<br>&emsp;&emsp;NumPy本身并没有提供多么高级的数据分析功能，理解NumPy数组以及面向数组的计算将有助于你更加高效地使用诸如pandas之类的工具。我们需要注意的特点之一就是它可以高效处理大数组的数据，体现于：</p><ol><li><p>数组占用的内存更少。<br>&emsp;&emsp;因为NumPy是在一个连续的内存块中存储数据，独立于其他Python内置对象。NumPy的C语言编写的算法库可以操作内存，而不必进行类型检查或其它前期工作。比起Python的内置序列，NumPy数组使用的内存更少。</p></li><li><p>对数组的计算更方便。NumPy可以在整个数组上执行复杂的计算，而不需要Python的for循环</p></li></ol><h2 id="NumPy的ndarray：一种多维数组对象"><a href="#NumPy的ndarray：一种多维数组对象" class="headerlink" title="NumPy的ndarray：一种多维数组对象"></a>NumPy的ndarray：一种多维数组对象</h2><p>&emsp;&emsp;ndarray，即N维数组对象，该对象是一个快速灵活的大数据集容器。这种数组对整块数据的数学运算的语法跟标量元素之间的运算一样。下面是其的一个简单的使用示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#引入numpy</span></span><br><span class="line">In [<span class="number">12</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 产生一些随机数</span></span><br><span class="line">In [<span class="number">13</span>]: data = np.random.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">In [<span class="number">14</span>]: data</span><br><span class="line">Out[<span class="number">14</span>]: </span><br><span class="line">array([[<span class="number">-0.2047</span>,  <span class="number">0.4789</span>, <span class="number">-0.5194</span>],</span><br><span class="line">       [<span class="number">-0.5557</span>,  <span class="number">1.9658</span>,  <span class="number">1.3934</span>]])</span><br><span class="line">       </span><br><span class="line"><span class="comment">#对数组进行一些简单的运算       </span></span><br><span class="line">In [<span class="number">15</span>]: data * <span class="number">10</span></span><br><span class="line">Out[<span class="number">15</span>]: </span><br><span class="line">array([[ <span class="number">-2.0471</span>,   <span class="number">4.7894</span>,  <span class="number">-5.1944</span>],</span><br><span class="line">       [ <span class="number">-5.5573</span>,  <span class="number">19.6578</span>,  <span class="number">13.9341</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: data + data</span><br><span class="line">Out[<span class="number">16</span>]: </span><br><span class="line">array([[<span class="number">-0.4094</span>,  <span class="number">0.9579</span>, <span class="number">-1.0389</span>],</span><br><span class="line">       [<span class="number">-1.1115</span>,  <span class="number">3.9316</span>,  <span class="number">2.7868</span>]])</span><br><span class="line">       </span><br><span class="line"><span class="comment">#查看数组的一些元属性</span></span><br><span class="line">In [<span class="number">17</span>]: data.shape</span><br><span class="line">Out[<span class="number">17</span>]: (<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">18</span>]: data.dtype</span><br><span class="line">Out[<span class="number">18</span>]: dtype(<span class="string">'float64'</span>)</span><br></pre></td></tr></table></figure><p>ps：书中提到的‘数组’，‘numpy数组’，‘ndarray’基本上都是指ndarray对象</p><h3 id="创建ndarray"><a href="#创建ndarray" class="headerlink" title="创建ndarray"></a>创建ndarray</h3><ol><li>array函数<br>&emsp;&emsp;创建数组最简单的方法是使用array函数，它接受一切序列型的对象（包括其他数组），然后产生一个新的含有传入数据的numpy数组。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用array函数创建一维数组</span></span><br><span class="line">In [<span class="number">19</span>]: data1 = [<span class="number">6</span>, <span class="number">7.5</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">In [<span class="number">20</span>]: arr1 = np.array(data1)</span><br><span class="line">In [<span class="number">21</span>]: arr1</span><br><span class="line">Out[<span class="number">21</span>]: array([ <span class="number">6.</span> ,  <span class="number">7.5</span>,  <span class="number">8.</span> ,  <span class="number">0.</span> ,  <span class="number">1.</span> ])</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用array函数创建二维数组</span></span><br><span class="line">In [<span class="number">22</span>]: data2 = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]]</span><br><span class="line">In [<span class="number">23</span>]: arr2 = np.array(data2)</span><br><span class="line">In [<span class="number">24</span>]: arr2</span><br><span class="line">Out[<span class="number">24</span>]: </span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">       [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]])</span><br></pre></td></tr></table></figure><ol><li>arange函数<br>&emsp;&emsp;arange是Python内置函数range的数组版。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用arange函数创建一维数组</span></span><br><span class="line">In [<span class="number">20</span>]: arr1 = np.arange(<span class="number">10</span>)</span><br><span class="line">In [<span class="number">21</span>]: arr1</span><br><span class="line">Out[<span class="number">21</span>]: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用array函数创建有一定规律一维数组</span></span><br><span class="line">In [<span class="number">23</span>]: arr2 = np.arange(<span class="number">2</span>,<span class="number">6</span>)</span><br><span class="line">In [<span class="number">24</span>]: arr2</span><br><span class="line">Out[<span class="number">24</span>]: </span><br><span class="line">array([<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: arr3 = np.arange(<span class="number">1</span>,<span class="number">11</span>,<span class="number">2</span>)</span><br><span class="line">In [<span class="number">26</span>]: arr3</span><br><span class="line">Out[<span class="number">26</span>]: </span><br><span class="line">array([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>])</span><br></pre></td></tr></table></figure><ol><li>zeros函数,ones函数和empty函数<br>&emsp;&emsp;除np.array之外，还有一些函数也可以新建数组。比如，zeros和ones分别可以创建指定长度或形状的全0或全1数组。empty可以创建一个没有任何具体值的数组。要用这些方法创建多维数组，只需传入一个表示形状的元组即可：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#zeros函数</span></span><br><span class="line">In [<span class="number">29</span>]: np.zeros(<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">29</span>]: array([ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>])</span><br><span class="line">In [<span class="number">30</span>]: np.zeros((<span class="number">3</span>, <span class="number">6</span>))</span><br><span class="line">Out[<span class="number">30</span>]: </span><br><span class="line">array([[ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>],</span><br><span class="line">       [ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>],</span><br><span class="line">       [ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#empty函数(多数情况下，它返回的是一些未初始化的垃圾值)</span></span><br><span class="line">In [<span class="number">31</span>]: np.empty((<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>))</span><br><span class="line">Out[<span class="number">31</span>]: </span><br><span class="line">array([[[ <span class="number">0.</span>,  <span class="number">0.</span>],</span><br><span class="line">        [ <span class="number">0.</span>,  <span class="number">0.</span>],</span><br><span class="line">        [ <span class="number">0.</span>,  <span class="number">0.</span>]],</span><br><span class="line">       [[ <span class="number">0.</span>,  <span class="number">0.</span>],</span><br><span class="line">        [ <span class="number">0.</span>,  <span class="number">0.</span>],</span><br><span class="line">        [ <span class="number">0.</span>,  <span class="number">0.</span>]]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#ones函数</span></span><br><span class="line">In [<span class="number">32</span>]: np.ones(<span class="number">10</span>)</span><br><span class="line">Out[<span class="number">32</span>]: array([ <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>])</span><br><span class="line">In [<span class="number">33</span>]: np.zeros((<span class="number">3</span>, <span class="number">6</span>))</span><br><span class="line">Out[<span class="number">33</span>]: </span><br><span class="line">array([[ <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>],</span><br><span class="line">       [ <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>],</span><br><span class="line">       [ <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>]])</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;下面列出了一些数组创建函数。由于NumPy关注的是数值计算，因此，如果没有特别指定，数据类型基本都是float64（浮点数）。</p><div class="table-container"><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">array</td><td style="text-align:left">将输入数据（列表、元组、数组或其他序列类型）转换为ndarray。要么推断出dtype，要么指定dtype。默认直接复制输入数据</td></tr><tr><td style="text-align:left">asarray</td><td style="text-align:left">将输入转换为ndarray，如果输入本身就是一个ndarray就不进行复制</td></tr><tr><td style="text-align:left">arange</td><td style="text-align:left">类似于内置的range,但返回的是一个ndarray，而不是列表</td></tr><tr><td style="text-align:left">ones,ones&#95;like</td><td style="text-align:left">根据指定的形状和dtype创建一个全1的数组。ones&#95;like以另一个数组为参数，并根据其形状和dtype创建一个全1数组</td></tr><tr><td style="text-align:left">zeros,zeros&#95;like</td><td style="text-align:left">类似于ones和ones&#95;like，只不过产生的是全0数组而已</td></tr><tr><td style="text-align:left">empty,empty&#95;like</td><td style="text-align:left">创建新数组，只分配内存空间但不填充任何值</td></tr><tr><td style="text-align:left">full,full&#95;like</td><td style="text-align:left">用fill value 中的所有值，根据指定的形状和dtype创建一个数组。</td></tr><tr><td style="text-align:left">eye,identity</td><td style="text-align:left">创建一个正方的N*N单位矩阵（对角线为1，其余为0）</td></tr></tbody></table></div><h3 id="ndarray的数据类型"><a href="#ndarray的数据类型" class="headerlink" title="ndarray的数据类型"></a>ndarray的数据类型</h3><p>&emsp;&emsp;dtype（数据类型）是一个特殊的对象，它含有ndarray将一块内存解释为特定数据类型所需的信息。多数情况下，它们直接映射到相应的机器表示，这使得“读写磁盘上的二进制数据流”以及“集成低级语言代码（如C、Fortran）”等工作变得更加简单。数值型dtype的命名方式相同：一个类型名（如float或int），后面跟一个用于表示各元素位长的数字。标准的双精度浮点值（即Python中的float对象）需要占用8字节（即64位）。因此，该类型在NumPy中就记作float64。下面列出了numpy所支持的所有数据类型。</p><div class="table-container"><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">类型代码</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">int8、uint8</td><td style="text-align:left">i1、u1</td><td style="text-align:left">有符号和无符号的8位（1个字节）整型</td></tr><tr><td style="text-align:left">int16、uint16</td><td style="text-align:left">i2、u2</td><td style="text-align:left">有符号和无符号的16位（2个字节）整型</td></tr><tr><td style="text-align:left">int32、uint32</td><td style="text-align:left">i4、u4</td><td style="text-align:left">有符号和无符号的32位（4个字节）整型</td></tr><tr><td style="text-align:left">int64、uint64</td><td style="text-align:left">i8、u8</td><td style="text-align:left">有符号和无符号的64位（8个字节）整型</td></tr><tr><td style="text-align:left">float16</td><td style="text-align:left">f2</td><td style="text-align:left">半精度浮点数</td></tr><tr><td style="text-align:left">float32</td><td style="text-align:left">f4或f</td><td style="text-align:left">标准的单精度浮点数。与C的float兼容</td></tr><tr><td style="text-align:left">float64</td><td style="text-align:left">f8或d</td><td style="text-align:left">标准的双精度浮点数。与C的double和python的float对象兼容</td></tr><tr><td style="text-align:left">float128</td><td style="text-align:left">f16或g</td><td style="text-align:left">扩展精度浮点数</td></tr><tr><td style="text-align:left">complex64,complex128,complex256</td><td style="text-align:left">c8、c16、c32</td><td style="text-align:left">分别用两个32位、64位或128位浮点数表示的复数</td></tr><tr><td style="text-align:left">bool</td><td style="text-align:left">?</td><td style="text-align:left">存储True和False值的布尔类型</td></tr><tr><td style="text-align:left">object</td><td style="text-align:left">O</td><td style="text-align:left">Python对象类型</td></tr><tr><td style="text-align:left">string</td><td style="text-align:left">S</td><td style="text-align:left">固定长度的字符串类型（每个字符一个字节）。例如，要创建一个长度为10的字符串，应使用S10</td></tr><tr><td style="text-align:left">unicode</td><td style="text-align:left">U</td><td style="text-align:left">固定长度的unicode类型（字节数由平台决定）。跟字符串的定义方式一样（如U10）</td></tr></tbody></table></div><p>&emsp;&emsp;操作dtype,python提供了以下方法：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#改变数组的dtype</span></span><br><span class="line">In [<span class="number">37</span>]: arr = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">In [<span class="number">38</span>]: arr.dtype</span><br><span class="line">Out[<span class="number">38</span>]: dtype(<span class="string">'int64'</span>)</span><br><span class="line">In [<span class="number">39</span>]: float_arr = arr.astype(np.float64)</span><br><span class="line">In [<span class="number">40</span>]: float_arr.dtype</span><br><span class="line">Out[<span class="number">40</span>]: dtype(<span class="string">'float64'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定数组的dtype（将数字字符串转换为数字类型）</span></span><br><span class="line">In [<span class="number">44</span>]: numeric_strings = np.array([<span class="string">'1.25'</span>, <span class="string">'-9.6'</span>, <span class="string">'42'</span>], dtype=np.string_)</span><br><span class="line">In [<span class="number">45</span>]: numeric_strings.astype(float)</span><br><span class="line">Out[<span class="number">45</span>]: array([  <span class="number">1.25</span>,  <span class="number">-9.6</span> ,  <span class="number">42.</span>  ])</span><br><span class="line"></span><br><span class="line"><span class="comment">#以字符串的形式指定dtype</span></span><br><span class="line">In [<span class="number">49</span>]: empty_uint32 = np.empty(<span class="number">8</span>, dtype=<span class="string">'u4'</span>)</span><br><span class="line">In [<span class="number">50</span>]: empty_uint32</span><br><span class="line">Out[<span class="number">50</span>]: </span><br><span class="line">array([         <span class="number">0</span>, <span class="number">1075314688</span>,          <span class="number">0</span>, <span class="number">1075707904</span>,          <span class="number">0</span>,</span><br><span class="line">       <span class="number">1075838976</span>,          <span class="number">0</span>, <span class="number">1072693248</span>], dtype=uint32)</span><br></pre></td></tr></table></figure><p></p><h2 id="ndarray数组的基本操作"><a href="#ndarray数组的基本操作" class="headerlink" title="ndarray数组的基本操作"></a>ndarray数组的基本操作</h2><h3 id="数组的运算与索引"><a href="#数组的运算与索引" class="headerlink" title="数组的运算与索引"></a>数组的运算与索引</h3><h4 id="数组的基本运算"><a href="#数组的基本运算" class="headerlink" title="数组的基本运算"></a>数组的基本运算</h4><p>&emsp;&emsp;数组很重要，因为它使你不用编写循环即可对数据执行批量运算。NumPy用户称其为<strong>矢量化（vectorization）</strong>。具体的运算如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#大小相等的数组之间的任何算术运算都会将运算应用到元素级</span></span><br><span class="line">In [<span class="number">51</span>]: arr = np.array([[<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>], [<span class="number">4.</span>, <span class="number">5.</span>, <span class="number">6.</span>]])</span><br><span class="line">In [<span class="number">52</span>]: arr</span><br><span class="line">Out[<span class="number">52</span>]: </span><br><span class="line">array([[ <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>],</span><br><span class="line">       [ <span class="number">4.</span>,  <span class="number">5.</span>,  <span class="number">6.</span>]])</span><br><span class="line">In [<span class="number">53</span>]: arr * arr</span><br><span class="line">Out[<span class="number">53</span>]: </span><br><span class="line">array([[  <span class="number">1.</span>,   <span class="number">4.</span>,   <span class="number">9.</span>],</span><br><span class="line">       [ <span class="number">16.</span>,  <span class="number">25.</span>,  <span class="number">36.</span>]])</span><br><span class="line">In [<span class="number">54</span>]: arr - arr</span><br><span class="line">Out[<span class="number">54</span>]: </span><br><span class="line">array([[ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>],</span><br><span class="line">       [ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#数组与标量的算术运算会将标量值传播到各个元素：</span></span><br><span class="line">In [<span class="number">55</span>]: <span class="number">1</span> / arr</span><br><span class="line">Out[<span class="number">55</span>]: </span><br><span class="line">array([[ <span class="number">1.</span>    ,  <span class="number">0.5</span>   ,  <span class="number">0.3333</span>],</span><br><span class="line">       [ <span class="number">0.25</span>  ,  <span class="number">0.2</span>   ,  <span class="number">0.1667</span>]])</span><br><span class="line">In [<span class="number">56</span>]: arr ** <span class="number">0.5</span></span><br><span class="line">Out[<span class="number">56</span>]: </span><br><span class="line">array([[ <span class="number">1.</span>    ,  <span class="number">1.4142</span>,  <span class="number">1.7321</span>],</span><br><span class="line">       [ <span class="number">2.</span>    ,  <span class="number">2.2361</span>,  <span class="number">2.4495</span>]])</span><br><span class="line">       </span><br><span class="line"><span class="comment">#大小相同的数组之间的比较会生成布尔值数组：</span></span><br><span class="line">In [<span class="number">57</span>]: arr2 = np.array([[<span class="number">0.</span>, <span class="number">4.</span>, <span class="number">1.</span>], [<span class="number">7.</span>, <span class="number">2.</span>, <span class="number">12.</span>]])</span><br><span class="line">In [<span class="number">58</span>]: arr2</span><br><span class="line">Out[<span class="number">58</span>]: </span><br><span class="line">array([[  <span class="number">0.</span>,   <span class="number">4.</span>,   <span class="number">1.</span>],</span><br><span class="line">       [  <span class="number">7.</span>,   <span class="number">2.</span>,  <span class="number">12.</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: arr2 &gt; arr</span><br><span class="line">Out[<span class="number">59</span>]:</span><br><span class="line">array([[<span class="keyword">False</span>,  <span class="keyword">True</span>, <span class="keyword">False</span>],</span><br><span class="line">       [ <span class="keyword">True</span>, <span class="keyword">False</span>,  <span class="keyword">True</span>]], dtype=bool)</span><br><span class="line">       </span><br><span class="line"><span class="comment">#不同大小的数组之间的运算叫做广播（broadcasting），在这里暂时不深入探讨</span></span><br></pre></td></tr></table></figure><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>&emsp;&emsp;和python的list操作相似，numpy对ndarray提供了索引和切片的支持，并且拥有更强的可操作性。其提供的不仅仅是对一维数组对索引操作，对于二维、三维甚至是多维都适用。总的来说，可以分为批量的索引（切片）和离散的索引两个部分来说明：<br>&emsp;&emsp;<strong>切片的基本操作可以从以下代码看出：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##切片示例##</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##对一维数组的操作</span></span><br><span class="line"><span class="comment">#创建一个一维数组</span></span><br><span class="line">In [<span class="number">60</span>]: arr = np.arange(<span class="number">10</span>)</span><br><span class="line">In [<span class="number">61</span>]: arr</span><br><span class="line">Out[<span class="number">61</span>]: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#对数组进行切片</span></span><br><span class="line">In [<span class="number">62</span>]: arr[<span class="number">5</span>]</span><br><span class="line">Out[<span class="number">62</span>]: <span class="number">5</span></span><br><span class="line">In [<span class="number">63</span>]: arr[<span class="number">5</span>:<span class="number">8</span>]</span><br><span class="line">Out[<span class="number">63</span>]: array([<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以将切片赋值给另一个变量（类型也是一个数组），并进行操作</span></span><br><span class="line">In [<span class="number">64</span>]: arr_slice = arr[<span class="number">5</span>:<span class="number">8</span>]</span><br><span class="line">In [<span class="number">65</span>]: arr_slice = <span class="number">12</span></span><br><span class="line">In [<span class="number">66</span>]: arr_slice </span><br><span class="line">Out[<span class="number">66</span>]: array([<span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>])</span><br><span class="line">In [<span class="number">67</span>]: arr</span><br><span class="line">Out[<span class="number">67</span>]: array([ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>,  <span class="number">8</span>,  <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">##对二维数组的操作</span></span><br><span class="line"><span class="comment">#创建一个二维数组</span></span><br><span class="line">In [<span class="number">72</span>]: arr2d = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#对数组进行索引</span></span><br><span class="line">In [<span class="number">73</span>]: arr2d[<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">73</span>]: array([<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#对于子元素的索引，下面两种方式是等价的</span></span><br><span class="line">In [<span class="number">74</span>]: arr2d[<span class="number">0</span>][<span class="number">2</span>]</span><br><span class="line">Out[<span class="number">74</span>]: <span class="number">3</span></span><br><span class="line">In [<span class="number">75</span>]: arr2d[<span class="number">0</span>, <span class="number">2</span>]</span><br><span class="line">Out[<span class="number">75</span>]: <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对数组进行切片</span></span><br><span class="line">In [<span class="number">76</span>]: arr2d[:<span class="number">2</span>]  <span class="comment">#对其中一维进行切片</span></span><br><span class="line">Out[<span class="number">76</span>]: </span><br><span class="line">array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">In [<span class="number">77</span>]: arr2d[:<span class="number">2</span>, <span class="number">1</span>:]  <span class="comment">#对两个维度进行切片</span></span><br><span class="line">Out[<span class="number">77</span>]: </span><br><span class="line">array([[<span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [<span class="number">5</span>, <span class="number">6</span>]])   </span><br><span class="line"></span><br><span class="line"><span class="comment">#对切片进行赋值也会扩散到整个选区</span></span><br><span class="line">In [<span class="number">78</span>]: arr2d[:<span class="number">2</span>, <span class="number">1</span>:] = <span class="number">0</span></span><br><span class="line">In [<span class="number">79</span>]: arr2d</span><br><span class="line">Out[<span class="number">79</span>]: </span><br><span class="line">array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">       [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#######################################</span></span><br><span class="line"><span class="comment">##对于更高维数组的操作，和以上的操作类似##</span></span><br><span class="line"><span class="comment">#######################################</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;对二维数组的切片选区，如下图所示：<br><img src="/images/python-learning/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%88%87%E7%89%87.png" alt="二维数组切片"></p><p><strong>注：</strong>在上面所有这些选取数组子集的例子中，返回的数组都是视图。</p><p>&emsp;&emsp;<strong>对数组进行离散的索引可以从以下代码看出：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##离散的索引示例##</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##使用布尔数组索引</span></span><br><span class="line"><span class="comment">#产生一个布尔数组</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">98</span>]: names = np.array([<span class="string">'Bob'</span>, <span class="string">'Joe'</span>, <span class="string">'Will'</span>, <span class="string">'Bob'</span>, <span class="string">'Will'</span>, <span class="string">'Joe'</span>, <span class="string">'Joe'</span>])</span><br><span class="line">In [<span class="number">99</span>]: names </span><br><span class="line">Out[<span class="number">99</span>]: </span><br><span class="line">array([<span class="string">'Bob'</span>, <span class="string">'Joe'</span>, <span class="string">'Will'</span>, <span class="string">'Bob'</span>, <span class="string">'Will'</span>, <span class="string">'Joe'</span>, <span class="string">'Joe'</span>], </span><br><span class="line">     dtype=<span class="string">'&lt;U4'</span>) </span><br><span class="line">In [<span class="number">100</span>]: names == <span class="string">'Bob'</span></span><br><span class="line">Out[<span class="number">100</span>]: </span><br><span class="line">array([ <span class="keyword">True</span>, <span class="keyword">False</span>, <span class="keyword">False</span>,  <span class="keyword">True</span>, <span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">False</span>], </span><br><span class="line">     dtype=bool)</span><br><span class="line">     </span><br><span class="line"><span class="comment">#使用布尔数组索引</span></span><br><span class="line">In [<span class="number">101</span>]: data = np.random.randn(<span class="number">7</span>, <span class="number">4</span>)</span><br><span class="line">In [<span class="number">102</span>]: data </span><br><span class="line">Out[<span class="number">101</span>]: </span><br><span class="line">array([[ <span class="number">0.0929</span>, <span class="number">0.2817</span>, <span class="number">0.769</span> , <span class="number">1.2464</span>],</span><br><span class="line">      [ <span class="number">1.0072</span>, <span class="number">-1.2962</span>, <span class="number">0.275</span> , <span class="number">0.2289</span>],</span><br><span class="line">      [ <span class="number">1.3529</span>, <span class="number">0.8864</span>, <span class="number">-2.0016</span>, <span class="number">-0.3718</span>],</span><br><span class="line">      [ <span class="number">1.669</span> , <span class="number">-0.4386</span>, <span class="number">-0.5397</span>, <span class="number">0.477</span> ],</span><br><span class="line">      [ <span class="number">3.2489</span>, <span class="number">-1.0212</span>, <span class="number">-0.5771</span>, <span class="number">0.1241</span>],</span><br><span class="line">      [ <span class="number">0.3026</span>, <span class="number">0.5238</span>, <span class="number">0.0009</span>, <span class="number">1.3438</span>],</span><br><span class="line">      [<span class="number">-0.7135</span>, <span class="number">-0.8312</span>, <span class="number">-2.3702</span>, <span class="number">-1.8608</span>]])</span><br><span class="line">In [<span class="number">102</span>]: data[names == <span class="string">'Bob'</span>]  <span class="comment">#注：布尔型数组的长度必须跟被索引的轴长度一致。</span></span><br><span class="line">Out[<span class="number">102</span>]: </span><br><span class="line">array([[ <span class="number">0.0929</span>,  <span class="number">0.2817</span>,  <span class="number">0.769</span> ,  <span class="number">1.2464</span>],</span><br><span class="line">       [ <span class="number">1.669</span> , <span class="number">-0.4386</span>, <span class="number">-0.5397</span>,  <span class="number">0.477</span> ]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#布尔数组的一些常用操作</span></span><br><span class="line">In [<span class="number">103</span>]: data[names == <span class="string">'Bob'</span>]  <span class="comment">#使用‘==’,‘&lt;’,'&gt;'等</span></span><br><span class="line">Out[<span class="number">103</span>]: </span><br><span class="line">array([[ <span class="number">0.0929</span>,  <span class="number">0.2817</span>,  <span class="number">0.769</span> ,  <span class="number">1.2464</span>],</span><br><span class="line">       [ <span class="number">1.669</span> , <span class="number">-0.4386</span>, <span class="number">-0.5397</span>,  <span class="number">0.477</span> ]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">106</span>]: names != <span class="string">'Bob'</span> <span class="comment">#使用'!=' 、'~'</span></span><br><span class="line">Out[<span class="number">106</span>]: </span><br><span class="line">array([<span class="keyword">False</span>, <span class="keyword">True</span>, <span class="keyword">True</span>, <span class="keyword">False</span>, <span class="keyword">True</span>, <span class="keyword">True</span>, <span class="keyword">True</span>], </span><br><span class="line">     dtype=bool) </span><br><span class="line">In [<span class="number">107</span>]: data[~(names == <span class="string">'Bob'</span>)] </span><br><span class="line">Out[<span class="number">107</span>]: </span><br><span class="line">array([[ <span class="number">1.0072</span>, <span class="number">-1.2962</span>, <span class="number">0.275</span> , <span class="number">0.2289</span>],</span><br><span class="line">       [ <span class="number">1.3529</span>, <span class="number">0.8864</span>, <span class="number">-2.0016</span>, <span class="number">-0.3718</span>],</span><br><span class="line">       [ <span class="number">3.2489</span>, <span class="number">-1.0212</span>, <span class="number">-0.5771</span>, <span class="number">0.1241</span>],</span><br><span class="line">       [ <span class="number">0.3026</span>, <span class="number">0.5238</span>, <span class="number">0.0009</span>, <span class="number">1.3438</span>],</span><br><span class="line">       [<span class="number">-0.7135</span>, <span class="number">-0.8312</span>, <span class="number">-2.3702</span>, <span class="number">-1.8608</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">110</span>]: mask = (names == <span class="string">'Bob'</span>) | (names == <span class="string">'Will'</span>)  <span class="comment">#使用逻辑运算符‘|、&amp;’等</span></span><br><span class="line">In [<span class="number">111</span>]: mask </span><br><span class="line">Out[<span class="number">111</span>]: </span><br><span class="line">array([ <span class="keyword">True</span>, <span class="keyword">False</span>, <span class="keyword">True</span>, <span class="keyword">True</span>, <span class="keyword">True</span>, <span class="keyword">False</span>, <span class="keyword">False</span>], </span><br><span class="line">     dtype=bool)</span><br><span class="line"> In [<span class="number">112</span>]: data[mask] </span><br><span class="line"> Out[<span class="number">112</span>]: </span><br><span class="line"> array([[ <span class="number">0.0929</span>, <span class="number">0.2817</span>, <span class="number">0.769</span> , <span class="number">1.2464</span>],</span><br><span class="line">        [ <span class="number">1.3529</span>, <span class="number">0.8864</span>, <span class="number">-2.0016</span>, <span class="number">-0.3718</span>],</span><br><span class="line">        [ <span class="number">1.669</span> , <span class="number">-0.4386</span>, <span class="number">-0.5397</span>, <span class="number">0.477</span> ],</span><br><span class="line">        [ <span class="number">3.2489</span>, <span class="number">-1.0212</span>, <span class="number">-0.5771</span>, <span class="number">0.1241</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment">##花式索引##</span></span><br><span class="line"><span class="comment">#花式索引（Fancy indexing）是一个NumPy术语，它指的是利用整数数组进行索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一个数组</span></span><br><span class="line">In [<span class="number">117</span>]: arr = np.empty((<span class="number">8</span>, <span class="number">4</span>)) </span><br><span class="line">In [<span class="number">118</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">   .....:     arr[i] = i </span><br><span class="line">In [<span class="number">119</span>]: arr </span><br><span class="line">Out[<span class="number">119</span>]: </span><br><span class="line">array([[ <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [ <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>],</span><br><span class="line">       [ <span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>, <span class="number">2.</span>],</span><br><span class="line">       [ <span class="number">3.</span>, <span class="number">3.</span>, <span class="number">3.</span>, <span class="number">3.</span>],</span><br><span class="line">       [ <span class="number">4.</span>, <span class="number">4.</span>, <span class="number">4.</span>, <span class="number">4.</span>],</span><br><span class="line">       [ <span class="number">5.</span>, <span class="number">5.</span>, <span class="number">5.</span>, <span class="number">5.</span>],</span><br><span class="line">       [ <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>],</span><br><span class="line">       [ <span class="number">7.</span>, <span class="number">7.</span>, <span class="number">7.</span>, <span class="number">7.</span>]])</span><br><span class="line">       </span><br><span class="line"><span class="comment">#以特定顺序选取行子集</span></span><br><span class="line">In [<span class="number">120</span>]: arr[[<span class="number">4</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">6</span>]] </span><br><span class="line">Out[<span class="number">120</span>]: </span><br><span class="line">array([[ <span class="number">4.</span>, <span class="number">4.</span>, <span class="number">4.</span>, <span class="number">4.</span>],</span><br><span class="line">       [ <span class="number">3.</span>, <span class="number">3.</span>, <span class="number">3.</span>, <span class="number">3.</span>],</span><br><span class="line">       [ <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [ <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>]])</span><br><span class="line">In [<span class="number">121</span>]: arr[[<span class="number">-3</span>, <span class="number">-5</span>, <span class="number">-7</span>]]  <span class="comment">#使用负数索引将会从末尾开始选取行</span></span><br><span class="line">Out[<span class="number">121</span>]: </span><br><span class="line">array([[ <span class="number">5.</span>,  <span class="number">5.</span>,  <span class="number">5.</span>,  <span class="number">5.</span>],</span><br><span class="line">       [ <span class="number">3.</span>,  <span class="number">3.</span>,  <span class="number">3.</span>,  <span class="number">3.</span>],</span><br><span class="line">       [ <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>,  <span class="number">1.</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#一次传入多个索引数组时，取对应列的单个元素</span></span><br><span class="line">In [<span class="number">123</span>]: arr </span><br><span class="line">Out[<span class="number">123</span>]: </span><br><span class="line">array([[ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">       [ <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>],</span><br><span class="line">       [ <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">       [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>],</span><br><span class="line">       [<span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>],</span><br><span class="line">       [<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>],</span><br><span class="line">       [<span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>],</span><br><span class="line">       [<span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>]]) </span><br><span class="line">In [<span class="number">124</span>]: arr[[<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>]] </span><br><span class="line">Out[<span class="number">124</span>]: </span><br><span class="line">array([ <span class="number">4</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">10</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#####################################################</span></span><br><span class="line"><span class="comment">##注：花式索引跟切片不一样，它总是将数据复制到新数组中。##</span></span><br><span class="line"><span class="comment">#####################################################</span></span><br></pre></td></tr></table></figure><h3 id="利用数组进行数据处理"><a href="#利用数组进行数据处理" class="headerlink" title="利用数组进行数据处理"></a>利用数组进行数据处理</h3><h4 id="数组转置和轴对换"><a href="#数组转置和轴对换" class="headerlink" title="数组转置和轴对换"></a>数组转置和轴对换</h4><p>&emsp;&emsp;对数组元素位置的操作，最基本的就是重塑函数reshape。<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用reshape函数重塑数组</span></span><br><span class="line">In [<span class="number">126</span>]: arr = np.arange(<span class="number">15</span>).reshape((<span class="number">3</span>, <span class="number">5</span>)) </span><br><span class="line">In [<span class="number">127</span>]: arr</span><br><span class="line">Out[<span class="number">127</span>]: </span><br><span class="line">array([[ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">       [ <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">       [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>]])</span><br></pre></td></tr></table></figure><p></p><p>&emsp;&emsp;然后就是数组转置和轴对换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##数组转置的使用</span></span><br><span class="line">In [<span class="number">126</span>]: arr = np.arange(<span class="number">15</span>).reshape((<span class="number">3</span>, <span class="number">5</span>)) </span><br><span class="line">In [<span class="number">127</span>]: arr </span><br><span class="line">Out[<span class="number">127</span>]: </span><br><span class="line">array([[ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">       [ <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">       [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>]]) </span><br><span class="line">In [<span class="number">128</span>]: arr.T </span><br><span class="line">Out[<span class="number">128</span>]: </span><br><span class="line">array([[ <span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>],</span><br><span class="line">       [ <span class="number">1</span>, <span class="number">6</span>, <span class="number">11</span>],</span><br><span class="line">       [ <span class="number">2</span>, <span class="number">7</span>, <span class="number">12</span>],</span><br><span class="line">       [ <span class="number">3</span>, <span class="number">8</span>, <span class="number">13</span>],</span><br><span class="line">       [ <span class="number">4</span>, <span class="number">9</span>, <span class="number">14</span>]])</span><br><span class="line">       </span><br><span class="line"><span class="comment">##轴对换的使用</span></span><br><span class="line"><span class="comment">#transpose函数</span></span><br><span class="line"><span class="comment">#这里，第一个轴被换成了第二个，第二个轴被换成了第一个，最后一个轴不变。</span></span><br><span class="line">In [<span class="number">132</span>]: arr = np.arange(<span class="number">16</span>).reshape((<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>)) </span><br><span class="line">In [<span class="number">133</span>]: arr </span><br><span class="line">Out[<span class="number">133</span>]: </span><br><span class="line">array([[[ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]],</span><br><span class="line">       [[ <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">        [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]]]) </span><br><span class="line">In [<span class="number">134</span>]: arr.transpose((<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>)) </span><br><span class="line">Out[<span class="number">134</span>]: </span><br><span class="line">array([[[ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]],</span><br><span class="line">       [[ <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>],</span><br><span class="line">        [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#swapaxes函数(交换两个轴)</span></span><br><span class="line">In [<span class="number">135</span>]: arr </span><br><span class="line">Out[<span class="number">135</span>]: </span><br><span class="line">array([[[ <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]],</span><br><span class="line">       [[ <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">        [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]]]) </span><br><span class="line">In [<span class="number">136</span>]: arr.swapaxes(<span class="number">1</span>, <span class="number">2</span>) </span><br><span class="line">Out[<span class="number">136</span>]: </span><br><span class="line">array([[[ <span class="number">0</span>, <span class="number">4</span>],</span><br><span class="line">        [ <span class="number">1</span>, <span class="number">5</span>],</span><br><span class="line">        [ <span class="number">2</span>, <span class="number">6</span>],</span><br><span class="line">        [ <span class="number">3</span>, <span class="number">7</span>]],</span><br><span class="line">       [[ <span class="number">8</span>, <span class="number">12</span>],</span><br><span class="line">        [ <span class="number">9</span>, <span class="number">13</span>],</span><br><span class="line">        [<span class="number">10</span>, <span class="number">14</span>],</span><br><span class="line">        [<span class="number">11</span>, <span class="number">15</span>]]])</span><br></pre></td></tr></table></figure><p><strong>注：</strong>在这里，返回的都是源数据的视图（不会进行任何复制操作）</p><h4 id="快速的元素级数组函数：通用函数"><a href="#快速的元素级数组函数：通用函数" class="headerlink" title="快速的元素级数组函数：通用函数"></a>快速的元素级数组函数：通用函数</h4><p>&emsp;&emsp;通用函数（即ufunc）是一种对ndarray中的数据执行元素级运算的函数。你可以将其看做简单函数（接受一个或多个标量值，并产生一个或多个标量值）的矢量化包装器。许多ufunc都是简单的元素级变体，如sqrt和exp：</p><p>&emsp;&emsp;其使用方法如下：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">137</span>]: arr = np.arange(<span class="number">10</span>)</span><br><span class="line">In [<span class="number">138</span>]: arr</span><br><span class="line">Out[<span class="number">138</span>]: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">139</span>]: np.sqrt(arr)</span><br><span class="line">Out[<span class="number">139</span>]: </span><br><span class="line">array([ <span class="number">0.</span>    ,  <span class="number">1.</span>    ,  <span class="number">1.4142</span>,  <span class="number">1.7321</span>,  <span class="number">2.</span>    ,  <span class="number">2.2361</span>,  <span class="number">2.4495</span>,</span><br><span class="line">        <span class="number">2.6458</span>,  <span class="number">2.8284</span>,  <span class="number">3.</span>    ])</span><br><span class="line"></span><br><span class="line">In [<span class="number">140</span>]: np.exp(arr)</span><br><span class="line">Out[<span class="number">140</span>]: </span><br><span class="line">array([    <span class="number">1.</span>    ,     <span class="number">2.7183</span>,     <span class="number">7.3891</span>,    <span class="number">20.0855</span>,    <span class="number">54.5982</span>,</span><br><span class="line">         <span class="number">148.4132</span>,   <span class="number">403.4288</span>,  <span class="number">1096.6332</span>,  <span class="number">2980.958</span> ,  <span class="number">8103.0839</span>])</span><br></pre></td></tr></table></figure><p></p><p>下面是一些常见的ufunc，都可以通过类似以上的方法操作数组元素</p><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">abs、fabs</td><td style="text-align:left">计算整数、浮点数或复数的绝对值。对于非复数值，可以使用更快的fabs</td></tr><tr><td style="text-align:center">sqrt</td><td style="text-align:left">计算各元素的平方根。相当于arr**5</td></tr><tr><td style="text-align:center">square</td><td style="text-align:left">计算各元素的平方。相当于arr**2</td></tr><tr><td style="text-align:center">exp</td><td style="text-align:left">计算各元素的指数<script type="math/tex">e^{x}</script></td></tr><tr><td style="text-align:center">log,log10,log2,log1p</td><td style="text-align:left">分别为底数为e、10、2、（1+x）的log</td></tr><tr><td style="text-align:center">sign</td><td style="text-align:left">计算各元素的正负号：1（正数）、0（零）、-1（负数）</td></tr><tr><td style="text-align:center">ceil</td><td style="text-align:left">计算各元素的ceiling值，即大于等于该值的最小整数</td></tr><tr><td style="text-align:center">floor</td><td style="text-align:left">计算各元素的floor值，即小于等于该值的最大整数</td></tr><tr><td style="text-align:center">rint</td><td style="text-align:left">将各元素值四舍五入到最接近的整数，保留dtype</td></tr><tr><td style="text-align:center">modf</td><td style="text-align:left">将数组的小数和正数部分以两个独立数组的形式返回</td></tr><tr><td style="text-align:center">isnan</td><td style="text-align:left">返回一个表示“哪些值是NaN（这不是一个数字）”的布尔型数组</td></tr><tr><td style="text-align:center">isfinite,isinf</td><td style="text-align:left">分别返回一个表示“是否有穷（非inf,非NaN）”或“是否是无穷”的布尔型数组</td></tr><tr><td style="text-align:center">cos,cosh,sin,sinh,tan,tanh</td><td style="text-align:left">普通型和双曲型三角函数</td></tr><tr><td style="text-align:center">arccos,arccosh,arcsin,arcsinh,<br>arctan,arctanh</td><td style="text-align:left">反三角函数</td></tr><tr><td style="text-align:center">logical_not</td><td style="text-align:left">计算各元素 not x 的真值。相当于 -arr</td></tr><tr><td style="text-align:center">add</td><td style="text-align:left">将数组中对应的元素相加</td></tr><tr><td style="text-align:center">subtract</td><td style="text-align:left">从第一个数组中减去第二个数组中的元素</td></tr><tr><td style="text-align:center">multiply</td><td style="text-align:left">数组元素相乘</td></tr><tr><td style="text-align:center">divide,floor_divide</td><td style="text-align:left">除法或向下圆整除法（丢弃余数）</td></tr><tr><td style="text-align:center">power</td><td style="text-align:left">对第一个数组中的元素A,第二个数组中对应的元素B，计算<script type="math/tex">A^{B}</script></td></tr><tr><td style="text-align:center">maximun,fmax</td><td style="text-align:left">元素级的最大值计算。fmax将忽略NaN</td></tr><tr><td style="text-align:center">minimum,fmin</td><td style="text-align:left">元素级的最小值计算。fmin将忽略NaN</td></tr><tr><td style="text-align:center">mod</td><td style="text-align:left">元素级的求模计算（除法的余数）</td></tr><tr><td style="text-align:center">copysign</td><td style="text-align:left">将第二个数组中的值的符号复制给第一个数组中的值</td></tr><tr><td style="text-align:center">greater,greater_equal,less,less_equal,<br>equal,not_equal</td><td style="text-align:left">执行元素级的比较运算，最终产生布尔型数组。相当于&gt;,&gt;=,&lt;,&lt;=,==,!=</td></tr><tr><td style="text-align:center">logical_and,logical_or,logical_xor</td><td style="text-align:left">执行元素级的真值逻辑运算，相当于&amp;,&#124;,^</td></tr></tbody></table></div><p>&emsp;&emsp;NumPy数组使你可以将许多种数据处理任务表述为简洁的数组表达式（否则需要编写循环）。用数组表达式代替循环的做法，通常被称为矢量化。一般来说，矢量化数组运算要比等价的纯Python方式快上一两个数量级（甚至更多），尤其是各种数值计算。下面将其分为简单的几类：</p><ul><li>数值类api</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">函数名</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">sum</td><td style="text-align:left">对数组中的全部或某轴向的元素求和，零长度的数组的sum为0</td></tr><tr><td style="text-align:left">mean</td><td style="text-align:left">算术平均数。零长度的数组的mean为Nan</td></tr><tr><td style="text-align:left">std,var</td><td style="text-align:left">分别为标准差和方差，自由度默认为n</td></tr><tr><td style="text-align:left">min,max</td><td style="text-align:left">最大值和最小值</td></tr><tr><td style="text-align:left">argmin,argmax</td><td style="text-align:left">分别为最大元素和最小元素的索引</td></tr><tr><td style="text-align:left">cumsum</td><td style="text-align:left">所有元素的累计和</td></tr><tr><td style="text-align:left">cumprod</td><td style="text-align:left">所有元素的累计积</td></tr></tbody></table></div><ul><li>元素操作类api</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">函数名</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">where</td><td style="text-align:left">传入三个参数A,B,C，返回一个数组。若A真返回B中的元素，否则返回C中的元素</td></tr><tr><td style="text-align:left">any</td><td style="text-align:left">若数组中全为false或全为0或数组为空，返回False，否则返回true</td></tr><tr><td style="text-align:left">all</td><td style="text-align:left">数组中全为true才返回True</td></tr><tr><td style="text-align:left">sort</td><td style="text-align:left">对数组的任意一个轴进行排序，默认为升序</td></tr></tbody></table></div><ul><li>集合操作类api</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">函数名</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">unique(x)</td><td style="text-align:left">计算x中的唯一元素，并返回有序结果</td></tr><tr><td style="text-align:left">intersect1d(x,y)</td><td style="text-align:left">计算x和y中的公共元素，并返回有序结果</td></tr><tr><td style="text-align:left">union1d(x,y)</td><td style="text-align:left">计算并集，并返回有序结果</td></tr><tr><td style="text-align:left">in1d(x,y)</td><td style="text-align:left">得到一个表示“x的元素是否包含于y”的布尔型数组</td></tr><tr><td style="text-align:left">setdiff1d(x,y)</td><td style="text-align:left">集合的差，即元素在x中且不在y中</td></tr><tr><td style="text-align:left">setxor1d(x,y)</td><td style="text-align:left">集合的对称差，即不同时存在于两个数组中的元素的集合</td></tr></tbody></table></div><h4 id="数组文件的输入输出"><a href="#数组文件的输入输出" class="headerlink" title="数组文件的输入输出"></a>数组文件的输入输出</h4><p>&emsp;&emsp;NumPy能够读写磁盘上的文本数据或二进制数据。这一小节只讨论NumPy的内置二进制格式，因为更多的用户会使用pandas或其它工具加载文本或表格数据.其使用如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">213</span>]: arr = np.arange(<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 单个数组的保存与读取</span></span><br><span class="line">In [<span class="number">214</span>]: np.save(<span class="string">'some_array'</span>, arr)</span><br><span class="line">In [<span class="number">215</span>]: np.load(<span class="string">'some_array.npy'</span>)</span><br><span class="line">Out[<span class="number">215</span>]: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#多个数组的保存与读取</span></span><br><span class="line">In [<span class="number">216</span>]: np.savez(<span class="string">'array_archive.npz'</span>, a=arr, b=arr)</span><br><span class="line">In [<span class="number">217</span>]: arch = np.load(<span class="string">'array_archive.npz'</span>)</span><br><span class="line">In [<span class="number">218</span>]: arch[<span class="string">'b'</span>]</span><br><span class="line">Out[<span class="number">218</span>]: array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存并压缩多个数组</span></span><br><span class="line">In [<span class="number">219</span>]: np.savez_compressed(<span class="string">'arrays_compressed.npz'</span>, a=arr, b=arr)</span><br></pre></td></tr></table></figure><h3 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h3><p>&emsp;&emsp;线性代数（如矩阵乘法、矩阵分解、行列式以及其他方阵数学等）是任何数组库的重要组成部分。不像某些语言（如MATLAB），通过对两个二维数组相乘得到的是一个元素级的积，而不是一个矩阵点积。因此，NumPy提供了一个用于矩阵乘法的dot函数（既是一个数组方法也是numpy命名空间中的一个函数）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">223</span>]: x = np.array([[<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>], [<span class="number">4.</span>, <span class="number">5.</span>, <span class="number">6.</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">224</span>]: y = np.array([[<span class="number">6.</span>, <span class="number">23.</span>], [<span class="number">-1</span>, <span class="number">7</span>], [<span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">225</span>]: x</span><br><span class="line">Out[<span class="number">225</span>]: </span><br><span class="line">array([[ <span class="number">1.</span>,  <span class="number">2.</span>,  <span class="number">3.</span>],</span><br><span class="line">       [ <span class="number">4.</span>,  <span class="number">5.</span>,  <span class="number">6.</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">226</span>]: y</span><br><span class="line">Out[<span class="number">226</span>]: </span><br><span class="line">array([[  <span class="number">6.</span>,  <span class="number">23.</span>],</span><br><span class="line">       [ <span class="number">-1.</span>,   <span class="number">7.</span>],</span><br><span class="line">       [  <span class="number">8.</span>,   <span class="number">9.</span>]])</span><br><span class="line"></span><br><span class="line">In [<span class="number">227</span>]: x.dot(y)</span><br><span class="line">Out[<span class="number">227</span>]: </span><br><span class="line">array([[  <span class="number">28.</span>,   <span class="number">64.</span>],</span><br><span class="line">       [  <span class="number">67.</span>,  <span class="number">181.</span>]])</span><br><span class="line">       </span><br><span class="line"><span class="comment"># PS：x.dot(y)等价于np.dot(x, y)</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;同时，numpy的linalg库提供了线性代数函数的支持</p><div class="table-container"><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">diag</td><td style="text-align:left">一以为数组的形式返回方阵的对角线（或非对角线）元素，或将一维数组转换为方阵（非对角线元素为0）</td></tr><tr><td style="text-align:left">dot</td><td style="text-align:left">矩阵乘法</td></tr><tr><td style="text-align:left">trace</td><td style="text-align:left">计算对角线元素的和</td></tr><tr><td style="text-align:left">det</td><td style="text-align:left">计算矩阵行列式</td></tr><tr><td style="text-align:left">eig</td><td style="text-align:left">计算方阵的本征值和本征向量</td></tr><tr><td style="text-align:left">inv</td><td style="text-align:left">计算方阵的逆</td></tr><tr><td style="text-align:left">pinv</td><td style="text-align:left">计算矩阵的Moore-Penrose伪逆</td></tr><tr><td style="text-align:left">qr</td><td style="text-align:left">计算QR分解</td></tr><tr><td style="text-align:left">svd</td><td style="text-align:left">计算奇异值分解（SVD）</td></tr><tr><td style="text-align:left">solve</td><td style="text-align:left">解线性方程组Ax = b,其中A为一个方阵</td></tr><tr><td style="text-align:left">lstsq</td><td style="text-align:left">计算Ax=b的最小二乘解</td></tr></tbody></table></div><h3 id="伪随机数生成"><a href="#伪随机数生成" class="headerlink" title="伪随机数生成"></a>伪随机数生成</h3><p>&emsp;&emsp;numpy.random模块对Python内置的random进行了补充，增加了一些用于高效生成多种概率分布的样本值的函数。</p><div class="table-container"><table><thead><tr><th style="text-align:left">函数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">seed</td><td style="text-align:left">确定随机数生成器的种子</td></tr><tr><td style="text-align:left">permutation</td><td style="text-align:left">返回一个序列的随机排列或返回一个随机排列的范围</td></tr><tr><td style="text-align:left">shuffle</td><td style="text-align:left">对一个序列就地随机排列</td></tr><tr><td style="text-align:left">rand</td><td style="text-align:left">产生均匀分布的样本值</td></tr><tr><td style="text-align:left">randint</td><td style="text-align:left">从给定的上下范围内随机选取整数</td></tr><tr><td style="text-align:left">randn</td><td style="text-align:left">产生标准正态分布（平均值为0，标准差为1）的样本值</td></tr><tr><td style="text-align:left">binomial</td><td style="text-align:left">产生二项分布的样本值</td></tr><tr><td style="text-align:left">normal</td><td style="text-align:left">产生正态（高斯）分布的样本值</td></tr><tr><td style="text-align:left">beta</td><td style="text-align:left">产生Beta分布的样本值</td></tr><tr><td style="text-align:left">chisquare</td><td style="text-align:left">产生卡方分布的样本值</td></tr><tr><td style="text-align:left">gamma</td><td style="text-align:left">产生Gamma分布的样本值</td></tr><tr><td style="text-align:left">uniform</td><td style="text-align:left">产生在[0,1)中均匀分布的样本值</td></tr></tbody></table></div><h1 id="pandas-入门"><a href="#pandas-入门" class="headerlink" title="pandas 入门"></a>pandas 入门</h1><p>pass</p><h1 id="数据加载、存储与文件格式"><a href="#数据加载、存储与文件格式" class="headerlink" title="数据加载、存储与文件格式"></a>数据加载、存储与文件格式</h1><p>&emsp;&emsp;数据分析的第一步是访问数据，这一章主要介绍pandas的数据输入与输出。输入输出通常可以划分为几个大类：读取文本文件和其他更高效的磁盘存储格式，加载数据库中的数据，利用WEB API操作网络资源。</p><h2 id="文本格式数据的读写"><a href="#文本格式数据的读写" class="headerlink" title="文本格式数据的读写"></a>文本格式数据的读写</h2><p>&emsp;&emsp;pandas提供了一些将表格型数据读取为DataFrame对象的函数，下面是一些常用的函数：</p><div class="table-container"><table><thead><tr><th style="text-align:center">函数</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">read_csv</td><td style="text-align:left">从文件、URL、文件型对象中加载带分隔符的数据。默认分隔符为逗号</td></tr><tr><td style="text-align:center">read_table</td><td style="text-align:left">从文件、URL、文件型对象中加载带分隔符的数据。默认分隔符为制表符（‘\t’）</td></tr><tr><td style="text-align:center">read_fwf</td><td style="text-align:left">读取定宽列格式数据（也就是说，没有分隔符）</td></tr><tr><td style="text-align:center">read_clipboard</td><td style="text-align:left">读取剪贴板中的数据，可以看做read_table的剪贴板版，在将网页转换为表格时很有用</td></tr><tr><td style="text-align:center">read_excel</td><td style="text-align:left">从Excel XLS 或XLSX file 读取表格数据</td></tr><tr><td style="text-align:center">read_hdf</td><td style="text-align:left">读取pandas写的HDF5文件</td></tr><tr><td style="text-align:center">read_html</td><td style="text-align:left">读取HTML文档中的所有表格</td></tr><tr><td style="text-align:center">read_json</td><td style="text-align:left">读取JSON字符串中的数据</td></tr><tr><td style="text-align:center">read_msgpack</td><td style="text-align:left">二进制格式编码的pandas数据</td></tr><tr><td style="text-align:center">read_pickle</td><td style="text-align:left">读取Python pickle格式中存储的任意对象</td></tr><tr><td style="text-align:center">read_sas</td><td style="text-align:left">读取存储于SAS系统自定义存储格式的SAS数据集</td></tr><tr><td style="text-align:center">read_sql</td><td style="text-align:left">(使用SQLAlchemy)读取SQL查询结果为pandas的DataFrame</td></tr><tr><td style="text-align:center">read_stata</td><td style="text-align:left">读取Stata文件格式的数据集</td></tr><tr><td style="text-align:center">read_feather</td><td style="text-align:left">读取Feather二进制文件格式</td></tr></tbody></table></div><p>&amp;emsp&emsp;以上函数中可配置的参数有很多，大体可分为以下几类：</p><ul><li>索引：将一个或多个列当做返回的DataFrame处理，以及是否从文件、用户获取列名。</li><li>类型推断和数据转换：包括用户定义值的转换、和自定义的缺失值标记列表等。</li><li>日期解析：包括组合功能，比如将分散在多个列中的日期时间信息组合成结果中的单个列。</li><li>迭代：支持对大文件进行逐块迭代。</li><li><p>不规整数据问题：跳过一些行、页脚、注释或其他一些不重要的东西（比如由成千上万个逗号隔开的数值数据）。</p><p>&amp;emsp&emsp;通过代码我们可以看到一些常用的用法。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大体上来讲，<code>read_csv</code>`read_table`函数的参数有：</p><div class="table-container"><table><thead><tr><th style="text-align:center">参数名</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:center">path</td><td style="text-align:left">表示文件系统位置、URL、文件型对象的字符串</td></tr></tbody></table></div><h2 id="逐块读取文本文件"><a href="#逐块读取文本文件" class="headerlink" title="逐块读取文本文件"></a>逐块读取文本文件</h2><h1 id="To-be-continue…"><a href="#To-be-continue…" class="headerlink" title="To be continue…."></a>To be continue….</h1><!-- rebuild by neat -->]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jquery学习笔记</title>
      <link href="/2018/09/10/jquery%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/09/10/jquery%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<!-- build time:Tue Nov 05 2019 10:56:58 GMT+0800 (GMT+08:00) --><h1 id="jquery简介"><a href="#jquery简介" class="headerlink" title="jquery简介"></a>jquery简介</h1><a id="more"></a><h2 id="javascript的缺点"><a href="#javascript的缺点" class="headerlink" title="javascript的缺点"></a>javascript的缺点</h2><ol><li>代码比较麻烦，需要遍历，可能还需要嵌套</li><li>找到对象麻烦，方法少，还长</li><li>会有兼容性问题</li><li>js注册事件，会被覆盖，addEventListener</li></ol><h2 id="jquery的第一个程序"><a href="#jquery的第一个程序" class="headerlink" title="jquery的第一个程序"></a>jquery的第一个程序</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.引入文件</span></span><br><span class="line">&lt;script src="jquery-1.12.4.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">//2.写入口函数</span></span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">  <span class="comment">//注册事件，把on去掉，是一个方法</span></span><br><span class="line">  $(<span class="string">"#btn1"</span>).click(function()&#123;</span><br><span class="line">    $(<span class="string">"div"</span>).show();</span><br><span class="line">  &#125;);</span><br><span class="line">  $(<span class="string">"btn2"</span>).click(function()&#123;</span><br><span class="line">    <span class="comment">//隐式迭代，jquery会自动遍历，不需要我们遍历</span></span><br><span class="line">    $(<span class="string">"div"</span>).text(<span class="string">"我是内容"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="什么是jquery？"><a href="#什么是jquery？" class="headerlink" title="什么是jquery？"></a>什么是jquery？</h2><p>&emsp;&emsp;jquery就是一个轻量级的js库，它有丰富的api可供调用，学习jquery其实就是学习jquery里的api。</p><h2 id="jquery的版本问题"><a href="#jquery的版本问题" class="headerlink" title="jquery的版本问题"></a>jquery的版本问题</h2><ul><li><p>1.x,2.x,3.x版本的区别<br>&emsp;&emsp;1.x版本和2.x版本是同步发布的，但1.x版本支持ie678,2.x不支持；且两个版本不再更新<br>&emsp;&emsp;3.x不兼容ie678，且3.x版本还在更新；</p></li><li><p>min版与非min版的区别<br>&emsp;&emsp;非min版主要用于学习与开发，有注释，且可阅读性较强；min版是压缩版，没有注释，容量较小，用于生产环境。</p></li></ul><h2 id="jquery的入口函数"><a href="#jquery的入口函数" class="headerlink" title="jquery的入口函数"></a>jquery的入口函数</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jquery入口函数的两种写法</span></span><br><span class="line"><span class="comment">//第一种写法</span></span><br><span class="line">$(document).ready(function()&#123;</span><br><span class="line">...</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//第二种写法</span></span><br><span class="line">$(function()&#123;</span><br><span class="line">...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>jquery的入口函数要比js的入口函数执行的早一些</li><li>jquery的入口函数会等待页面加载完成才执行，但是不会等待图片的加载</li><li>js的入口函数会等待页面加载完成，并且等待图片加载完成才开始执行</li></ul><h2 id="DOM对象-js对象-与jq对象"><a href="#DOM对象-js对象-与jq对象" class="headerlink" title="DOM对象(js对象)与jq对象"></a>DOM对象(js对象)与jq对象</h2><ol><li><p>什么是DOM对象（js对象）：使用js的方式获取到的元素就是js对象（dom对象）<br><code>var cloth = document.getElementById(&quot;cloth&quot;); cloth.style.backgroundColor = &quot;pink&quot;;</code></p></li><li><p>什么是jq对象：使用jq的方式获取到的元素就是jq对象<br><code>var $li=$(&quot;li&quot;); $li.text(&quot;I Change the context.&quot;);</code></p></li><li><p>jq对象与js对象的区别：js对象不能调用jq对象的方法</p></li><li><p>jq对象与js对象的联系<br>&emsp;&emsp;jq对象其实就是js对象的一个集合，伪数组，里面存放了一大堆js对象（宏观上）</p></li><li><p>DOM对象与jq对象的转换。<br>&emsp;&emsp;dom2jq:<code>var cloth = document.getElementById(&quot;cloth&quot;); $(cloth).text(&quot;hehe&quot;);</code><br>&emsp;&emsp;jq2dom:<code>$(&quot;li&quot;)[0].innerText = &quot;hehe&quot;;</code>或<code>$(&quot;li&quot;).get(0).innerText = &quot;haha&quot;;</code></p></li></ol><p><strong>注意：</strong>$其实就是一个函数，以后用时记得跟小括号，参数不同，功能就不同，有3种用法：（另: <code>$==jQuery</code>）</p><ol><li>参数是一个function，入口函数</li><li>参数是dom对象，把dom对象转换成jquery对象</li><li>参数是一个字符串，根据前缀找对应类别的对象</li></ol><h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><p>&emsp;jquery选择器是jquery提供的一组方法，用来获取页面中的元素。其返回的是jqueryduixiang，且兼容了css1到css3的所有选择器（css怎么写，我们就可以怎么写），并且jquery还添加了很多更加复杂的选择器。</p><ul><li><p>基本选择器与层级选择器</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#id"</span>).css(<span class="string">"backgroundColor"</span>,<span class="string">"red"</span>);<span class="comment">//id选择器的样式设置</span></span><br><span class="line">$(<span class="string">"#id,.green"</span>).css(<span class="string">"backgroundColor"</span>,<span class="string">"red"</span>);<span class="comment">//并集，id为id或class为green的标签都会被设置</span></span><br><span class="line">$(<span class="string">"li.green"</span>).css(<span class="string">"backgroundColor"</span>,<span class="string">"red"</span>);<span class="comment">//交集，li标签下的green标签样式会被设置</span></span><br><span class="line">$(<span class="string">"li&gt;p"</span>).css(<span class="string">"backgroundColor"</span>,<span class="string">"red"</span>);<span class="comment">//子代选择器，li标签下的子代中的p标签样式会被设置</span></span><br><span class="line">$(<span class="string">"li p"</span>).css(<span class="string">"backgroundColor"</span>,<span class="string">"red"</span>);<span class="comment">//后代选择器，li标签下的所有p标签样式会被设置</span></span><br></pre></td></tr></table></figure></li><li><p>mouseenter与mouseover<br>&emsp;&emsp;mouseenter是jquery提供的鼠标事件，触发率比mouseover精准，建议使用；其中mouseleaving与mouseenter搭配，mouseover与mouseout搭配</p></li><li><p>过滤选择器：这类选择器都带冒号，（如 li:first 为第一个li标签）</p></li><li><p>筛选选择器<br>&emsp;&emsp;与过滤选择器类似，但是用法不同，筛选选择器主要是方法</p></li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">用法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">children(selector)</td><td style="text-align:left"><code>$(“ul”).children(“li”)</code></td><td style="text-align:left">相当于<code>$(“ul&gt;li”)</code>,子类选 择器</td></tr><tr><td style="text-align:left">find(selector)</td><td style="text-align:left">同上</td><td style="text-align:left">相当于后代选择器</td></tr><tr><td style="text-align:left">siblings(selector)</td><td style="text-align:left">同上</td><td style="text-align:left">查找兄弟节点，但不包括自己</td></tr><tr><td style="text-align:left">parent()</td><td style="text-align:left">同上</td><td style="text-align:left">查找父母节点</td></tr><tr><td style="text-align:left">eq(index)</td><td style="text-align:left">同上</td><td style="text-align:left">查找下标为index的节点</td></tr><tr><td style="text-align:left">next()</td><td style="text-align:left">同上</td><td style="text-align:left">查找下一个兄弟节点</td></tr><tr><td style="text-align:left">prev()</td><td style="text-align:left">同上</td><td style="text-align:left">查找上一个兄弟节点</td></tr><tr><td style="text-align:left">index()</td><td style="text-align:left">同上</td><td style="text-align:left">返回当前兄弟节点中的下标</td></tr></tbody></table></div><h1 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h1><h2 id="css操作"><a href="#css操作" class="headerlink" title="css操作"></a>css操作</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改单个样式</span></span><br><span class="line">$(<span class="string">"ul"</span>).css(<span class="string">"backgroundColor"</span>,<span class="string">"red"</span>);</span><br><span class="line"><span class="comment">//修改多个样式</span></span><br><span class="line">$(<span class="string">"li"</span>).css(&#123;</span><br><span class="line">  backgroundColor:<span class="string">"red"</span>,</span><br><span class="line">  fontSize:<span class="string">"12px"</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//取得样式</span></span><br><span class="line">$(<span class="string">"li"</span>).css(<span class="string">"fontSize"</span>);</span><br></pre></td></tr></table></figure><h2 id="class操作"><a href="#class操作" class="headerlink" title="class操作"></a>class操作</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加类</span></span><br><span class="line">$(<span class="string">"ul"</span>).addClass(name);</span><br><span class="line"><span class="comment">//移除类</span></span><br><span class="line">$(<span class="string">"ul"</span>).removeClass(name);</span><br><span class="line"><span class="comment">//判断类</span></span><br><span class="line">$(<span class="string">"ul"</span>).hasClass(name);</span><br><span class="line"><span class="comment">//切换</span></span><br><span class="line">$(<span class="string">"ul"</span>).toggleClass(name);</span><br></pre></td></tr></table></figure><h2 id="操作属性"><a href="#操作属性" class="headerlink" title="操作属性"></a>操作属性</h2><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////attr</span></span><br><span class="line"><span class="comment">//设置单个属性</span></span><br><span class="line">$(<span class="string">"ul"</span>).attr(<span class="string">"xx"</span>,<span class="string">"yy"</span>);</span><br><span class="line"><span class="comment">//设置多个属性</span></span><br><span class="line">$(<span class="string">"ul"</span>).attr(&#123;xx:yy,aa:bb&#125;);</span><br><span class="line"><span class="comment">//移除属性</span></span><br><span class="line">$(<span class="string">"ul"</span>).removeAttr(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">////prop:对于布尔类型的属性，disabled,selected,checked,只能用prop</span></span><br><span class="line">$(<span class="string">"ul"</span>).prop(<span class="string">"selected"</span>,<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////////使用方法均为如：$("ul").xxx([time]);</span></span><br><span class="line"><span class="comment">////三组基本动画</span></span><br><span class="line">show/hide:显示/隐藏</span><br><span class="line">slideDowm/slideUp/slideToggle:滑动显示/隐藏/切换</span><br><span class="line">fadeIn/fadeOut/fadeToggle:渐变显示/隐藏/切换</span><br><span class="line"></span><br><span class="line"><span class="comment">////自定义动画</span></span><br><span class="line">animate(prop[,speed][,swing/linear][,callback]);</span><br><span class="line"></span><br><span class="line"><span class="comment">////停止动画</span></span><br><span class="line">stop()：停止动画，在使用某一动画前调用，可防止动画队列过多</span><br></pre></td></tr></table></figure><h2 id="操作节点"><a href="#操作节点" class="headerlink" title="操作节点"></a>操作节点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">////创建节点</span><br><span class="line">$(&quot;&lt;span&gt;&lt;/span&gt;&quot;); </span><br><span class="line">////添加节点</span><br><span class="line">A.append(B);//将B节点移到A节点内最后的位置</span><br><span class="line">B.appendTo(A);//将B节点移到A节点内最后的位置</span><br><span class="line">A.prepend(B);//将B节点移到A节点内第一个位置</span><br><span class="line">B.prependTo(A);//将B节点移到A节点内第一个位置</span><br><span class="line">A.after(B);//将A节点移到B节点后</span><br><span class="line">A.before(B);//将A节点移到B节点前</span><br><span class="line">////清空节点</span><br><span class="line">A.empty();//清空节点内内容</span><br><span class="line">////删除节点</span><br><span class="line">A.remove();//删除当前节点</span><br><span class="line">////克隆节点</span><br><span class="line">A.clone();//复制当前节点</span><br></pre></td></tr></table></figure><h2 id="特殊的属性操作"><a href="#特殊的属性操作" class="headerlink" title="特殊的属性操作"></a>特殊的属性操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/////无参数时获取属性，有参时设置属性</span><br><span class="line">val();  //操作value值</span><br><span class="line">text()/html()  //操作innertext，innerHTML属性</span><br><span class="line">width()/height()  //操作width/height属性</span><br><span class="line">scrollTop()/scrollLeft()    //操作滚动条事件</span><br><span class="line">offset()/position()   //操作对于document/父元素的位置属性</span><br><span class="line"></span><br><span class="line">////注册事件 on  off</span><br><span class="line">//当参数为两个时，为当前对象注册事件</span><br><span class="line">A.on(&quot;click&quot;,function()&#123;&#125;);</span><br><span class="line">//当参数为三个时，为当前元素的子元素注册事件</span><br><span class="line">A.on(&quot;click&quot;,&quot;p&quot;,function()&#123;&#125;);</span><br><span class="line">//在参数为3个，且第二个为数据时，通过事件e传值</span><br><span class="line">A.on(&quot;click&quot;,data,function(e)&#123;xxx(e.data);&#125;);</span><br><span class="line">A.off(&quot;click&quot;);  //阻止所有 事件</span><br><span class="line">A.trigger(&quot;click&quot;);  //触发A的click事件</span><br><span class="line">e.stopPropagation();  //禁止冒泡</span><br><span class="line">e.preventDefault();  //事件解绑</span><br><span class="line">//在on（）的function事件中使用return false；达到阻止冒泡和默认的效果</span><br><span class="line"></span><br><span class="line">////补充</span><br><span class="line">end(); //返回链式编程中的前一对象</span><br><span class="line">each(function(index,element)&#123;&#125;); //循环遍历</span><br><span class="line">$.noConflict(); //释放$的占用</span><br></pre></td></tr></table></figure><h1 id="jquery插件"><a href="#jquery插件" class="headerlink" title="jquery插件"></a>jquery插件</h1><p>&emsp;&emsp;jquery插件是对jquery进行功能上的优化的一项技术。使用方法为在引入jquery文件后，再引入jquery插件。</p><h2 id="jquery-color-js"><a href="#jquery-color-js" class="headerlink" title="jquery.color.js"></a>jquery.color.js</h2><p>&emsp;&emsp;提供了一些关于颜色的功能，如颜色动态渐变等</p><h2 id="jquery-lazyload-js"><a href="#jquery-lazyload-js" class="headerlink" title="jquery.lazyload.js"></a>jquery.lazyload.js</h2><p>&emsp;&emsp;可以为网站提供懒加载功能，即显示时才加载。用法如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="class"><span class="keyword">class</span></span>=<span class="string">"lazy"</span> data-original=<span class="string">"01.gif"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//jsp文件最后面</span></span><br><span class="line">&lt;script src="jquery-1.12.4.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src="jquery.lazyload.js" &gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  $(function()&#123;</span><br><span class="line">    $(<span class="string">".lazy"</span>).lazyload();</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="ajax的使用"><a href="#ajax的使用" class="headerlink" title="ajax的使用"></a>ajax的使用</h1><p>&emsp;&emsp;ajax:异步请求，浏览器地址栏不变，进行局部刷新</p><h2 id="jquery的ajax"><a href="#jquery的ajax" class="headerlink" title="jquery的ajax"></a>jquery的ajax</h2><p>&emsp;&emsp;ajax常用的请求有六种，可分为三层</p><ul><li>第一层：<br>&emsp;&emsp;<code>$.ajax(uel[,settings]);</code>//最底层ajax请求，编写最复杂，完成功能最全</li><li>第二层：<br>&emsp;&emsp;<code>$.load(url[,data][,callback]);$.get(url[,data][,fn][,type]);$.post(url[,data][,fn][,type]);</code>//开发中常用的3个</li><li>第三层：<br>&emsp;&emsp;<code>$.getJSON(url[,data][,fn]);$.getScript(url[,callback]);</code>//高级开发</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">////getJson()与getScript()方法</span><br><span class="line">$.getJSON() 可以完成js“跨域”请求</span><br><span class="line">域名：域名+端口+项目，js默认不能跨域请求。</span><br><span class="line">$.getScript()  动态加载js文件。之前使用&lt;script src=&quot;&quot;&gt;加载页面时，一并加载js文件</span><br><span class="line"></span><br><span class="line">////load()方法的使用</span><br><span class="line">     //0.2 请求参数，采用json</span><br><span class="line">var params = &#123;&quot;username&quot;:&quot;杰克&quot;, &quot;password&quot;:&quot;1234&quot;&#125;;</span><br><span class="line">    /* 1 load()函数 ，必须使用jquery对象</span><br><span class="line">    * * 格式：load(url, [data], [callback])</span><br><span class="line">    * 参数1：url ，请求路径</span><br><span class="line">    * 参数2：data，请求参数</span><br><span class="line">    * 参数3：callback，回调函数</span><br><span class="line">    * * 如果没有请求参数，发送的GET请求</span><br><span class="line">    * * 如果有请求参数，发送的POST请求。请求没有中文乱码</span><br><span class="line">    * * 回调函数的参数</span><br><span class="line">    * 参数1：data，响应数据。load()永远获得字符串，如果需要使用，必须手动转换json对象。</span><br><span class="line">    */</span><br><span class="line">$(this).load(url,params,function(data)&#123;</span><br><span class="line">//转换json对象</span><br><span class="line">var jsonData = eval(&quot;(&quot;+data+&quot;)&quot;);</span><br><span class="line">alert(jsonData.message);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">////get()和post()方法的使用</span><br><span class="line">    /* 2 $.get() 全局函数，发送get请求</span><br><span class="line">    * * 格式：jQuery.get(url, [data], [callback], [type])</span><br><span class="line">    * * 参数4：type ，返回内容格式，xml, html, script, json, text, _default。</span><br><span class="line">    * * GET请求不适合发送中文数据，存放请求的中文乱码。</span><br><span class="line">    * 必须手动解码   new String(username.getBytes(&quot;ISO-8859-1&quot;) ,&quot;UTF-8&quot;)</span><br><span class="line">    * * 响应数据，如果使用  application/json;charset=UTF-8 ，jQuery自动将数据转换json对象。</span><br><span class="line">    * * 响应数据，如果使用  text/html;charset=UTF-8 ，回调函数获得字符串数据，需要手动转换。</span><br><span class="line">    * 使用“参数4”，设置&quot;json&quot;，jQuery将字符串 转换成 json对象</span><br><span class="line">    */</span><br><span class="line">$.get(url,params,function(data)&#123;</span><br><span class="line">alert(data);</span><br><span class="line">&#125;,&quot;json&quot;);</span><br><span class="line">    /* 3 $.post() 全局函数，与get方法相似发送post请求</span><br><span class="line">    * * 格式：jQuery.post(url, [data], [callback], [type])</span><br><span class="line">    */</span><br><span class="line">$.post(url,params,function(data)&#123;</span><br><span class="line">alert(data);</span><br><span class="line">&#125;,&quot;json&quot;)；</span><br><span class="line"></span><br><span class="line">////ajax()方法的使用</span><br><span class="line">    /* 4 $.ajax() 底层功能最强大的</span><br><span class="line">    * * 格式：jQuery.ajax([settings])</span><br><span class="line">    * 参数settings：设置所有的参数</span><br><span class="line">    * url:发送请求的地址</span><br><span class="line">    * data:发送到服务器的数据,请求参数</span><br><span class="line">    * type:请求方式 (&quot;POST&quot; 或 &quot;GET&quot;)， </span><br><span class="line">    * success:成功的回调函数，success(data, textStatus, jqXHR)</span><br><span class="line">    * error:请求失败时调用此函数</span><br><span class="line">    * dataType:预期服务器返回的数据类型</span><br><span class="line">    * &quot;xml&quot;: 返回 XML 文档，可用 jQuery 处理。</span><br><span class="line">    * &quot;html&quot;: 返回纯文本 HTML 信息；包含的script标签会在插入dom时执行。</span><br><span class="line">    * &quot;script&quot;: 返回纯文本 JavaScript 代码。</span><br><span class="line">    *            不会自动缓存结果。除非设置了&quot;cache&quot;参数。</span><br><span class="line">    *            注意：在远程请求时(不在同一个域下)，所有POST请求都将转为GET请求。(因为将使用DOM的script标签来加载)</span><br><span class="line">    * &quot;json&quot;: 返回 JSON 数据 。</span><br><span class="line">    * &quot;jsonp&quot;: JSONP 格式。使用 JSONP 形式调用函数时，</span><br><span class="line">    *             如 &quot;myurl?callback=?&quot; jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。</span><br><span class="line">    * &quot;text&quot;: 返回纯文本字符串</span><br><span class="line">    */</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">&quot;url&quot;:url,</span><br><span class="line">&quot;data&quot;:params,</span><br><span class="line">&quot;type&quot;:&quot;POST&quot;,</span><br><span class="line">&quot;success&quot;:function(data)&#123;</span><br><span class="line">   alert(data);</span><br><span class="line">&#125;,</span><br><span class="line">&quot;error&quot;:function()&#123;</span><br><span class="line">alert(&quot;服务器繁忙，请稍后重试&quot;);</span><br><span class="line">&#125;,</span><br><span class="line">&quot;dataType&quot;:&quot;json&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringMVC学习笔记</title>
      <link href="/2018/08/27/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/08/27/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<!-- build time:Tue Nov 05 2019 10:56:58 GMT+0800 (GMT+08:00) --><blockquote><p>Tips:本笔记主要信息来自于传智播客2015年胡斌SpringMVC备课笔记。笔记内容为：学习资料 + 个人补充；如有内容或排版方面的错误，欢迎纠正~</p></blockquote><h1 id="SpringMVC介绍"><a href="#SpringMVC介绍" class="headerlink" title="SpringMVC介绍"></a>SpringMVC介绍</h1><h2 id="为什么使用SpringMVC？"><a href="#为什么使用SpringMVC？" class="headerlink" title="为什么使用SpringMVC？"></a>为什么使用SpringMVC？</h2><p>&emsp;&emsp;很多应用程序的问题在于处理业务数据和显示业务数据的视图的对象之间存在紧密耦合。通常，更新业务对象的命令都是从视图本身发起的，使视图对任何业务对象更改都有高度敏感性。而且，当多个视图依赖于同一个业务对象时是没有灵活性的。<br>&emsp;&emsp;Spring Web MVC是一种基于Java的实现了Web MVC设计模式的请求驱动类型的轻量级Web框架，即使用了MVC架构模式的思想，将web层进行职责解耦，基于请求驱动指的就是使用请求-响应模型，框架的目的就是帮助我们简化开发，Spring Web MVC也是要简化我们日常Web开发的。<br><a id="more"></a></p><h2 id="MVC设计模型"><a href="#MVC设计模型" class="headerlink" title="MVC设计模型"></a>MVC设计模型</h2><p>&emsp;&emsp;MVC 是一种著名的设计模式，特别是在 Web 应用程序领域。模式全都是关于将包含业务数据的模块与显示模块的视图解耦的。这是怎样发生的？视图（例如，JSP 页面）怎样能够与其模型（例如，包含数据的 JavaBean）解耦？记得这句格言么？一个层次的重定向几乎可以解决计算机业中的所有问题。确实，在模型和视图之间引入重定向层可以解决问题。此重定向层是控制器。控制器将接收请求，执行更新模型的操作，然后通知视图关于模型更改的消息。依赖于模型的状态并且依赖于请求的控制器可以决定要显示哪个视图。图 1 演示了这种模式。</p><p><img src="/images/SpringMVC/mvc%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.png" alt="mvc设计模式"></p><h2 id="SpringMVC的强大之处"><a href="#SpringMVC的强大之处" class="headerlink" title="SpringMVC的强大之处"></a>SpringMVC的强大之处</h2><ol><li>Spring MVC 实现了即用的 MVC 的核心概念。它为控制器和处理程序提供了大量与此模式相关的功能。并且当向 MVC 添加反转控制（Inversion of Control，IoC）时，它使应用程序高度解耦，提供了通过简单的配置更改即可动态更改组件的灵活性。Spring MVC 为您提供了完全控制应用程序的各个方面的力量。</li><li>Spring 的 Web MVC 模块是围绕 DispatcherServlet 而设计的。DispatcherServlet 给处理程序分派请求，执行视图解析，并且处理语言环境和主题解析，此外还为上传文件提供支持。</li><li>DispatcherServlet 通过使用处理程序映射来决定哪一个处理程序应当处理传入的请求。处理程序映射只是用于标识使用哪一个处理程序来处理特定 URL 模式的映射。处理程序是只有一种方法 ModelAndView handleRequest(request,response) 的控制器接口的实现。Spring 还有一些可用的高级处理程序实现；其中一个重要的高级处理程序实现是 SimpleFormController，它提供了将命令对象绑定到表单、对其执行验证等功能。</li><li>在本系列教程(传智播客黑马程序员系列)的先前教程中使用了 DispatcherServlet 和简单的处理程序。在下一个部分中，将使用 SimpleFormController 并说明 Spring MVC 提供的各种即用功能。</li></ol><h2 id="springMVC优势"><a href="#springMVC优势" class="headerlink" title="springMVC优势"></a>springMVC优势</h2><ul><li>清晰的角色划分：前端控制器（DispatcherServlet）、请求到处理器映射（HandlerMapping）、处理器适配器（HandlerAdapter）、视图解析器（ViewResolver）、处理器或页面控制器（Controller）、验证器（ Validator）、命令对象（Command 请求参数绑定到的对象就叫命令对象）、表单对象（Form Object 提供给表单展示和提交到的对象就叫表单对象）。</li><li>分工明确，而且扩展点相当灵活，可以很容易扩展，虽然几乎不需要；</li><li>由于命令对象就是一个POJO，无需继承框架特定API，可以使用命令对象直接作为业务对象；</li><li>和Spring 其他框架无缝集成，是其它Web框架所不具备的；</li><li>可适配，通过HandlerAdapter可以支持任意的类作为处理器；</li><li>可定制性，HandlerMapping、ViewResolver等能够非常简单的定制；</li><li>功能强大的数据验证、格式化、绑定机制；</li><li>利用Spring提供的Mock对象能够非常简单的进行Web层单元测试；</li><li>本地化、主题的解析的支持，使我们更容易进行国际化和主题的切换。</li><li>强大的JSP标签库，使JSP编写更容易。<br>………………还有比如RESTful风格的支持、简单的文件上传、约定大于配置的契约式编程支持、基于注解的零配置支持等等。</li></ul><h2 id="SpringMVC的运行原理"><a href="#SpringMVC的运行原理" class="headerlink" title="SpringMVC的运行原理"></a>SpringMVC的运行原理</h2><h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h3><p><img src="/images/SpringMVC/%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="架构图"></p><h3 id="传统的MVC架构"><a href="#传统的MVC架构" class="headerlink" title="传统的MVC架构"></a>传统的MVC架构</h3><p><img src="/images/SpringMVC/mvc%E6%9E%B6%E6%9E%841.png" alt="mvc架构1"></p><p>&emsp;&emsp;首先让我们了解下 MVC（Model-View-Controller）三元组的概念：</p><ul><li>Model（模型）：数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或 JavaBean 组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据） 和 服务层（行为）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。<br>领域模型，javaBean组件等价于 域模型层 + 业务逻辑层 + 持久层</li><li>View(视图):负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</li><li>Controller(控制器):接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。 也就是说控制器做了个调度员的工作，。<br>从上图我们还看到，在标准的 MVC 中模型能主动推数据给视图进行更新（观察者设计模式，在模型上注册视图，当模型更新时自动更新视图），但在 Web 开发中模型是无法主动推给视图（无法主动更新用户界面），因为在 Web 开发是请求-响应模型。<br><img src="/images/SpringMVC/mvc%E6%9E%B6%E6%9E%842.png" alt="mvc架构2"></li></ul><p>&emsp;&emsp;核心架构的具体流程步骤如下：</p><ol><li>首先用户发送请求——&gt;DispatcherServlet，前端控制器收到请求后自己不进行处理，而是委托给其他的解析器进行处理，作为统一访问点，进行全局的流程控制；</li><li>DispatcherServlet——&gt;HandlerMapping,HandlerMapping将会把请求映射为HandlerExecutionChain对象（包含一个Handler处理器（页面控制器）对象、多个HandlerInterceptor拦截器）对象，通过这种策略模式，很容易添加新的映射策略；</li><li>DispatcherServlet——&gt;HandlerAdapter，HandlerAdapter将会把处理器包装为适配器，从而支持多种类型的处理器，即适配器设计模式的应用，从而很容易支持很多类型的处理器；</li><li>HandlerAdapter——&gt;处理器功能处理方法的调用，HandlerAdapter将会根据适配的结果调用真正的处理器的功能处理方法，完成功能处理；并返回一个ModelAndView对象（包含模型数据、逻辑视图名）；</li><li>ModelAndView的逻辑视图名——&gt; ViewResolver， ViewResolver将把逻辑视图名解析为具体的View，通过这种策略模式，很容易更换其他视图技术；</li><li>View——&gt;渲染，View会根据传进来的Model模型数据进行渲染，此处的Model实际是一个Map数据结构，因此很容易支持其他视图技术；</li><li>返回控制权给DispatcherServlet，由DispatcherServlet返回响应给用户，到此一个流程结束。</li></ol><h2 id="DispatcherServlet核心代码分析"><a href="#DispatcherServlet核心代码分析" class="headerlink" title="DispatcherServlet核心代码分析"></a>DispatcherServlet核心代码分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前端控制器分派方法  </span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        HttpServletRequest processedRequest = request;  </span><br><span class="line">        HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;  </span><br><span class="line">        <span class="keyword">int</span> interceptorIndex = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            ModelAndView mv;  </span><br><span class="line">            <span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;    </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">        <span class="comment">//检查是否是请求是否是multipart（如文件上传），如果是将通过MultipartResolver解析  </span></span><br><span class="line">                processedRequest = checkMultipart(request);  </span><br><span class="line">         <span class="comment">//步骤2、请求到处理器（页面控制器）的映射，通过HandlerMapping进行映射  </span></span><br><span class="line">                mappedHandler = getHandler(processedRequest, <span class="keyword">false</span>);  </span><br><span class="line">                <span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span> || mappedHandler.getHandler() == <span class="keyword">null</span>) &#123;  </span><br><span class="line">                    noHandlerFound(processedRequest, response);  </span><br><span class="line">                    <span class="keyword">return</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">         <span class="comment">//步骤3、处理器适配，即将我们的处理器包装成相应的适配器（从而支持多种类型的处理器）  </span></span><br><span class="line">                HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());    </span><br><span class="line">                <span class="comment">// 304 Not Modified缓存支持  </span></span><br><span class="line">                <span class="comment">//此处省略具体代码    </span></span><br><span class="line">                <span class="comment">// 执行处理器相关的拦截器的预处理（HandlerInterceptor.preHandle）  </span></span><br><span class="line">                <span class="comment">//此处省略具体代码    </span></span><br><span class="line">                <span class="comment">// 步骤4、由适配器执行处理器（调用处理器相应功能处理方法）  </span></span><br><span class="line">                mv = ha.handle(processedRequest, response, mappedHandler.getHandler());    </span><br><span class="line">                <span class="comment">// Do we need view name translation?  </span></span><br><span class="line">                <span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.hasView()) &#123;  </span><br><span class="line">                    mv.setViewName(getDefaultViewName(request));  </span><br><span class="line">                &#125;    </span><br><span class="line">                <span class="comment">// 执行处理器相关的拦截器的后处理（HandlerInterceptor.postHandle）  </span></span><br><span class="line">                <span class="comment">//此处省略具体代码  </span></span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">catch</span> (ModelAndViewDefiningException ex) &#123;  </span><br><span class="line">                logger.debug(<span class="string">"ModelAndViewDefiningException encountered"</span>, ex);  </span><br><span class="line">                mv = ex.getModelAndView();  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">catch</span> (Exception ex) &#123;  </span><br><span class="line">                Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);  </span><br><span class="line">                mv = processHandlerException(processedRequest, response, handler, ex);  </span><br><span class="line">                errorView = (mv != <span class="keyword">null</span>);  </span><br><span class="line">            &#125;    </span><br><span class="line">          <span class="comment">//步骤5 步骤6、解析视图并进行视图的渲染  </span></span><br><span class="line">          <span class="comment">//步骤5 由ViewResolver解析View（viewResolver.resolveViewName(viewName, locale)）  </span></span><br><span class="line">          <span class="comment">//步骤6 视图在渲染时会把Model传入（view.render(mv.getModelInternal(), request, response);）  </span></span><br><span class="line">            <span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;  </span><br><span class="line">                render(mv, processedRequest, response);  </span><br><span class="line">                <span class="keyword">if</span> (errorView) &#123;  </span><br><span class="line">                    WebUtils.clearErrorRequestAttributes(request);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;  </span><br><span class="line">                    logger.debug(<span class="string">"Null ModelAndView returned to DispatcherServlet with name '"</span> + getServletName() +  </span><br><span class="line">                            <span class="string">"': assuming HandlerAdapter completed request handling"</span>);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;    </span><br><span class="line">            <span class="comment">// 执行处理器相关的拦截器的完成后处理（HandlerInterceptor.afterCompletion）  </span></span><br><span class="line">            <span class="comment">//此处省略具体代码    </span></span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;  </span><br><span class="line">            <span class="comment">// Trigger after-completion for thrown exception.  </span></span><br><span class="line">            triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, ex)            <span class="keyword">throw</span> ex;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">catch</span> (Error err) &#123;  </span><br><span class="line">            ServletException ex = <span class="keyword">new</span> NestedServletException(<span class="string">"Handler processing failed"</span>, err);  </span><br><span class="line">            <span class="comment">// Trigger after-completion for thrown exception.  </span></span><br><span class="line">            triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, ex);  </span><br><span class="line">            <span class="keyword">throw</span> ex;  </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">finally</span> &#123;  </span><br><span class="line">            <span class="comment">// Clean up any resources used by a multipart request.  </span></span><br><span class="line">            <span class="keyword">if</span> (processedRequest != request) &#123;</span><br><span class="line">                cleanupMultipart(processedRequest);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="SpringMVC的第一个程序"><a href="#SpringMVC的第一个程序" class="headerlink" title="SpringMVC的第一个程序"></a>SpringMVC的第一个程序</h1><ol><li><p>创建一个javaweb工程<br>包：cn.itcast.controller</p></li><li><p>导入Spring的jar包<br><img src="/images/SpringMVC/springmvc-first%E5%8C%85%E5%88%97%E8%A1%A8.png" alt="springmvc-first包列表"></p></li><li><p>配置DispatcherServlet核心分发器(web.xml)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--我们经常使用的配置文件加载方式--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--  &lt;init-param&gt;</span></span><br><span class="line"><span class="comment">  &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span></span><br><span class="line"><span class="comment">  &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;</span></span><br><span class="line"><span class="comment">  &lt;/init-param&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载默认mvc配置文件：springname-servlet.xml ,必须放在WEB-INF下面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>//或者使用默认拦截/</span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>说明：/和<code>/*</code>的区别？<br>&emsp;&emsp;可以实现现在很流行的REST风格。很多互联网类型的应用很喜欢这种风格的URL。<br>&emsp;&emsp;弊端：会导致静态文件（jpg,js,css）被拦截后不能正常显示。想实现REST风格，事情就是麻烦一些。后面有解决办法还算简单。<br>&emsp;&emsp;拦截<code>/*</code>，这是一个错误的方式，请求可以走到Action中，但转到jsp时再次被拦截，不能访问到jsp。</p><ol><li><p>配置handlerMapping映射器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.1.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-3.1.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-3.1.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx-3.1.xsd "</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 处理器映射器 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 根据bean的name进行查找Handler 将action的url配置在bean的name中 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这是一个默认的映射处理器,即使不配置，那么也是默认就是这个 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置handlerAdapter适配器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//注意：这个适配器不是必须配置的，这是默认的、他在servlet容器已启动就被加载。</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写一个Controller类</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class TestController implements Controller&#123;</span><br><span class="line">  @Override</span><br><span class="line">  public ModelAndView handleRequest(HttpServletRequest request,</span><br><span class="line">  HttpServletResponse response) throws Exception &#123;</span><br><span class="line">    /**</span><br><span class="line">    * 1.收集参数、验证参数</span><br><span class="line">    * 2.绑定参数到命令对象</span><br><span class="line">    * 3.将命令对象传入业务对象进行处理</span><br><span class="line">    * 4.选择视图</span><br><span class="line">    */</span><br><span class="line">    ModelAndView mv = new ModelAndView();</span><br><span class="line">    //添加模型数据，那么这个数据可以是任意的POJO对象。</span><br><span class="line">    mv.addObject("hello","hello world!!");</span><br><span class="line">    //设置逻辑视图名，视图解析器会根据该名字解析到具体的视图界面</span><br><span class="line">    mv.setViewName("/WEB-INF/jsps/hello.jsp");</span><br><span class="line">    return mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置自定义控制器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置自定义controller ,使用beanName:name=”/hello.do”进行进行请求映射匹配--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"/hello.do"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.test.TestController"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义一个响应页面(hello.jsp)</p></li><li><p>配置视图解析器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用视图解析器解析逻辑视图，这样跟方便，易于扩展。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--逻辑视图前缀--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsps/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--逻辑视图后缀，匹配模式：前缀+逻辑视图+后缀，形成完整路径名--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="程序执行流程"><a href="#程序执行流程" class="headerlink" title="程序执行流程"></a>程序执行流程</h2><p><img src="/images/SpringMVC/%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="程序执行流程"></p><p>1、 首先用户发送请求`<a href="http://localhost:9080/springmvc-01/hello``——&gt;web容器，web容器根据“/hello”路径映射到DispatcherServlet（url-pattern为/）进行处理；" target="_blank" rel="noopener">http://localhost:9080/springmvc-01/hello``——&gt;web容器，web容器根据“/hello”路径映射到DispatcherServlet（url-pattern为/）进行处理；</a><br>2、 DispatcherServlet——&gt;BeanNameUrlHandlerMapping进行请求到处理的映射，BeanNameUrlHandlerMapping将“/hello”路径直接映射到名字为“/hello”的Bean进行处理，即HelloWorldController，BeanNameUrlHandlerMapping将其包装为HandlerExecutionChain（只包括HelloWorldController处理器，没有拦截器)<br>3、DispatcherServlet——&gt; SimpleControllerHandlerAdapter，SimpleControllerHandlerAdapter将HandlerExecutionChain中的处理器(HelloWorldController)适配为SimpleControllerHandlerAdapter；<br>4、 SimpleControllerHandlerAdapter——&gt; HelloWorldController处理器功能处理方法的调用，SimpleControllerHandlerAdapter将会调用处理器的handleRequest方法进行功能处理，该处理方法返回一个ModelAndView给DispatcherServlet；<br>5、 hello（ModelAndView的逻辑视图名）——&gt;InternalResourceViewResolver， InternalResourceViewResolver使用JstlView，具体视图页面在/WEB-INF/jsp/hello.jsp；<br>6、 JstlView（/WEB-INF/jsp/hello.jsp）——&gt;渲染，将在处理器传入的模型数据(message=HelloWorld！)在视图中展示出来；<br>7、 返回控制权给DispatcherServlet，由DispatcherServlet返回响应给用户，到此一个流程结束。<br>到此HelloWorld就完成了，步骤是不是有点多？而且回忆下我们主要进行了如下配置：<br>1、 前端控制器DispatcherServlet；<br>2、 HandlerMapping<br>3、 HandlerAdapter<br>4、 ViewResolver<br>5、 处理器/页面控制器<br>6、 视图</p><h1 id="HandlerMapping"><a href="#HandlerMapping" class="headerlink" title="HandlerMapping"></a>HandlerMapping</h1><h2 id="BeanNameUrlHandlerMapping"><a href="#BeanNameUrlHandlerMapping" class="headerlink" title="BeanNameUrlHandlerMapping"></a>BeanNameUrlHandlerMapping</h2><p>&emsp;&emsp;根据url请求去匹配bean的name属性url，从而获取Controller。HandlerMapping 将会把请求映射为 HandlerExecutionChain 对象（包含一个 Handler 处理器（页面控制器）对象、多个 HandlerInterceptor 拦截器）对象，通过这种策略模式，很容易添加新的映射策略;<br>配置案例：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//默认映射器，即使不配置，默认就使用这个来映射请求。</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">//映射器把请求映射到controller</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testController"</span> <span class="attr">name</span>=<span class="string">"/hello.do"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.controller.TestController"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h2 id="SimpleUrlHandlerMapping"><a href="#SimpleUrlHandlerMapping" class="headerlink" title="SimpleUrlHandlerMapping"></a>SimpleUrlHandlerMapping</h2><p>&emsp;&emsp; 根据浏览器url匹配简单url的key，key又Controller的id找到Controller<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/hello1.do"</span>&gt;</span>testController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/a.do"</span>&gt;</span>testController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">//那么上面的这个映射配置：表示多个*.do文件可以访问多个Controller或者一个Controller。</span><br><span class="line">//前提是：都必须依赖自定义的控制器bean</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"testController"</span> <span class="attr">name</span>=<span class="string">"/hello.do"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.controller.TestController"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h2 id="ControllerClassNameHandlerMapping"><a href="#ControllerClassNameHandlerMapping" class="headerlink" title="ControllerClassNameHandlerMapping"></a>ControllerClassNameHandlerMapping</h2><p>&emsp;&emsp; 根据类名（MyController）类名.do来访问,类名首字母小写<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//这个Mapping一配置：我们就可以使用Contrller的 [类名.do]来访问这个Controller.</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h2 id="HandlerMapping架构图"><a href="#HandlerMapping架构图" class="headerlink" title="HandlerMapping架构图"></a>HandlerMapping架构图</h2><p><img src="/images/SpringMVC/HandlerMapping%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="HandlerMapping架构图"><br><strong>总结：</strong>多个映射器可以共存。相互不影响。<br>&emsp;&emsp;测试策略：三个映射器全部存在于配置文件中，使用映射器的不同访问方式，全部可以访问成功。</p><h1 id="HandlerAdapter"><a href="#HandlerAdapter" class="headerlink" title="HandlerAdapter"></a>HandlerAdapter</h1><h2 id="SimpleControllerHandlerAdapter"><a href="#SimpleControllerHandlerAdapter" class="headerlink" title="SimpleControllerHandlerAdapter"></a>SimpleControllerHandlerAdapter</h2><p>SimpleControllerHandlerAdapter: 执行controller，调用controller里面方法，返回modelAndView。<br>&emsp;&emsp;表示所有实现了org.springframework.web.servlet.mvc.Controller 接口的Bean 可以作为Spring Web MVC 中的处理器。如果需要其他类型的处理器可以通过实现 HadlerAdapter 来解决。<br>案例分析：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">①　模拟一个handlerAdapter</span><br><span class="line"><span class="comment">//定义一个Adapter接口  </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerAdapter</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span></span>;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Object handler)</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">②　模拟一个Controller</span><br><span class="line"><span class="comment">//以下是三种Controller实现  </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Controller</span> </span>&#123;    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpController</span> <span class="keyword">implements</span> <span class="title">Controller</span></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doHttpHandler</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"http..."</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleController</span> <span class="keyword">implements</span> <span class="title">Controller</span></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSimplerHandler</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"simple..."</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationController</span> <span class="keyword">implements</span> <span class="title">Controller</span></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAnnotationHandler</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"annotation..."</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">③　适配器  </span><br><span class="line"><span class="comment">//下面编写适配器类 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleHandlerAdapter</span> <span class="keyword">implements</span> <span class="title">HandlerAdapter</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Object handler)</span> </span>&#123;  </span><br><span class="line">        ((SimpleController)handler).doSimplerHandler();  </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> (handler <span class="keyword">instanceof</span> Controller);  </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpHandlerAdapter</span> <span class="keyword">implements</span> <span class="title">HandlerAdapter</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Object handler)</span> </span>&#123;  </span><br><span class="line">        ((HttpController)handler).doHttpHandler();  </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> (handler <span class="keyword">instanceof</span> Controller);  </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationHandlerAdapter</span> <span class="keyword">implements</span> <span class="title">HandlerAdapter</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Object handler)</span> </span>&#123;  </span><br><span class="line">        ((AnnotationController)handler).doAnnotationHandler();  </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Object handler)</span> </span>&#123;            </span><br><span class="line">        <span class="keyword">return</span> (handler <span class="keyword">instanceof</span> Controller);  </span><br><span class="line">    &#125;    </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">④　DispatcherServlet</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dispatcher</span> </span>&#123;        </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;HandlerAdapter&gt; handlerAdapters = <span class="keyword">new</span> ArrayList&lt;HandlerAdapter&gt;();    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DispatchServlet</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        handlerAdapters.add(<span class="keyword">new</span> AnnotationHandlerAdapter());  </span><br><span class="line">        handlerAdapters.add(<span class="keyword">new</span> HttpHandlerAdapter());  </span><br><span class="line">        handlerAdapters.add(<span class="keyword">new</span> SimpleHandlerAdapter());  </span><br><span class="line">    &#125;       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">()</span></span>&#123;            </span><br><span class="line">        <span class="comment">//此处模拟SpringMVC从request取handler的对象，仅仅new出，可以出，               </span></span><br><span class="line">         <span class="comment">//不论实现何种Controller，适配器总能经过适配以后得到想要的结果  </span></span><br><span class="line">        <span class="comment">// HttpController controller = new HttpController();  </span></span><br><span class="line">      <span class="comment">// AnnotationController controller = new AnnotationController();  </span></span><br><span class="line">        SimpleController controller = <span class="keyword">new</span> SimpleController();  </span><br><span class="line">        <span class="comment">//得到对应适配器  </span></span><br><span class="line">        HandlerAdapter adapter = getHandler(controller);  </span><br><span class="line">        <span class="comment">//通过适配器执行对应的controller对应方法  </span></span><br><span class="line">        adapter.handle(controller);            </span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="function"><span class="keyword">public</span> HandlerAdapter <span class="title">getHandler</span><span class="params">(Controller controller)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">for</span>(HandlerAdapter adapter: <span class="keyword">this</span>.handlerAdapters)&#123;  </span><br><span class="line">            <span class="keyword">if</span>(adapter.supports(controller))&#123;  </span><br><span class="line">                <span class="keyword">return</span> adapter;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">new</span> DispatchServlet().doDispatch();  </span><br><span class="line">    &#125;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>&emsp;&emsp;通过一个简单的Adapter源码分析，发现原来适配器功能这么强大，设计的如此精妙，果然不同凡响。</p><h2 id="HttpRequestHandlerAdapter"><a href="#HttpRequestHandlerAdapter" class="headerlink" title="HttpRequestHandlerAdapter"></a>HttpRequestHandlerAdapter</h2><p>&emsp;&emsp;HTTP请求处理器适配器将http请求封装成HttpServletResquest 和HttpServletResponse对象，和servlet接口类似<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">第一步：配置HttpRequestHandlerAdapter适配器</span><br><span class="line">    &lt;!-- 配置HttpRequestHandlerAdapter适配器 --&gt;</span><br><span class="line">&lt;bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter"&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">第二步：编写Controller</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpRequestController</span> <span class="keyword">implements</span> <span class="title">HttpRequestHandler</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">request.setAttribute(<span class="string">"message"</span>, <span class="string">"我是中国人"</span>);</span><br><span class="line">request.getRequestDispatcher(<span class="string">"/WEB-INF/jsps/mess.jsp"</span>).forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">第三步：准备jsp页面</span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;这是我的第二个适配器&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;$&#123;message &#125;&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">第四步：调试运行</span><br></pre></td></tr></table></figure><p></p><p><strong>总结：</strong>适配器可以共存，只是控制器实现不同的接口使用不同的适配器而已。<br>&emsp;&emsp;注意：SimpleControllerHandlerAdapter是默认的适配器。如果使用后面这个适配器必须手动配置。否则将会访问失败。<br>&emsp;&emsp;实现了HttpRequestHandler接口：配置文件里面没有配置这个适配器报如下错误：<br>&emsp;&emsp;No adapter for handler [springMVC_01.HttpRequestController@12d527f]: Does your handler implement a supported interface like Controller?<br>&emsp;&emsp;通过这个错误,我们发现：实现Controller接口是默认的，既是说明：SimpleControllerHandlerAdapter是默认的适配器<br>&emsp;&emsp;还必须注意：实现HttpRequestHandler接口的控制器不支持ControllerClassNameHandlerMapping这个处理器映射器。</p><h1 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h1><h2 id="控制器架构图"><a href="#控制器架构图" class="headerlink" title="控制器架构图"></a>控制器架构图</h2><p><img src="/images/SpringMVC/%E6%8E%A7%E5%88%B6%E5%99%A8%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="控制器架构图"></p><h2 id="Controller-简介"><a href="#Controller-简介" class="headerlink" title="Controller 简介"></a>Controller 简介</h2><p>1、收集、验证请求参数并绑定到命令对象；<br>2、将命令对象交给业务对象，由业务对象处理并返回模型数据；<br>3、返回ModelAndView（Model部分是业务对象返回的模型数据，视图部分为逻辑视图名）。</p><h2 id="ServletForwardingController-转发控制器"><a href="#ServletForwardingController-转发控制器" class="headerlink" title="ServletForwardingController(转发控制器)"></a>ServletForwardingController(转发控制器)</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将接收到的请求转发到一个命名的servlet，具体示例如下：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForwardingServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;      </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span>  </span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;    </span><br><span class="line">        resp.getWriter().write(<span class="string">"Controller forward to Servlet"</span>);            </span><br><span class="line">    &#125;  &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;servlet&gt;  </span><br><span class="line">    &lt;servlet-name&gt;forwarding&lt;/servlet-name&gt;  </span><br><span class="line">    &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">cn</span>.<span class="title">javass</span>.<span class="title">chapter4</span>.<span class="title">web</span>.<span class="title">servlet</span>.<span class="title">ForwardingServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;  </span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>&gt; </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//当我们请求/<span class="title">forwardToServlet</span>时，会被转发到名字为“<span class="title">forwarding</span>”的<span class="title">servlet</span>处理，该<span class="title">sevlet</span>的<span class="title">servlet</span>-<span class="title">mapping</span>标签配置是可选的。</span></span><br><span class="line"><span class="class">&lt;!— 在<span class="title">springmvc</span>.<span class="title">xml</span>配置处理器 --&gt;     </span></span><br><span class="line"><span class="class">&lt;<span class="title">bean</span> <span class="title">name</span></span>=<span class="string">"/forwardToServlet"</span>   </span><br><span class="line"><span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.mvc.ServletForwardingController"</span>&gt;  </span><br><span class="line">        &lt;property name="servletName" value="forwarding"&gt;&lt;/property&gt;  </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h2 id="命令控制器-AbstractCommandController"><a href="#命令控制器-AbstractCommandController" class="headerlink" title="命令控制器(AbstractCommandController)"></a>命令控制器(AbstractCommandController)</h2><h3 id="通过get请求方式传递参数"><a href="#通过get请求方式传递参数" class="headerlink" title="通过get请求方式传递参数"></a>通过get请求方式传递参数</h3><p>①　命令控制器编写<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandController</span> <span class="keyword">extends</span> <span class="title">AbstractCommandController</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommandController</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setCommandClass(Student.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * command:命令对象</span></span><br><span class="line"><span class="comment">     * errors：数据绑定出现错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletResponse response, Object command, BindException errors)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">    Student s = (Student) command;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    mv.setViewName(<span class="string">"add/success"</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>②　配置bean<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置命令控制器bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"/add.do"</span> <span class="attr">class</span>=<span class="string">"springMVC_01.CommandController"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>③　编写JSP页面(add/add.jsp)</p><p>④　传递参数<br>访问路径：<code>localhost:8080/springmvc/add.do?name=zhangsan&amp;password=123</code></p><h3 id="使用post请求进行表单提交"><a href="#使用post请求进行表单提交" class="headerlink" title="使用post请求进行表单提交"></a>使用post请求进行表单提交</h3><p>模拟提交学生表单信息：<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">①　编写跳转命令控制器(跳转到添加页面)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * command:命令对象</span></span><br><span class="line"><span class="comment"> * errors：数据绑定出现错误</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, Object command, BindException errors)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">mv.setViewName(<span class="string">"add/add"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> mv;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">②　编写编辑页面控制器(填写添加数据)</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * command:命令对象</span></span><br><span class="line"><span class="comment"> * errors：数据绑定出现错误</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, Object command, BindException errors)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Student s = (Student) command;</span><br><span class="line">System.out.println(s);</span><br><span class="line">ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">mv.setViewName(<span class="string">"add/success"</span>);</span><br><span class="line"><span class="keyword">return</span> mv;&#125; </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">ServletRequestDataBinder binder)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 设置将页面字符串类型的数据转换成命令对象中Date属性,注意：这里的Date类型和命令对象的Date都使用Java.util.Date</span></span><br><span class="line">binder.registerCustomEditor(Date.class, <span class="keyword">new</span> CustomDateEditor(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>), <span class="keyword">true</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//也可以进行条件判断：进行时间类型各种格式的覆盖</span></span><br><span class="line"> </span><br><span class="line">③　添加页面</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath &#125;/add.do"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line"> 姓名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>&gt;&lt;br/&gt;</span><br><span class="line"> 密码:&lt;input type=<span class="string">"text"</span> name=<span class="string">"password"</span>&gt;&lt;br/&gt;</span><br><span class="line"> 日期:&lt;input type=<span class="string">"text"</span> name=<span class="string">"birthday"</span>&gt;&lt;br/&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>&gt; &lt;br/&gt;</span><br><span class="line"> &lt;/form&gt;</span><br><span class="line">④　成功页面</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;成功提示页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;恭喜登陆！！！&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p></p><h2 id="参数控制器-ParameterizableViewController"><a href="#参数控制器-ParameterizableViewController" class="headerlink" title="参数控制器(ParameterizableViewController)"></a>参数控制器(ParameterizableViewController)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span><span class="attr">name</span>=<span class="string">"/toIndex.do"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.ParameterizableViewController"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置你所要跳转到视图的名称 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewName"</span> <span class="attr">value</span>=<span class="string">"index"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span>//跳转到index页面</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">//注意：使用参数控制器：不用自己定义Controller，可以直接使用toIndex进行访问</span><br></pre></td></tr></table></figure><h1 id="使用注解的方式实现SpringMVC"><a href="#使用注解的方式实现SpringMVC" class="headerlink" title="使用注解的方式实现SpringMVC"></a>使用注解的方式实现SpringMVC</h1><h2 id="注解快速入门"><a href="#注解快速入门" class="headerlink" title="注解快速入门"></a>注解快速入门</h2><ul><li><p>新建一个web工程并导入jar包</p></li><li><p>配置springMVC配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.1.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-3.1.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-3.1.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx-3.1.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加注解扫描!!! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.itcast"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加注解映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注解适配器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsps/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 注解映射器和注解适配器可以使用&lt;mvc:annotation-driven /&gt;代替。</span></span><br><span class="line"><span class="comment">      &lt;mvc:annotation-driven /&gt;默认注册了注解映射器和注解适配器等bean。</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置web.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>springMVC_01<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置编码过滤器，解决post请求的乱码问题 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>character<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>character<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置springmvc框架，设置springmvc配置文件路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMVC.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyOneController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/fun"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写hello的JSP页面</p></li></ul><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><ul><li>@Controller：用于标识是处理器类.表示把我的控制器对象交给spring来创建。</li><li>Controller起作用：只需要扫描即可。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加注解扫描!!! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.itcast"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h2><p>&emsp; &emsp;@RequestMapping：请求到处理器功能方法的映射规则；<br>&emsp;&emsp;URL路径映射：<code>@RequestMapping(value=&quot;/user&quot;)或@RequestMapping(&quot;/user&quot;)</code></p><p>&emsp;&emsp;RequestMapping请求方法限定：get、post</p><ul><li><p>Get请求乱码<br>&emsp;&emsp;对于get请求中文参数出现乱码解决方法有两个：<br>&emsp;&emsp;修改tomcat配置文件添加编码与工程编码一致，如下：<br><code>&lt;Connector URIEncoding=&quot;utf-8&quot; connectionTimeout=&quot;20000&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; redirectPort=&quot;8443&quot;/&gt;</code><br>&emsp;&emsp;另外一种方法对参数进行重新编码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String userName =new</span><br><span class="line">String(request.getParamter("userName").getBytes("ISO8859-1"),"utf-8")</span><br><span class="line">ISO8859-1是tomcat默认编码，需要将tomcat编码后的内容按utf-8编码</span><br></pre></td></tr></table></figure></li><li><p>Post请求<br>&emsp;&emsp;在web.xml中加入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;URL模板映射</p><ul><li>需求：将修改请求方式改变<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value="/useredit/&#123;userId&#125;")：&#123;×××&#125;占位符，请求的URL可以是“/useredit/001”或“/useredit/abc”，通过在方法中使用@PathVariable获取&#123;×××&#125;中的×××变量</span><br><span class="line"></span><br><span class="line">    @RequestMapping("/useredit/&#123;userid&#125;")</span><br><span class="line">public String useredit(@PathVariable String userid,Model model) throws Exception&#123;</span><br><span class="line">//方法中使用@PathVariable获取useried的值，使用model传回页面</span><br><span class="line">model.addAttribute("userid", userid);</span><br><span class="line">return"/user/useredit";</span><br><span class="line">&#125;</span><br><span class="line">//实现restFul,所有的url都是一个资源的链接，有利于搜索引擎对网址收录。</span><br><span class="line"></span><br><span class="line">//多个占位符：</span><br><span class="line">    @RequestMapping("/useredit/&#123;groupid&#125;/&#123;userid&#125;")</span><br><span class="line">    public String useredit(@PathVariable String groupid,@PathVariable String userid,Model model) throws Exception&#123;</span><br><span class="line">    //方法中使用@PathVariable获取useried的值，使用model传回页面</span><br><span class="line">    model.addAttribute("groupid", groupid);</span><br><span class="line">    model.addAttribute("userid", userid);</span><br><span class="line">    return "/user/useredit";</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;根路径+子路径<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">根路径：</span><br><span class="line">    @RequestMapping放在类名上边，如下：</span><br><span class="line">    @Controller</span><br><span class="line">    @RequestMapping("/user")</span><br><span class="line">子路径</span><br><span class="line">    @RequestMapping放在方法名上边，如下：</span><br><span class="line">    @RequestMapping("/useradd")</span><br><span class="line">    public String useradd(…</span><br></pre></td></tr></table></figure><p></p><p>&emsp;&emsp;请求方法限定<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">•@RequestMapping(method = RequestMethod.GET)</span><br><span class="line">如果通过Post访问则报错：</span><br><span class="line">HTTP Status 405 - Request method 'POST' not supported</span><br><span class="line">例如：</span><br><span class="line">@RequestMapping(value="/useredit/&#123;userid&#125;",method=RequestMethod.GET)</span><br><span class="line"></span><br><span class="line">•限定POST方法</span><br><span class="line">@RequestMapping(method = RequestMethod.POST)</span><br><span class="line">如果通过Post访问则报错：</span><br><span class="line">HTTP Status 405 - Request method 'GET' not supported</span><br><span class="line"></span><br><span class="line">•GET和POST都可以</span><br><span class="line">@RequestMapping(method=&#123;RequestMethod.GET,RequestMethod.POST&#125;)</span><br></pre></td></tr></table></figure><p></p><p>&emsp;&emsp;需要注解映射器(默认使用)<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加注解映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>&emsp;&emsp;需要使用注解适配器(默认使用)<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注解适配器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>&emsp;&emsp;参数传递【请求参数绑定】<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////默认支持的参数类型////</span></span><br><span class="line">HttpServletRequest、HttpResponse，HttpSession、Model………….</span><br><span class="line"></span><br><span class="line"><span class="comment">////基本类型参数(Integer、Long、boolean)////</span></span><br><span class="line"><span class="comment">//布尔型：</span></span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td&gt;用户状态：&lt;/td&gt;</span><br><span class="line">  &lt;td&gt;</span><br><span class="line">    &lt;input type=<span class="string">"radio"</span> name=<span class="string">"userstate"</span> value=<span class="string">"true"</span>/&gt;</span><br><span class="line">    &lt;input type="radio" name="userstate" value="false"/&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/fun"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fun</span><span class="params">(String userName,Integer age)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">////Pojo对象(Object)////</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/fun"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fun</span><span class="params">(Model model,User user)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对比Struts2使用属性驱动进行封装参数</span></span><br><span class="line"><span class="comment">//业务需求：</span></span><br><span class="line"><span class="comment">//假如：现在有多个pojo、并且里面具有相同的属性，如果现在还使用基本的对象封装方式，那么将会出现错误。</span></span><br><span class="line"><span class="comment">//那么这个问题怎么解决呢？</span></span><br><span class="line"><span class="comment">//解析：我们使用包装类来包装pojo、经过包装的pojo相当于加了一层包结构。所以后面即使具有相同的属性也无所谓。</span></span><br><span class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">UserVo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Public <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//页面定义：</span></span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"user.age"</span> /&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"user.birthday"</span> /&gt;</span><br><span class="line"><span class="comment">//Controller方法定义如下：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useraddsubmit</span><span class="params">(Model model,UserVo userVo)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    System.out.println(userVo.getUser());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">////数组(Array)////</span></span><br><span class="line"><span class="comment">//页面定义如下：</span></span><br><span class="line"><span class="comment">//页面选中多个checkbox向controller方法传递</span></span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"ids"</span> value=<span class="string">"001"</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">" ids "</span> value=<span class="string">"002"</span>/&gt;</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">" ids "</span> value=<span class="string">"002"</span>/&gt;</span><br><span class="line"><span class="comment">//修改时可以采用循环模式</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/fun"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fun</span><span class="params">(Model model,Integer[] ids)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">////集合(collection)////</span></span><br><span class="line"><span class="comment">//集合页面：</span></span><br><span class="line"><span class="comment">//    List中存放对象，并将定义的List放在包装类中，controller使用包装对象接收。</span></span><br><span class="line"><span class="comment">//List中对象：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentScore</span> </span>&#123;<span class="comment">//成绩对象</span></span><br><span class="line"><span class="keyword">private</span> String coursename;<span class="comment">//课程名称</span></span><br><span class="line"><span class="keyword">private</span> Float score;<span class="comment">//成绩</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCoursename</span><span class="params">()</span> </span>&#123;</span><br><span class="line">returncoursename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Public <span class="keyword">void</span> <span class="title">setCoursename</span><span class="params">(String coursename)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.coursename = coursename;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Float <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">returnscore;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Public <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(Float score)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">UserVo</span> </span>&#123;</span><br><span class="line">  Private List&lt;StudentScore&gt; scores;<span class="comment">//成绩</span></span><br><span class="line">    <span class="comment">//get/set方法..</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//页面：</span></span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td&gt;课程成绩：&lt;/td&gt;</span><br><span class="line">  &lt;td&gt;</span><br><span class="line">    课程名：&lt;input type=<span class="string">"text"</span>name=<span class="string">"scores[0].coursename"</span>/&gt;成绩：&lt;input type=<span class="string">"text"</span>name=<span class="string">"scores[0].score"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    课程名：&lt;input type=<span class="string">"text"</span>name=<span class="string">"scores[1].coursename"</span>/&gt;成绩：&lt;input type=<span class="string">"text"</span>name=<span class="string">"scores[1].score"</span>/&gt;&lt;br/&gt;</span><br><span class="line">    课程名：&lt;input type=<span class="string">"text"</span>name=<span class="string">"scores[2].coursename"</span>/&gt;成绩：&lt;input type=<span class="string">"text"</span>name=<span class="string">"scores[2].score"</span>/&gt;&lt;br/&gt;</span><br><span class="line">  &lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line"><span class="comment">//Contrller方法定义如下：</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useraddsubmit</span><span class="params">(Model model,UserVo userVo)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">  System.out.println(userVo.getScores ());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">////Map////</span></span><br><span class="line"><span class="comment">//  在包装类中定义Map对象，并添加get/set方法，action使用包装对象接收。</span></span><br><span class="line"><span class="comment">//  包装类中定义Map对象如下：</span></span><br><span class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">UserVo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Map&lt;String, Object&gt;studentinfo = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    <span class="comment">//get/set方法..</span></span><br><span class="line">&#125;</span><br><span class="line">页面定义如下：</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">  &lt;td&gt;学生信息：&lt;/td&gt;</span><br><span class="line">  &lt;td&gt;</span><br><span class="line">    姓名：&lt;inputtype=<span class="string">"text"</span>name=<span class="string">"studentinfo['name']"</span>/&gt;</span><br><span class="line">    年龄：&lt;inputtype=<span class="string">"text"</span>name=<span class="string">"studentinfo['age']"</span>/&gt;</span><br><span class="line">    .. .. ..</span><br><span class="line">  &lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">Contrller方法定义如下：</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">useraddsubmit</span><span class="params">(Model model,UserVo userVo)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">  System.out.println(userVo.getStudentinfo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="RequestParam"><a href="#RequestParam" class="headerlink" title="RequestParam"></a>RequestParam</h2><p>-value：参数名字，即入参的请求参数名字，如value=“studentid”表示请求的参数区中的名字为studentid的参数的值将传入；<br>-required：是否必须，默认是true，表示请求中一定要有相应的参数，否则将报400错误码；<br>-defaultValue：默认值，表示如果请求中没有同名参数时的默认值<br>定义如下：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">userlist</span><span class="params">(@RequestParam(defaultValue=<span class="string">"2"</span>,value=<span class="string">"group"</span>,required=<span class="keyword">true</span>)</span> String groupid)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//形参名称为groupid，但是这里使用value="group"限定参数名为group，所以页面传递参数的名必须为group。这里通</span></span><br><span class="line"><span class="comment">//过required=true限定groupid参数为必需传递，如果不传递则报400错误，由于使用了defaultvalue=”2”默认值即使</span></span><br><span class="line"><span class="comment">//不传group参数它的值为”2”，所以页面不传递group也不会报错，如果去掉defaultvalue=”2”且定义required=true</span></span><br><span class="line"><span class="comment">//则如果页面不传递group则会报错。</span></span><br></pre></td></tr></table></figure><p></p><h2 id="Redirect"><a href="#Redirect" class="headerlink" title="Redirect"></a>Redirect</h2><p>&emsp;&emsp;Contrller方法返回结果重定向到一个url地址，如下方式：<br><code>return &quot;redirect:/user/userlist.do&quot;;</code></p><p><strong>注意：</strong></p><ul><li><p>redirect:add.do 与 redirect:/user/add.do” 同一个类</p><pre><code>在同一个类里面进行跳转。上面2个都可以实现跳转。但是有区别：第一个是同一个根路径下面跳转。第二个是在项目路径下进行跳转。</code></pre></li><li><p>不同的类进行跳转<br>&emsp;&emsp;不同的类进行跳转只能使用：redirect:/user/add.do进行跳转。即是从项目路径下来查询。<br>&emsp;&emsp;redirect方式相当于“response.sendRedirect()”，转发后浏览器的地址栏变为转发后的地址，因为转发即执行了一个新的request和response。<br>&emsp;&emsp;由于新发起一个request原来的参数在转发时就不能传递到下一个url，如果要传参数可以/user/userlist.do后边加参数，如下：<br><code>/user/userlist.action?groupid=2&amp;…..</code></p></li></ul><h2 id="Forward"><a href="#Forward" class="headerlink" title="Forward"></a>Forward</h2><p>&emsp;&emsp;controller方法执行后继续执行另一个controller方法。<br><code>return &quot;forward:/user/userlist.action&quot;;</code><br>&emsp;&emsp;forward方式相当于<code>request.getRequestDispatcher().forward(request,response)</code>，转发后浏览器地址栏还是原来的地址。转发并没有执行新的request和response，而是和转发前的请求共用一个request和response。所以转发前请求的参数在转发后仍然可以读取到。<br>如下例子：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/c"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">c</span><span class="params">(String groupid,UserVo userVo)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"...c...."</span>+groupid+<span class="string">"...user..."</span>+userVo.getUser());</span><br><span class="line"><span class="keyword">return</span> <span class="string">"forward:/to/d.action"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/d"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">d</span><span class="params">(String groupid,UserVo userVo)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"...d...."</span>+groupid+<span class="string">"...user..."</span>+userVo.getUser());</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="RequestBody-ResponseBody处理Json数据"><a href="#RequestBody-ResponseBody处理Json数据" class="headerlink" title="RequestBody/ResponseBody处理Json数据"></a>RequestBody/ResponseBody处理Json数据</h2><ul><li>作用：<br>@RequestBody注解用于读取http请求的内容(字符串)，通过springmvc提供的HttpMessageConverter接口将读到的内容转换为json、xml等格式的数据并绑定到controller方法的参数上。<br>本例子应用：<br>@RequestBody注解实现接收http请求的json数据，将json数据转换为java对象</li></ul><h3 id="请求Json响应Json"><a href="#请求Json响应Json" class="headerlink" title="请求Json响应Json"></a>请求Json响应Json</h3><ol><li><p>添加处理json数据配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注解适配器 ：添加json转换器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写代码【请求json、返回json】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"json"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJsonController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"requestJson.do"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">User <span class="title">requestJson</span><span class="params">(Model model,@RequestBody User u)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"用户信息:"</span>+u);</span><br><span class="line"><span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写页面ajax</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">  &lt;script type="text/javascript" src="$&#123;pageContext.request.contextPath &#125;/js/jquery-1.9.1.min.js"&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="comment">//请求json，返回json</span></span><br><span class="line">     <span class="function">function <span class="title">request_json</span><span class="params">()</span></span>&#123;</span><br><span class="line">    var user = JSON.stringify(&#123;userName:<span class="string">"张思德"</span>,age:<span class="number">21</span>&#125;);</span><br><span class="line">     $.ajax(&#123; </span><br><span class="line">     type:<span class="string">'POST'</span>,<span class="comment">//请求方式</span></span><br><span class="line">     url: <span class="string">'$&#123;pageContext.request.contextPath&#125;/json/requestJson.do'</span>,<span class="comment">//请求地址</span></span><br><span class="line">     contentType:<span class="string">'application/json;charset=utf-8'</span>,<span class="comment">//发送数据类型</span></span><br><span class="line">     data:user,<span class="comment">//传递数据</span></span><br><span class="line">     success : function(data)&#123;<span class="comment">//请求成功后的回调函数 </span></span><br><span class="line">     alert(data.userName+<span class="string">":"</span>+data.age);</span><br><span class="line">     &#125; </span><br><span class="line">     &#125;) </span><br><span class="line">     &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;input type=<span class="string">"button"</span> onclick=<span class="string">"request_json()"</span> value=<span class="string">"请求json，返回json"</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="请求pojo响应json"><a href="#请求pojo响应json" class="headerlink" title="请求pojo响应json"></a>请求pojo响应json</h3><ol><li><p>添加处理json数据配置【同上】<br>前台请求数据构造：<code>key=value&amp;key=value.</code></p></li><li><p>编写Controller代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"json"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJsonController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"responseJson.do"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">User <span class="title">responseJson</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">System.out.println(user);</span><br><span class="line"><span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写页面代码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">    &lt;script type="text/javascript" src="$&#123;pageContext.request.contextPath &#125;/js/jquery-1.9.1.min.js"&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">      <span class="comment">//请求pojo，返回json</span></span><br><span class="line">       <span class="function">function <span class="title">response_json</span><span class="params">()</span></span>&#123;</span><br><span class="line">         $.ajax(&#123; </span><br><span class="line">         type:<span class="string">'POST'</span>,</span><br><span class="line">         url: <span class="string">'$&#123;pageContext.request.contextPath&#125;/json/responseJson.do'</span>,</span><br><span class="line">         data:<span class="string">'userName=张三&amp;age=12'</span>,</span><br><span class="line">         success : function(data)&#123; </span><br><span class="line">         alert(data.userName+<span class="string">":"</span>+data.age);</span><br><span class="line">         &#125; </span><br><span class="line">         &#125;) </span><br><span class="line">     &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=<span class="string">"button"</span> onclick=<span class="string">"response_json()"</span> value=<span class="string">"请求pojo，返回json"</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="lt-mvc-annotation-driven-gt-配置："><a href="#lt-mvc-annotation-driven-gt-配置：" class="headerlink" title="&lt;mvc:annotation-driven /&gt;配置："></a><code>&lt;mvc:annotation-driven /&gt;</code>配置：</h3><p>注解映射器和注解适配器可以使用<code>&lt;mvc:annotation-driven /&gt;</code>代替。<br><code>&lt;mvc:annotation-driven /&gt;</code>默认注册了注解映射器和注解适配器等bean。<br>如下：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">以下配置可用<span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span>代替：</span><br><span class="line"><span class="comment">&lt;!--注解映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注解适配器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h2 id="多视图"><a href="#多视图" class="headerlink" title="多视图"></a>多视图</h2><p>&emsp;&emsp;视图是展示给用户的内容，控制器先得到对应的数据模型，对于非逻辑视图，则直接将数据模型渲染便结束；对于逻辑视图，则要先通过视图解析器对其进一步解析，以定位真实视图。</p><h3 id="对多视图的配置"><a href="#对多视图的配置" class="headerlink" title="对多视图的配置"></a>对多视图的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 相当于配置requestmapping和requestAdapter以及json支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsps/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">！--</span> 配置多视图解析 <span class="attr">--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.ContentNegotiatingViewResolver"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置支持媒体类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"contentNegotiationManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.accept.ContentNegotiationManagerFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mediaTypes"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"json"</span> <span class="attr">value</span>=<span class="string">"application/json"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"xml"</span> <span class="attr">value</span>=<span class="string">"application/xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定默认视图 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultViews"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 支持多个视图 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 对josn格式视图支持 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.json.MappingJacksonJsonView"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- xml格式视图支持 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.xml.MarshallingView"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.oxm.jaxb.Jaxb2Marshaller"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"classesToBeBound"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">value</span>&gt;</span>cn.itcast.domain.User<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Controller代码</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"multiView"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">multiView</span><span class="params">()</span></span>&#123;</span><br><span class="line">  User user1 = <span class="keyword">new</span> User();</span><br><span class="line">  user1.setId(<span class="number">1</span>);</span><br><span class="line">  ...</span><br><span class="line">  user1.setAddress(<span class="string">"武当山"</span>);</span><br><span class="line">  <span class="keyword">return</span> user1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多视图解析需要结合restful风格使用，访问 ：multiView.xml||json 验证</li></ul><p><strong>注意</strong><br>json视图需要导入jackson相关包<br>xml视图需要导入spring-oxm相关包</p><h3 id="springMVC的其他视图：freemaker"><a href="#springMVC的其他视图：freemaker" class="headerlink" title="springMVC的其他视图：freemaker"></a>springMVC的其他视图：freemaker</h3><p>&emsp;&emsp;freemaker是springmvc本身的视图解析器，可以实现页面静态化</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ol><li>导包：freemaker.jar</li><li>准备相关文件(index.ftl)</li><li><p>修改springmvc配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"freeMarkerConfig"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"templateLoaderPath"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"freemarkerSettings"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"template_update_delay"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">prop</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"default_encoding"</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">prop</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"number_format"</span>&gt;</span>0.##########<span class="tag">&lt;/<span class="name">prop</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"datetime_format"</span>&gt;</span>yyyy-MM-dd HH:mm:ss<span class="tag">&lt;/<span class="name">prop</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"classic_compatible"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"template_exception_handler"</span>&gt;</span>ignore<span class="tag">&lt;/<span class="name">prop</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".ftl"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"contentType"</span> <span class="attr">value</span>=<span class="string">"text/html;charset=utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写controller</p></li></ol><h4 id="ftl文件内容格式"><a href="#ftl文件内容格式" class="headerlink" title="ftl文件内容格式"></a>ftl文件内容格式</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;mata charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line">      <span class="comment">////遍历List////</span></span><br><span class="line">      <span class="comment">//定义数据</span></span><br><span class="line">      Map root = <span class="keyword">new</span> HashMap();</span><br><span class="line">      List&lt;String&gt; persons = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">      persons.add(<span class="string">"范冰冰"</span>);</span><br><span class="line">      persons.add(<span class="string">"李冰冰"</span>);</span><br><span class="line">      persons.add(<span class="string">"何灵"</span>);</span><br><span class="line">      root.put(<span class="string">"persons"</span>, persons);</span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">          &lt;#list persons as person&gt;</span><br><span class="line">          $&#123;person&#125;</span><br><span class="line">          &lt;/#list&gt;</span><br><span class="line">      <span class="comment">//页面</span></span><br><span class="line">      &lt;#list persons as p&gt;</span><br><span class="line">      $&#123;p.id&#125;/$&#123;p.name&#125;</span><br><span class="line">      &lt;/#list&gt;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//// 在模板中赋值 ////</span></span><br><span class="line">      1:&lt;#assign x=0 /&gt;</span><br><span class="line">      $&#123;x&#125;</span><br><span class="line">      2:&lt;#assign x="$&#123;world&#125;" /&gt;</span><br><span class="line">      $&#123;x&#125;</span><br><span class="line">      3:&lt;#assign x&gt;世界太好了&lt;/#assign&gt;</span><br><span class="line">      $&#123;x&#125;</span><br><span class="line">      4:&lt;#assign x&gt;</span><br><span class="line">         &lt;#list ["星期一", "星期二", "星期三", "星期四", "星期五", "星期六", "星期天"] as n&gt;</span><br><span class="line">            $&#123;n&#125;</span><br><span class="line">         &lt;/#list&gt;</span><br><span class="line">      &lt;/#assign&gt;</span><br><span class="line">      $&#123;x&#125;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="页面缓存-oscache为例"><a href="#页面缓存-oscache为例" class="headerlink" title="页面缓存(oscache为例)"></a>页面缓存(oscache为例)</h1><p>需求：使用页面缓存来提高用户体验度</p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><ul><li><p>缓存原理<br><img src="/images/SpringMVC/%E7%BC%93%E5%AD%98%E5%8E%9F%E7%90%86.png" alt="缓存原理"><br>优点：提升性能<br>缺点：不访问数据库，不是实时数据</p></li><li><p>分布式缓存<br><img src="/images/SpringMVC/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98.png" alt="分布式缓存"><br>&emsp;&emsp;分布式缓存能控制颗粒的大小，分布式缓存使用的是redis，memcached等等。这相当于是数据库，那么我们是不是在任何一层都可以进行操作数据库。所以可以进行颗粒大小的控制。</p></li></ul><h2 id="使用oscache管理缓存"><a href="#使用oscache管理缓存" class="headerlink" title="使用oscache管理缓存"></a>使用oscache管理缓存</h2><h3 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li><p>在src根目录下创建oscache.properties</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//oscache.properties常用参数</span></span><br><span class="line">cache.memory=<span class="keyword">false</span><span class="comment">//不能缓存内存</span></span><br><span class="line">cache.persistence.class=com.opensymphony.oscache.plugins.diskpersistence.DiskPersistenceListener<span class="comment">//持久化类</span></span><br><span class="line">cache.path=F:\\cache<span class="comment">//持久化到F盘</span></span><br></pre></td></tr></table></figure></li><li><p>导入oscacha-2.4.1.jar</p></li><li>配置缓存过滤器<br><img src="/images/SpringMVC/%E9%85%8D%E7%BD%AE%E7%BC%93%E5%AD%98%E8%BF%87%E6%BB%A4%E5%99%A8.png" alt="配置缓存过滤器"></li></ol><h3 id="oscache的使用"><a href="#oscache的使用" class="headerlink" title="oscache的使用"></a>oscache的使用</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在jsp页面中导入oscache标签库  --&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">"http://www.opensymphony.com/oscache"</span> prefix=<span class="string">"oscache"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在body中使用标签控制缓存的部分 --&gt;</span><br><span class="line">&lt;oscache:cache&gt;</span><br><span class="line">&lt;!-- 缓存默认保存在application中，可在标签中加入<span class="string">"scope='session'"</span>属性,将缓存保存在session中 --&gt;</span><br><span class="line">&lt;!-- 若想让缓存不随路径变化而变，可通过加入key属性实现 --&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/oacache:cache&gt;</span><br></pre></td></tr></table></figure><p><strong>注意</strong><br>&emsp;&emsp;缓存是通过“url=页面缓存”的形式保存的，故当请求地址发生变化后，缓存就不起作用了</p><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>&emsp;&emsp;需求分析：使用响应json格式数据的形式上传图片并回显</p><h2 id="准备工作-2"><a href="#准备工作-2" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>导入jar文件(fileupload、io、jersey-client、jersey-core)</li><li>配置视图解析器<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 文件上传的最大值，单位为byte --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10240000"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/uploadPic"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadPic</span><span class="params">(HttpServletRequest request,HttpServletResponse response,String fileName,PrintWriter out)</span></span>&#123;</span><br><span class="line"><span class="comment">//将普通请求转换为多部件请求方式</span></span><br><span class="line">MultipartHttpServletRequest mh = (MultipartHttpServletRequest) request;</span><br><span class="line"><span class="comment">//根据文件名进行获取文件对象</span></span><br><span class="line">CommonsMultipartFile cm = (CommonsMultipartFile) mh.getFile(fileName);</span><br><span class="line"><span class="comment">//把多部件文件对象转换为字节</span></span><br><span class="line"><span class="keyword">byte</span>[] fbytes = cm.getBytes();</span><br><span class="line"><span class="comment">//定义文件名</span></span><br><span class="line">String newFileName=<span class="string">""</span>;</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMddHHmmssSSS"</span>);</span><br><span class="line">newFileName= sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line"><span class="comment">//再加上三位随机数</span></span><br><span class="line">Random ran = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">newFileName = newFileName+ran.nextInt(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取上传文件的扩展名</span></span><br><span class="line">String suffix=<span class="string">""</span>;</span><br><span class="line">String originalFilename = cm.getOriginalFilename();</span><br><span class="line">suffix=originalFilename.substring(originalFilename.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建jersy客户端</span></span><br><span class="line">Client client = Client.create();</span><br><span class="line"><span class="comment">//指定关联文件图片服务器地址</span></span><br><span class="line">WebResource resource = client.resource(SSMConstants.PIC_HOST+<span class="string">"/upload/"</span>+newFileName+suffix);</span><br><span class="line"><span class="comment">//跨服务器上传图片</span></span><br><span class="line">resource.put(String.class, fbytes);</span><br><span class="line"></span><br><span class="line">String fullPath=SSMConstants.PIC_HOST+<span class="string">"/upload/"</span>+newFileName+suffix;</span><br><span class="line">String relativePath=<span class="string">"/upload/"</span>+newFileName+suffix;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&#123;"":"","":""&#125;</span></span><br><span class="line">String result=<span class="string">"&#123;\"fullPath\":\""</span>+fullPath+<span class="string">"\",\"relativePath\":\""</span>+relativePath+<span class="string">"\"&#125;"</span>;</span><br><span class="line"><span class="comment">//JSONObject jsonObject = JSON.parseObject(result);</span></span><br><span class="line">out.print(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//页面回显ajax</span></span><br><span class="line">&lt;p&gt;&lt;label&gt;&lt;/label&gt;</span><br><span class="line">&lt;img id=<span class="string">'imgSize1ImgSrc'</span> src=<span class="string">'$&#123;picPath &#125;$&#123;item.pic &#125;'</span>  height=<span class="string">"100"</span> width=<span class="string">"100"</span> /&gt;</span><br><span class="line">&lt;input type=<span class="string">'file'</span> id=<span class="string">'imgSize1File'</span> name=<span class="string">'imgSize1File'</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"file"</span> onchange=<span class="string">'submitImgSize1Upload()'</span> /&gt;</span><br><span class="line">&lt;span class="pos" id="imgSize1FileSpan"&gt;请上传图片的大小不超过3MB&lt;/span&gt;</span><br><span class="line">        &lt;input type=<span class="string">'hidden'</span> id=<span class="string">'imgSize1'</span> name=<span class="string">'pic'</span> value=<span class="string">''</span> reg=<span class="string">"^.+$"</span> tip=<span class="string">"亲！您忘记上传图片了。"</span> /&gt;</span><br><span class="line"> &lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">submitUpload</span><span class="params">()</span></span>&#123;</span><br><span class="line">var opt = &#123;</span><br><span class="line"><span class="comment">//重新指定form的action的值</span></span><br><span class="line">url:<span class="string">"$&#123;path&#125;/upload/uploadPic.do"</span>,</span><br><span class="line">type:<span class="string">"post"</span>,</span><br><span class="line">dateType:<span class="string">"text"</span>,</span><br><span class="line">data:&#123;</span><br><span class="line">fileName:<span class="string">"imgsFile"</span></span><br><span class="line">&#125;,</span><br><span class="line">success:function(responseText)&#123;</span><br><span class="line">var obj = $.parseJSON(responseText);</span><br><span class="line">$(<span class="string">"#imgsImgSrc"</span>).attr(<span class="string">"src"</span>,obj.fullPath);</span><br><span class="line">$(<span class="string">"#imgs"</span>).val(obj.fileName);</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">error:function()&#123;</span><br><span class="line">alert(<span class="string">"系统错误"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">$(<span class="string">"#form111"</span>).ajaxSubmit(opt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>&emsp;&emap;SpringWebMVC的处理器拦截器类似于Servlet开发中的过滤器Filter，用于对处理器进行预处理和后处理</p><h2 id="局部拦截器"><a href="#局部拦截器" class="headerlink" title="局部拦截器"></a>局部拦截器</h2><p>&emsp;&emsp;针对某个handlerMapping进行配置只对当前HandlerMapping有效。<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//在配置文件中的配置</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptors"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"handlerInterceptor1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"handlerInterceptor2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"handlerInterceptor1"</span> <span class="attr">class</span>=<span class="string">"springmvc.intercapter.HandlerInterceptor1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"handlerInterceptor2"</span> <span class="attr">class</span>=<span class="string">"springmvc.intercapter.HandlerInterceptor2"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>拦截器的代码实践:实现HandlerInterceptor<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">HandlerInterceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * controller执行前调用此方法</span></span><br><span class="line"><span class="comment"> * 返回true表示继续执行，返回false中止执行</span></span><br><span class="line"><span class="comment"> * 这里可以加入登录校验、权限拦截等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">Public <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Return <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * controller执行后但未返回视图前调用此方法</span></span><br><span class="line"><span class="comment"> * 这里可在返回用户前对模型数据进行加工处理，比如这里加入公用信息以便页面显示</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">Public <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub&#125;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * controller执行后且视图返回后调用此方法</span></span><br><span class="line"><span class="comment"> * 这里可得到执行controller时的异常信息</span></span><br><span class="line"><span class="comment"> * 这里可记录操作日志，资源清理等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">Public <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, Object handler, Exception ex)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="全局拦截器"><a href="#全局拦截器" class="headerlink" title="全局拦截器"></a>全局拦截器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//相关配置</span><br><span class="line"><span class="comment">&lt;!--拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--多个拦截器,顺序执行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.itcast.springmvc.filter.HandlerInterceptor1"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.itcast.springmvc.filter.HandlerInterceptor2"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="拦截器测试"><a href="#拦截器测试" class="headerlink" title="拦截器测试"></a>拦截器测试</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//测试1</span><br><span class="line">拦截器1放行，拦截器2放行：</span><br><span class="line">HandlerInterceptor1.........preHandle</span><br><span class="line">HandlerInterceptor2.........preHandle</span><br><span class="line">HandlerInterceptor2.........postHandle</span><br><span class="line">HandlerInterceptor1.........postHandle</span><br><span class="line">HandlerInterceptor2.........afterCompletion</span><br><span class="line">HandlerInterceptor1.........afterCompletion</span><br><span class="line"></span><br><span class="line">//测试2</span><br><span class="line">拦截器1放行，拦截器2阻止：</span><br><span class="line">HandlerInterceptor1.........preHandle</span><br><span class="line">HandlerInterceptor2.........preHandle</span><br><span class="line">HandlerInterceptor1.........afterCompletion</span><br><span class="line"></span><br><span class="line">//测试3：</span><br><span class="line">拦截器1阻止，拦截器2阻止：</span><br><span class="line">HandlerInterceptor1.........preHandle</span><br></pre></td></tr></table></figure><ul><li>拦截器的应用（用户身份认证）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">Public <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//如果是登录页面则放行</span></span><br><span class="line"><span class="keyword">if</span>(request.getRequestURI().indexOf(<span class="string">"login.action"</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">HttpSession session = request.getSession();</span><br><span class="line"><span class="comment">//如果用户已登录也放行</span></span><br><span class="line"><span class="keyword">if</span>(session.getAttribute(<span class="string">"user"</span>)!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用户没有登录挑战到登录页面</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/login.jsp"</span>).forward(request, response);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="SSM整合-SpringMVC-Spring-Mybatis"><a href="#SSM整合-SpringMVC-Spring-Mybatis" class="headerlink" title="SSM整合(SpringMVC,Spring,Mybatis)"></a>SSM整合(SpringMVC,Spring,Mybatis)</h1><p>&emsp;&emsp;为了更好的学习Springmvc和mybatis整合开发的方法，需要将Springmvc和mybatis进行整合，整合目标为：控制层采用SpringMvc，持久层使用mybatis实现</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>&emsp;&emsp;实现商品查询列表，从mysql数据库查询商品信息</p><h2 id="jar包"><a href="#jar包" class="headerlink" title="jar包"></a>jar包</h2><p>&emsp;&emsp;包括：Spring（包括SpringMvc），mybatis，mybatis-Spring整合包，数据库驱动，第三方连接池<br><img src="/images/SpringMVC/ssm%E5%8C%85.png" alt="ssm包"></p><h2 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a>Dao</h2><p>&emsp;&emsp;目标：spring管理SqlSessionFactory、mapper</p><p>详细参考mybatis教程与spring整合章节。</p><h3 id="db-properties"><a href="#db-properties" class="headerlink" title="db.properties"></a>db.properties</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/mybatis</span><br><span class="line">jdbc.username=XXXX</span><br><span class="line">jdbc.password=XXXX</span><br></pre></td></tr></table></figure><h3 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Global logging configuration，建议开发环境中要用debug</span><br><span class="line">log4j.rootLogger=DEBUG, stdout</span><br><span class="line"># Console output...</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</span><br></pre></td></tr></table></figure><h3 id="sqlMapConfig-xml"><a href="#sqlMapConfig-xml" class="headerlink" title="sqlMapConfig.xml"></a>sqlMapConfig.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//在classpath下创建mybatis/sqlMapConfig.xml</span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!—使用自动扫描器时，mapper.xml文件如果和mapper.java接口在一个目录则此处不用定义mappers</span> <span class="attr">--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.itcast.ssm.mapper"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="applicationContext-dao-xml"><a href="#applicationContext-dao-xml" class="headerlink" title="applicationContext-dao.xml"></a>applicationContext-dao.xml</h3><p>配置数据源、事务管理，配置SqlSessionFactory、mapper扫描器。<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx-3.2.xsd "</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载mybatis的全局配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis/SqlMapConfig.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mapper扫描器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.itcast.springmvc.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id="ItemsMapper-xml"><a href="#ItemsMapper-xml" class="headerlink" title="ItemsMapper.xml"></a>ItemsMapper.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.itcast.ssm.mapper.ItemsMapper"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- sql片段 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 商品查询条件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"query_items_where"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"items!=null"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"items.name!=null and items.name!=''"</span>&gt;</span></span><br><span class="line">and items.name like '%$&#123;items.name&#125;%'</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 查询商品信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findItemsList"</span> <span class="attr">parameterType</span>=<span class="string">"queryVo"</span> <span class="attr">resultType</span>=<span class="string">"items"</span>&gt;</span></span><br><span class="line">select * from items </span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"query_items_where"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ItemsMapper-java"><a href="#ItemsMapper-java" class="headerlink" title="ItemsMapper.java"></a>ItemsMapper.java</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface ItemsMapper &#123;</span><br><span class="line">//商品列表</span><br><span class="line">public List<span class="tag">&lt;<span class="name">Items</span>&gt;</span> findItemsList(QueryVo queryVo) throws Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><p>&emsp;&emsp;目标:Service由spring管理；spring对service进行事务控制</p><h3 id="applicationContext-service-xml"><a href="#applicationContext-service-xml" class="headerlink" title="applicationContext-service.xml"></a>applicationContext-service.xml</h3><p>&emsp;&emsp;配置service接口</p><h3 id="ApplicationContext-transaction-xml"><a href="#ApplicationContext-transaction-xml" class="headerlink" title="ApplicationContext-transaction.xml"></a>ApplicationContext-transaction.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">////配置事务管理器</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx-3.2.xsd "</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通知 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 传播行为 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 切面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">pointcut</span>=<span class="string">"execution(* cn.itcast.springmvc.service.impl.*.*(..))"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="OrderService"><a href="#OrderService" class="headerlink" title="OrderService"></a>OrderService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ItemsMapper itemsMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Items&gt; <span class="title">findItemsList</span><span class="params">(QueryVo queryVo)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//查询商品信息</span></span><br><span class="line"><span class="keyword">return</span> itemsMapper.findItemsList(queryVo);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><h3 id="springmvc-xml"><a href="#springmvc-xml" class="headerlink" title="springmvc.xml"></a>springmvc.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop/spring-aop-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx-3.2.xsd "</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 扫描controller注解,多个包中间使用半角逗号分隔 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.itcast.ssm.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注解映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注解适配器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ViewResolver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">////加载spring容器，配置springmvc前置控制器。</span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xmlns:web</span>=<span class="string">"http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">display-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载spring容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/classes/spring/applicationContext.xml,/WEB-INF/classes/spring/applicationContext-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 解决post乱码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- springmvc的前端控制器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- contextConfigLocation不是必须的， 如果不配置contextConfigLocation， springmvc的配置文件默认在：WEB-INF/servlet的name+"-servlet.xml" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="OrderController"><a href="#OrderController" class="headerlink" title="OrderController"></a>OrderController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> OrderService orderService;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/queryItem.action"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">queryItem</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 商品列表</span></span><br><span class="line">List&lt;Items&gt; itemsList = orderService.findItemsList(<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">// 创建modelAndView准备填充数据、设置视图</span></span><br><span class="line">ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"><span class="comment">// 填充数据</span></span><br><span class="line">modelAndView.addObject(<span class="string">"itemsList"</span>, itemsList);</span><br><span class="line"><span class="comment">// 视图</span></span><br><span class="line">modelAndView.setViewName(<span class="string">"order/itemsList"</span>);</span><br><span class="line"><span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> ssm </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>杂项</title>
      <link href="/2018/08/15/%E6%9D%82%E9%A1%B9/"/>
      <url>/2018/08/15/%E6%9D%82%E9%A1%B9/</url>
      <content type="html"><![CDATA[<!-- build time:Tue Nov 05 2019 10:56:58 GMT+0800 (GMT+08:00) --><blockquote><p>主要收集一些在平时遇到的但是还未形成体系的内容。</p></blockquote><a id="more"></a><h1 id="1-java相关"><a href="#1-java相关" class="headerlink" title="1 java相关"></a>1 java相关</h1><h2 id="Class类中的getCanonicalName-getName-getSimpleName"><a href="#Class类中的getCanonicalName-getName-getSimpleName" class="headerlink" title="Class类中的getCanonicalName(), getName(), getSimpleName()"></a>Class类中的getCanonicalName(), getName(), getSimpleName()</h2><ol><li>getCanonicalName() 是获取所传类从java语言规范定义的格式输出。 //getCanonicalName()=com.pinzhi.test.dao.DaoEntity</li><li>getName() 是返回实体类型名称 //getName()=com.pinzhi.test.dao.DaoEntity</li><li>getSimpleName() 返回从源代码中返回实例的名称。//getSimpleName()=DaoEntity</li></ol><h1 id="2-linux相关"><a href="#2-linux相关" class="headerlink" title="2 linux相关"></a>2 linux相关</h1><h2 id="问题1-：虚拟机环境下Ubuntu登录后只显示桌面背景"><a href="#问题1-：虚拟机环境下Ubuntu登录后只显示桌面背景" class="headerlink" title="问题1 ：虚拟机环境下Ubuntu登录后只显示桌面背景"></a>问题1 ：虚拟机环境下Ubuntu登录后只显示桌面背景</h2><p>解决方案：按<code>alt+ctrl+F1</code>进入命令行模式，使用<code>sudo apt-get install ubuntu-desktop</code>重新安装桌面</p><h1 id="3-Python相关"><a href="#3-Python相关" class="headerlink" title="3 Python相关"></a>3 Python相关</h1><h2 id="yield与yield-from-关键字的性质"><a href="#yield与yield-from-关键字的性质" class="headerlink" title="yield与yield from 关键字的性质"></a>yield与yield from 关键字的性质</h2><p>&emsp;&emsp;为了探究两个关键字的性质，使用print的方式测试了他们的一些性质。代码如下：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#yield_from.py</span></span><br><span class="line"><span class="comment">#定义两个函数，htest()&amp;itest()</span></span><br><span class="line"><span class="comment">#在主方法中调用itest()，itest()通过yield from调用htest()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">htest</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'htest run...'</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    key = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">4</span>:    </span><br><span class="line">        n = <span class="keyword">yield</span> key     </span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">4</span>:</span><br><span class="line">            p = <span class="number">100</span>    </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p = n</span><br><span class="line">        key = p</span><br><span class="line">        print(<span class="string">'h['</span>,i,<span class="string">']:'</span>,key)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">itest</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'itest() start'</span>)</span><br><span class="line">    h = htest()</span><br><span class="line">    k = <span class="number">0</span></span><br><span class="line">    h.send(<span class="keyword">None</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:    </span><br><span class="line">        d = <span class="keyword">yield</span> k</span><br><span class="line">        print(<span class="string">'d='</span>,d)</span><br><span class="line">        print(<span class="string">'yield from htest()'</span>)</span><br><span class="line">        val1 = <span class="keyword">yield</span> <span class="keyword">from</span> htest()</span><br><span class="line">        print(<span class="string">'itest1:'</span>, val1)</span><br><span class="line">        val2 = <span class="keyword">yield</span> <span class="keyword">from</span> htest()</span><br><span class="line">        print(<span class="string">'itest2:'</span>, val2)</span><br><span class="line">        e = <span class="keyword">yield</span> k</span><br><span class="line">        print(<span class="string">'e='</span>,e)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            print(<span class="string">'th:'</span>,h.send(e))</span><br><span class="line">        <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'h error!!!'</span>)</span><br><span class="line">    print(<span class="string">'itest() end'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = itest()</span><br><span class="line">    t.send(<span class="keyword">None</span>)</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> j &lt; <span class="number">12</span>:</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            t.send(j)</span><br><span class="line">        <span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'error!!!'</span>)</span><br></pre></td></tr></table></figure><p></p><p>&emsp;&emsp;运行结果如下:<br><img src="/images/%E6%9D%82%E9%A1%B9/test_yield_from.jpg" alt="test_yield_from"><br>&emsp;&emsp;由代码可以看出两个关键字有如下特点：</p><ol><li>对于一个coroutine函数，首先要用send()方法传入一个None，开启这个函数</li><li>coroutine函数传入参数的个数，由函数内的循环次数决定（即如果为无限循环时，可能会导致另一个coroutine函数无法接收参数），传入的参数个数超过循环次数则会抛出’StopIteration‘异常</li><li>coroutine函数内通过 <code>a = yield b</code>或 <code>a = yield from b（）</code>的方式接受传入的值，若是用变量接收，变量可为任意变量，但一定要是已定义的变量，接收变量后，可通过 <code>b = xxx</code>或<code>return xxx</code>设定外部函数的返回值;若是使用<code>yield from</code>的方式，则要求后面的函数是coroutine函数。</li><li>参数传入是按顺序传入的。可以将yield from看做是一个数组，比如先用yield传值，后面接上一个yield from，则先将一个值传给yield，再将后面长度为yield from数组的数传入该函数中</li><li>使用yield from 方法时，若是直接传输给一个函数即<code>yield from xxx()</code>,每次传输都会重新开始循环；</li><li>若是使用在循环外<code>h =coroutine() h.send(None)</code>开启coroutine函数，在循环中用<code>yield h</code>接受传入的值，则每次运行都会从继续上一次的状态开始</li></ol><h2 id="python中的文件操作"><a href="#python中的文件操作" class="headerlink" title="python中的文件操作"></a>python中的文件操作</h2><p>有以下语句：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(filepath,<span class="string">'xt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'Hello\n'</span>)</span><br></pre></td></tr></table></figure><p></p><p>理解为：x模式是Python3中对<code>open()</code>函数的拓展，用来代替W模式对一个不存在文件系统的文件操作。xt 模式下，若是filepath中的文件已存在，会抛出FileExistsError。</p><h2 id="翻转list"><a href="#翻转list" class="headerlink" title="翻转list"></a>翻转list</h2><p>有以下语句：<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">x_trans = [x[::<span class="number">-1</span>] <span class="keyword">for</span> val <span class="keyword">in</span> x]</span><br></pre></td></tr></table></figure><p></p><p>理解为：对于一个list，使用索引取值时，可以加入第三个参数，即取值的步长（默认为1），值为-1表示逆序取值</p><h2 id="np-newaxis"><a href="#np-newaxis" class="headerlink" title="np.newaxis"></a>np.newaxis</h2><p>&emsp;功能：np.newaxis是用来给数组a增加维度的<br>&emsp;格式：a[np.newaxis和:的组合]，如a[:,np.newaxis]，a[np.newaxis, np.newaxis, :]<br>&emsp;详解：np.newaxis在[]中第几位，a.shape的第几维就变成1，a的原来的维度依次往后排。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line">a.shape=(a ,b, c)</span><br><span class="line"></span><br><span class="line">a[:, np.newaxis].shape= (a, <span class="number">1</span>, b, c)</span><br><span class="line">a[:, np.newaxis, np.newaxis].shape= (a, <span class="number">1</span>, <span class="number">1</span>, b, c)</span><br><span class="line">a[np.newaxis, :].shape= (<span class="number">1</span>, a, b, c)</span><br><span class="line">a[np.newaxis, np.newaxis, :].shape= (<span class="number">1</span>, <span class="number">1</span>, a, b, c)</span><br><span class="line">a[np.newaxis, :, np.newaxis].shape= (<span class="number">1</span>, a, <span class="number">1</span>, b, c)</span><br><span class="line">a[np.newaxis, :, np.newaxis, :].shape= (<span class="number">1</span>, a, <span class="number">1</span>, b, c)</span><br></pre></td></tr></table></figure><h1 id="4-机器学习相关"><a href="#4-机器学习相关" class="headerlink" title="4 机器学习相关"></a>4 机器学习相关</h1><p></p><hr><br><a href="https://towardsdatascience.com/time-series-of-price-anomaly-detection-13586cd5ff46" target="_blank" rel="noopener">《time-series-of-price-anomaly-detection》</a><p></p><blockquote><p>一篇关于异常检测的好文章，使用python实现了不同方法在异常检测上的应用</p></blockquote><p>相关算法:<br><a href="https://www.jianshu.com/p/5af3c66e0410?utm_campaign=maleskine" target="_blank" rel="noopener">孤立森林算法</a>,过程大概为，对不同维度随机划分区间（直至区间内只剩一个点)构造多棵树，根据目标点在多棵树中的平均高度判断是否异常点<br><a href="https://www.jianshu.com/p/6f2a0e7f6593" target="_blank" rel="noopener">oneClassSvm</a>，求出包裹样本的最小超球面，不在球面内的样本都认为不是想要的类</p><hr><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul><li><p><strong>输入空间/输出空间: </strong>监督学习中，属入和输出所有可能的取值集合称为输入空间和输出空间。通常输出空间远小于输入空间</p></li><li><p><strong>特征空间：</strong>每一条样本被成作是一个实例，通常由特征向量表示，所有特征向量存在的空间称为特征空间。特征空间有时候与输入空间相同，有时候不同（例如word embbeding），不同的情况是输入空间通过某种映射生成了特征空间。</p></li></ul><hr><h2 id="k-means-k-均值"><a href="#k-means-k-均值" class="headerlink" title="k-means:k-均值"></a>k-means:k-均值</h2><h3 id="算法实现过程"><a href="#算法实现过程" class="headerlink" title="算法实现过程"></a>算法实现过程</h3><ul><li><p>step1. 随机选取k个对象作为初始的k个簇的质心；</p></li><li><p>step2. 剩余对象使用距离公式（默认为欧式距离）分别对质心求得距离，分配点到距离最近的簇</p></li><li><p>step3. 求得各簇的均值，作为新的质心</p></li><li><p>step4.重复step2,3，直到目标函数最小化为止</p></li></ul><hr><h2 id="k-meoids-k-中心点"><a href="#k-meoids-k-中心点" class="headerlink" title="k-meoids:k-中心点"></a>k-meoids:k-中心点</h2><h3 id="算法实现过程-1"><a href="#算法实现过程-1" class="headerlink" title="算法实现过程"></a>算法实现过程</h3><ul><li><p>step1. 随机选取k个对象作为初始的k个簇的质心；</p></li><li><p>step2. 剩余对象使用距离公式分别对质心求得距离，分配点到距离最近的簇</p></li><li><p>step3. 随机选取某一簇的非中心点作为新的质心，重复step2，计算每个点与新质心和旧质心的距离变化（正/负/零）并求出总变化S，若S&lt;0,则使用新质心</p></li><li><p>step4.重复step3，直到目标函数最小化为止</p></li></ul><hr><h2 id="GMM，高斯混合模型（EM方法）"><a href="#GMM，高斯混合模型（EM方法）" class="headerlink" title="GMM，高斯混合模型（EM方法）"></a>GMM，高斯混合模型（EM方法）</h2><p>&emsp;&emsp;高斯混合模型（GMM）,是将一个事物分解为若干基于高斯概率密度函数形成的模型。其基本公式如下：</p><script type="math/tex;mode=display">P(y|\theta) =\sum_{k=1}^{K}{\alpha_{k}\phi(y|\theta_{k})}\\其中，\alpha_{k}是系数，\alpha_{k}\ge0,\sum_{k=1}^{K}{\alpha_{k}}=1;\phi(y|\theta_{k})是高斯分布密度，\theta_{k}=(\mu_{k},\sigma_{k}^{2}),\\\phi(y|\theta_{k})=\frac{1}{\sqrt{2\pi}\sigma_{k}}e^{-\frac{(x-\mu_{k})^{2}}{2\sigma_{k}^{2}}}</script><h3 id="算法实现过程-2"><a href="#算法实现过程-2" class="headerlink" title="算法实现过程"></a>算法实现过程</h3><ul><li>step1. 给定高斯概率公式，假设数据由k组高斯分布数据混合而成</li><li>step2. 随机指定两组高斯分布的参数（均值，方差）</li><li>step3. 使用两条概率公式对所有数据点进行划分</li><li>step4.分别求得划分结果的均值和方差，作为新一轮EM的初始参数</li><li>step5.重复步骤2-4，直到参数不再变化</li></ul><p>参考文献：<br>&emsp;[1]<a href="https://www.cnblogs.com/xingshansi/p/6584555.html" target="_blank" rel="noopener">混合高斯模型（GMM）推导及实现</a><br>&emsp;[2]<a href="https://www.cnblogs.com/xingshansi/p/6557665.html" target="_blank" rel="noopener">EM算法</a></p><hr><h2 id="ID3"><a href="#ID3" class="headerlink" title="ID3"></a>ID3</h2><p>&emsp;&emsp;ID3算法是决策树方法中最具代表性的算法,以信息熵作为目标评价函数。其基础理论为信息熵理论，相关的公式如下所示：</p><script type="math/tex;mode=display">\begin{align}&信息量：&i(y)&=- \log_{2}{P(y)} \tag{1}\\&信息熵：&H(Y)& = -\sum_{i=1}^{n}{P(y_{i})}\log_{2}{P(y_{i})}\tag{2}\\&条件熵：&H(Y|X)&=\sum_{x\in{X}}{P(X)H(Y|X=x)} \tag{3}\\ &&&=-\sum_{x\in X}{P(X)}\sum_{y \in Y}{P(y|x)\log_{2} P(y|x)}\\ &&&=- \sum_{x \in X}\sum_{y \in Y}{P(y|x) \log_{2}{p(y|x)}}\\&信息增益:&Grain(Y,X)&=H(Y) - H(Y|X) \tag{4}\end{align}</script><p>&emsp;&emsp;公式（1）为信息量的计算公式，其中，P(Y)是事件发生的概率。公式表示了一件事发生的概率越小，它所蕴含的信息量越大。<br>&emsp;&emsp;公式（2）为信息熵的计算公式，表达了Y事件发生的不确定度，就是所有可能发生的事件的信息量的期望。<br>&emsp;&emsp;公式（3）为条件熵的计算公式，表示在给X给定的条件下，Y的条件概率分布的熵对X的数学期望。<br>&emsp;&emsp;公式（4）为信息增益公式。当我们用另一个变量X对原变量Y分类后，原变量Y的不确定性就会减小了(即熵值减小)。而熵就是不确定性，不确定程度减少了多少其实就是信息增益。</p><h3 id="算法实现过程（树构建）"><a href="#算法实现过程（树构建）" class="headerlink" title="算法实现过程（树构建）"></a>算法实现过程（树构建）</h3><ul><li><p>step1. 分别求得各个特征与目标结果的条件熵，信息增益最大的列为最优特征列；</p></li><li><p>step2. 以最优特征列为根节点，列的值作为划分依据，对数据集进行划分，在各分支取得数据子集（值等于分支的值，并去掉该最优特征列）；</p></li><li><p>step3. 分别以数据子集为基础，重复step1,2。直到特征列为1或分支下目标类别概率为1；</p></li></ul><p>参考文献：<br>&emsp;[1]<a href="https://www.cnblogs.com/further-further-further/p/9429257.html" target="_blank" rel="noopener">决策树之系列一ID3原理与代码实现</a>)</p><hr><h2 id="C4-5"><a href="#C4-5" class="headerlink" title="C4.5"></a>C4.5</h2><p>&emsp;&emsp;C4.5算法也是决策树算法的一种，是ID3算法的一种改进算法。算法中，与ID3的最大区别在于C4.5提出了一个新的特征选择标准：</p><script type="math/tex;mode=display">\begin{align}信息增益率：IGR &= \frac{Gain(Y,X)}{H(X)}\\&=\frac{H(Y)-H(Y|X)}{H(X)}\end{align}</script><p>&emsp;&emsp;算法步骤同ID3算法过程。</p><p>参考文献：<br>&emsp;[1]<a href="https://blog.csdn.net/fuqiuai/article/details/79456971" target="_blank" rel="noopener">数据挖掘领域十大经典算法之—C4.5算法（超详细附代码）</a></p><hr><h2 id="感知机"><a href="#感知机" class="headerlink" title="感知机"></a>感知机</h2><p>&emsp;&emsp;感知机原理+代码可在查考文献中查看。</p><h3 id="算法实现过程-3"><a href="#算法实现过程-3" class="headerlink" title="算法实现过程"></a>算法实现过程</h3><script type="math/tex;mode=display">\begin{align}&step1. w,b参数初始化，即随机选取w_{0},b_{0}\\&step2. 在数据集中选取数据(x_{i},y_{i}),若 y_{i}(w \cdot x_{i} + b)  \le 0 ,说明 (x_{i},y_{i})是误分类点，需要对对应的w,b的值进行修正:\\& \;\;\;\; w \gets w + \eta y_{i} x_{i}\\& \;\;\;\; b \gets b + \eta y_{i}\\&step3. 计算 (y_{i}(w \cdot x_{i} + b)的值，若还是小于等于0，则重新更新w,b的值\\&step4. 重复step2,3，直到训练完所有点；\\&step5. 重复step2,3,4完成一次迭代，直到训练集中没有误分类点，得到超分界面方程\\\end{align}</script><p>参考文献：<br>&emsp;[1]<a href="https://blog.csdn.net/yxhlfx/article/details/79093456" target="_blank" rel="noopener">机器学习——15分钟透彻理解感知机</a></p><p></p><hr><p></p><h2 id="Fisher线性分类器"><a href="#Fisher线性分类器" class="headerlink" title="Fisher线性分类器"></a>Fisher线性分类器</h2><p>&emsp;&emsp;判别分析问题，即：根据历史上划分类别的有关资料和某种最优准则，确定一种判别方法，判定一个新的样本归属哪一类。Fisher线性分类器是一种线性判别函数。</p><h3 id="算法计算步骤"><a href="#算法计算步骤" class="headerlink" title="算法计算步骤"></a>算法计算步骤</h3><script type="math/tex;mode=display">\begin{align}&0)有数据集合X=(x_{0},x_{1},...,x_{i}),可分为w^{0},w^{1}两组\\&w^{0}=\begin{bmatrix}x_{11}^{0} & x_{12}^{0} & \cdots & x_{1d}^{0} \\x_{21}^{0} & x_{22}^{0} & \cdots & x_{2d}^{0} \\\vdots &\vdots & \ddots & \vdots \\x_{s1}^{0} & x_{s2}^{0} & \cdots & x_{sd}^{0} \\\end{bmatrix},w^{1}=\begin{bmatrix}x_{11}^{1} & x_{12}^{1} & \cdots & x_{1d}^{1} \\x_{21}^{1} & x_{22}^{1} & \cdots & x_{2d}^{1} \\\vdots &\vdots & \ddots & \vdots \\x_{t1}^{1} & x_{t2}^{1} & \cdots & x_{td}^{1} \\&\end{bmatrix}\\ \\&1)计算每个矩阵每一列的均值：m_{1}=(\bar{x}_{1}^{0},\bar{x}_{2}^{0},\cdots,\bar{x}_{d}^{0}),m_{2}=(\bar{x}_{1}^{1},\bar{x}_{2}^{1},\cdots,\bar{x}_{d}^{1})\\ \\&2)求出新矩阵AB及两组的类内差矩阵(离散度矩阵)S_{1},S_{2}:\\&A=\begin{bmatrix}x_{11}^{0}-\bar{x}_{1}^{0} & x_{12}^{0}-\bar{x}_{2}^{0} & \cdots & x_{1d}^{0}-\bar{x}_{d}^{0} \\x_{21}^{0}-\bar{x}_{1}^{0} & x_{22}^{0}-\bar{x}_{2}^{0} & \cdots & x_{2d}^{0}-\bar{x}_{d}^{0} \\\vdots &\vdots & \ddots & \vdots \\x_{s1}^{0}-\bar{x}_{1}^{0} & x_{s2}^{0}-\bar{x}_{2}^{0} & \cdots & x_{sd}^{0}-\bar{x}_{d}^{0} \\\end{bmatrix},B=\begin{bmatrix}x_{11}^{1}-\bar{x}_{1}^{1} & x_{12}^{1}-\bar{x}_{2}^{1} & \cdots & x_{1d}^{1}-\bar{x}_{d}^{1} \\x_{21}^{1}-\bar{x}_{1}^{1} & x_{22}^{1}-\bar{x}_{2}^{1} & \cdots & x_{2d}^{1}-\bar{x}_{d}^{1} \\\vdots &\vdots & \ddots & \vdots \\x_{t1}^{1}-\bar{x}_{1}^{1} & x_{t2}^{0}-\bar{x}_{2}^{1} & \cdots & x_{td}^{1}-\bar{x}_{d}^{1} \\\end{bmatrix}\\&\quad  S_{1} = A'A,\quad S_{2} = B'B,\quad S=S_{1}+S_{2}\\ \\&3)根据极值点推导，最优判别函数c_{1},c_{2},\cdots,c_{d}为下述方程的解：\\&S\begin{pmatrix}c_{1}\\c_{2}\\\vdots\\c_{d}\end{pmatrix}=\begin{pmatrix}m_{11}-m_{21}\\m_{12}-m_{22}\\\vdots\\m_{1d}-m_{2d}\end{pmatrix}=\begin{pmatrix}\bar{x}_{1}^{0}-\bar{x}_{1}^{1}\\\bar{x}_{2}^{0}-\bar{x}_{2}^{1}\\\vdots\\\bar{x}_{d}^{0}-\bar{x}_{d}^{1}\end{pmatrix},即\begin{pmatrix}c_{1}\\c_{2}\\\vdots\\c_{d}\end{pmatrix}=S^{-1}\begin{pmatrix}\bar{x}_{1}^{0}-\bar{x}_{1}^{1}\\\bar{x}_{2}^{0}-\bar{x}_{2}^{1}\\\vdots\\\bar{x}_{d}^{0}-\bar{x}_{d}^{1}\end{pmatrix}\\&\quad\quad可得判别函数：y=c_{1}x_{1}+c_{2}x_{2}+\cdots+c_{d}x_{d}\\ \\&4)算出A,B两组的代表判别值及临界判别值：\\&\quad \bar{y}_{A} = c_{1}\bar{x}_{1}^{0}+c_{2}\bar{x}_{2}^{0}+\cdots+c_{d}\bar{x}_{d}^{0},\quad\bar{y}_{B} = c_{1}\bar{x}_{1}^{1}+c_{2}\bar{x}_{2}^{1}+\cdots+c_{d}\bar{x}_{d}^{1},\quad \\&\quad y_{0}=\frac{s\bar{y}_{A}+t\bar{y}_{B}}{s+t}\\ \\&5)对新数据做预测判别:\\&\quad 假设有一组新数据(x_{01},x_{02},\cdots,x_{0d}),则有判别值y=c_{1}x_{01}+c_{2}x_{02}+\cdots+c_{d}x_{0d}\\&\quad\quad a)当\bar{y}_{A}>y_{0}时，若y>y_{0},则判别该对象属于组A,若y<y_{0},则判别该对象属于组B;\\&\quad\quad b)当\bar{y}_{B}>y_{0}时，若y>y_{0},则判别该对象属于组B,若y<y_{0},则判别该对象属于组A;\end{align}</script><hr><h2 id="拉格朗日乘子法"><a href="#拉格朗日乘子法" class="headerlink" title="拉格朗日乘子法"></a>拉格朗日乘子法</h2><p>&emsp;&emsp;拉格朗日乘子法主要解决的问题是：在约束条件下取得目标函数的最优解（最值）问题。</p><p>参考文献：<br>&emsp;[1]<a href="https://www.cnblogs.com/sddai/p/5728195.html" target="_blank" rel="noopener">深入理解拉格朗日乘子法（Lagrange Multiplier) 和KKT条件</a></p><hr><h2 id="似然比率方法"><a href="#似然比率方法" class="headerlink" title="似然比率方法"></a>似然比率方法</h2><h3 id="CUSUM方法"><a href="#CUSUM方法" class="headerlink" title="CUSUM方法"></a>CUSUM方法</h3><p>&emsp;&emsp;CUSUM方法的理论基础是序贯分析原理中的序贯概率比检验，这是一种基本的序贯检验法。采用了类似滑动窗口的方式，对变化点进行检测。<br>&emsp;&emsp;其基本思路为：使用一个计数器统计前后数据之间的变化，当数据的均值、方差等发生变化时，统计量会不断累计，为异常事件的发生设定一个阈值，若超过阈值则认定序列的状态发生变化。</p><p>参考文献：<br>&emsp;[1]<a href="https://blog.csdn.net/daimaxiaoxin/article/details/83832759" target="_blank" rel="noopener">CUSUM算法</a><br>&emsp;[2]<a href="https://blog.csdn.net/cai2016/article/details/53289687" target="_blank" rel="noopener">CUSUM算法在变点检测中的应用</a></p><hr><h2 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h2><script type="math/tex;mode=display">sigmoid: \sigma(x) = \frac{1}{1+e^{-x}}\\</script><hr><h1 id="5-tensorflow相关"><a href="#5-tensorflow相关" class="headerlink" title="5 tensorflow相关"></a>5 tensorflow相关</h1><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="理解tf-squeeze"><a href="#理解tf-squeeze" class="headerlink" title="理解tf.squeeze"></a>理解tf.squeeze</h3><ul><li>squeeze(input, axis=None, name=None, squeeze_dims=None)</li><li>该函数返回一个张量，用来三处维度为1 点维度</li><li>如：tf.squeeze(inputs,[2,4]) # 删掉2维和4维</li></ul><h3 id="global-step"><a href="#global-step" class="headerlink" title="global_step"></a>global_step</h3><ul><li>主要在滑动平均，学习率变化等场景下使用</li></ul><h3 id="tf-summary"><a href="#tf-summary" class="headerlink" title="tf.summary"></a>tf.summary</h3><ul><li>够保存训练过程以及参数分布图并在tensorboard显示</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">tf.summary.scalar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用来显示标量信息，其格式为：</span></span><br><span class="line">tf.summary.scalar(tags, values, collections=<span class="keyword">None</span>, name=<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#例如：tf.summary.scalar('mean', mean)</span></span><br><span class="line"><span class="comment">#一般在画loss,accuary时会用到这个函数。</span></span><br><span class="line"><span class="comment">#########</span></span><br><span class="line">tf.summary.histogram</span><br><span class="line"></span><br><span class="line"><span class="comment">#用来显示直方图信息，其格式为：</span></span><br><span class="line">tf.summary.histogram(tags, values, collections=<span class="keyword">None</span>, name=<span class="keyword">None</span>) </span><br><span class="line"><span class="comment">#例如： tf.summary.histogram('histogram', var)</span></span><br><span class="line"><span class="comment">#一般用来显示训练过程中变量的分布情况</span></span><br><span class="line"><span class="comment">#########</span></span><br><span class="line">tf.summary.distribution</span><br><span class="line"><span class="comment">#分布图，一般用于显示weights分布</span></span><br><span class="line"><span class="comment">#########</span></span><br><span class="line">tf.summary.text</span><br><span class="line"><span class="comment">#可以将文本类型的数据转换为tensor写入summary中：</span></span><br><span class="line"><span class="comment">#例如：</span></span><br><span class="line">text = <span class="string">"""/a/b/c\\_d/f\\_g\\_h\\_2017"""</span> summary_op0 = tf.summary.text(<span class="string">'text'</span>, tf.convert_to_tensor(text))</span><br><span class="line"><span class="comment">#########</span></span><br><span class="line">tf.summary.image</span><br><span class="line"><span class="comment"># 输出带图像的probuf，汇总数据的图像的的形式如下： </span></span><br><span class="line"><span class="comment">#' tag /image/0', ' tag /image/1'...，如：input/image/0等。</span></span><br><span class="line"><span class="comment">#格式：</span></span><br><span class="line">tf.summary.image(tag, tensor, max_images=<span class="number">3</span>, collections=<span class="keyword">None</span>, name=Non</span><br><span class="line"><span class="comment">#########</span></span><br><span class="line">tf.summary.audio</span><br><span class="line"><span class="comment"># 展示训练过程中记录的音频 </span></span><br><span class="line"><span class="comment">#########</span></span><br><span class="line">tf.summary.merge_all</span><br><span class="line"><span class="comment"># merge_all 可以将所有summary全部保存到磁盘，以便tensorboard显示。如果没有特殊要求，一般用这一句就可一显示训练时的各种信息了。</span></span><br><span class="line"><span class="comment">#格式：tf.summaries.merge_all(key='summaries')</span></span><br><span class="line"><span class="comment">#########</span></span><br><span class="line">tf.summary.FileWriter</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定一个文件用来保存图。</span></span><br><span class="line"><span class="comment">#格式：tf.summary.FileWritter(path,sess.graph)</span></span><br><span class="line"><span class="comment">#可以调用其add_summary（）方法将训练过程数据保存在filewriter指定的文件中</span></span><br></pre></td></tr></table></figure><h1 id="6-面试准备推荐阅读目录"><a href="#6-面试准备推荐阅读目录" class="headerlink" title="6 面试准备推荐阅读目录"></a>6 面试准备推荐阅读目录</h1><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p><a href="https://blog.csdn.net/xiaoxiaovbb/article/details/80439643" target="_blank" rel="noopener">Java Set集合详解及Set与List的区别</a></p><h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><p><a href="https://www.cnblogs.com/zgq0/p/8780893.html" target="_blank" rel="noopener">进程间的五种通信方式</a></p><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p><a href="https://blog.csdn.net/qq_18657175/article/details/89465240" target="_blank" rel="noopener">什么是最左匹配原则？</a><br><a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">MySQL索引背后的数据结构及算法原理</a><br><a href="https://www.cnblogs.com/y-rong/p/8110596.html" target="_blank" rel="noopener">MyISAM与InnoDB两者之间区别与选择，详细总结，性能对比</a></p><h1 id="To-be-continue…"><a href="#To-be-continue…" class="headerlink" title="To be continue…"></a>To be continue…</h1><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> 待整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 零散知识 </tag>
            
            <tag> 待整理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>j2ee开发相关工具的配置与使用</title>
      <link href="/2018/08/03/j2ee%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/08/03/j2ee%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E5%B7%A5%E5%85%B7%E7%9A%84%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<!-- build time:Tue Nov 05 2019 10:56:58 GMT+0800 (GMT+08:00) --><h1 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h1><a id="more"></a><h1 id="SVN"><a href="#SVN" class="headerlink" title="SVN"></a>SVN</h1><p>略，待补充</p><h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="maven简介"><a href="#maven简介" class="headerlink" title="maven简介"></a>maven简介</h2><ol><li><p>什么是maven？<br>&emsp;&emsp;Maven是基于项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。Maven是跨平台的项目管理工具。主要服务于基于Java平台的项目构建，依赖管理和项目信息管理。<br>Maven主要有两个功能：</p><ol><li>项目构建</li><li>依赖管理</li></ol></li><li><p>什么是构建？<br><img src="/images/j2eeTools/%E6%9E%84%E5%BB%BA.png" alt="构建"></p></li><li><p>项目构建的3种方式</p></li></ol><ul><li><p>Eclipse<br>&emsp;&emsp;手工操作较多，项目的构建过程都是独立的，很难一步完成。比如：编译、测试、部署等。开发时每个人的IDE配置都不同，很容易出现本地代码换个地方编译就出错</p></li><li><p>Ant<br>&emsp;&emsp;Ant只是一个项目构建工具，它没有集成依赖管理。Ant在进行项目构建时，它没有对项目目录结构进行约定，需要手动指定源文件、类文件等目录地址。同时它执行task时，需要显示指定依赖的task，这样会造成大量的代码重复。</p></li><li><p>Maven<br>&emsp;&emsp;Maven不仅是一个项目构建工具，更是一个项目管理工具。它在项目构建工程中，比ant更全面，更灵活。Maven在进行项目构建时，它对项目目录结构拥有约定，知道你的源代码在哪里，类文件应该放到哪里去。它拥有生命周期的概念，maven的生命周期是有顺序的，在执行后面的生命周期的任务时，不需要显示的配置前面任务的生命周期。例如执行 mvn install 就可以自动执行编译，测试，打包等构建过程</p></li></ul><ol><li>maven模型<br><img src="/images/j2eeTools/maven%E6%A8%A1%E5%9E%8B.png" alt="maven模型"></li></ol><h2 id="maven基本结构"><a href="#maven基本结构" class="headerlink" title="maven基本结构"></a>maven基本结构</h2><h3 id="maven的工程结构"><a href="#maven的工程结构" class="headerlink" title="maven的工程结构"></a>maven的工程结构</h3><p>Project<br>|-src<br>| &emsp; |-main<br>| &emsp; | &emsp; |-java —— 存放项目的.java文件<br>| &emsp; | &emsp; |-resources —— 存放项目资源文件，如spring, hibernate配置文件<br>| &emsp; |-test<br>| &emsp;&emsp;&emsp;|-java ——存放所有测试.java文件，如JUnit测试类<br>| &emsp;&emsp;&emsp;|-resources —— 测试资源文件<br>|-target —— 目标文件输出位置例如.class、.jar、.war文件<br>|-pom.xml ——maven项目核心配置文件</p><h3 id="maven的命令"><a href="#maven的命令" class="headerlink" title="maven的命令"></a>maven的命令</h3><p>需要在pom.xml所在目录中执行以下命令。</p><h4 id="Mvn-compile"><a href="#Mvn-compile" class="headerlink" title="Mvn compile"></a>Mvn compile</h4><p>&emsp;&emsp;执行 mvn compile命令，完成编译操作<br>&emsp;&emsp;执行完毕后，会生成target目录，该目录中存放了编译后的字节码文件。</p><h4 id="Mvn-clean"><a href="#Mvn-clean" class="headerlink" title="Mvn clean"></a>Mvn clean</h4><p>&emsp;&emsp;执行 mvn clean命令<br>&emsp;&emsp;执行完毕后，会将target目录删除。</p><h4 id="Mvn-test"><a href="#Mvn-test" class="headerlink" title="Mvn test"></a>Mvn test</h4><p>&emsp;&emsp;执行 mvn test命令，完成单元测试操作<br>&emsp;&emsp;执行完毕后，会在target目录中生成三个文件夹：surefire、surefire-reports（测试报告）、test-classes（测试的字节码文件）</p><h4 id="Mvn-package"><a href="#Mvn-package" class="headerlink" title="Mvn package"></a>Mvn package</h4><p>&emsp;&emsp;执行 mvn package命令，完成打包操作<br>&emsp;&emsp;执行完毕后，会在target目录中生成一个文件，该文件可能是jar、war</p><h4 id="Mvn-install"><a href="#Mvn-install" class="headerlink" title="Mvn install"></a>Mvn install</h4><p>&emsp;&emsp;执行 mvn install命令，完成将打好的jar包安装到本地仓库的操作<br>&emsp;&emsp;执行完毕后，会在本地仓库中出现安装后的jar包，方便其他工程引用</p><h4 id="mvn-clean-compile命令"><a href="#mvn-clean-compile命令" class="headerlink" title="mvn clean compile命令"></a>mvn clean compile命令</h4><p>&emsp;&emsp;cmd 中录入 mvn clean compile命令<br>&emsp;&emsp;组合指令，先执行clean，再执行compile，通常应用于上线前执行，清除测试类</p><h4 id="mvn-clean-test命令"><a href="#mvn-clean-test命令" class="headerlink" title="mvn clean test命令"></a>mvn clean test命令</h4><p>&emsp;&emsp;cmd 中录入 mvn clean test命令<br>&emsp;&emsp;组合指令，先执行clean，再执行test，通常应用于测试环节</p><h4 id="mvn-clean-package命令"><a href="#mvn-clean-package命令" class="headerlink" title="mvn clean package命令"></a>mvn clean package命令</h4><p>&emsp;&emsp;cmd 中录入 mvn clean package命令<br>&emsp;&emsp; 组合指令，先执行clean，再执行package，将项目打包，通常应用于发布前</p><ul><li>执行过程：<br>清理————清空环境<br>编译————编译源码<br>测试————测试源码<br>打包————将编译的非测试类打包</li></ul><h4 id="mvn-clean-install命令"><a href="#mvn-clean-install命令" class="headerlink" title="mvn clean install命令"></a>mvn clean install命令</h4><p>&emsp;&emsp;cmd 中录入 mvn clean install 查看仓库，当前项目被发布到仓库中<br>&emsp;&emsp; 组合指令，先执行clean，再执行install，将项目打包，通常应用于发布前</p><ul><li>执行过程：<br>清理————清空环境<br>编译————编译源码<br>测试————测试源码<br>打包————将编译的非测试类打包<br>部署————将打好的包发布到资源仓库中</li></ul><h2 id="M2eclipse"><a href="#M2eclipse" class="headerlink" title="M2eclipse"></a>M2eclipse</h2><p>&emsp;&emsp;M2Eclipse是eclipse中的maven插件</p><h3 id="安装配置M2Eclipse"><a href="#安装配置M2Eclipse" class="headerlink" title="安装配置M2Eclipse"></a>安装配置M2Eclipse</h3><p><strong>若是版本较老的Eclipse，没有集成maven插件需要进行以下步骤：</strong></p><ol><li>将包中的插件复制到eclipse中的dropins目录中</li><li>在eclipse的“preference”查看eclipse中是否有maven插件</li><li>在maven—&gt;installation中设置maven安装目录</li><li>在maven—&gt;user setting中设置用户配置</li></ol><h3 id="创建maven工程的基本流程"><a href="#创建maven工程的基本流程" class="headerlink" title="创建maven工程的基本流程"></a>创建maven工程的基本流程</h3><ol><li>选择new→maven→Maven Project</li><li>一直next，选择maven的工程骨架，这里我们选择quickstart。<br><img src="/images/j2eeTools/%E9%80%89%E6%8B%A9%E9%AA%A8%E6%9E%B6.png" alt="选择骨架"></li><li>输入GroupId、ArtifactId、Version、Package信息点击finish完成。<br><img src="/images/j2eeTools/gav.png" alt="gav"></li></ol><h2 id="maven核心概念"><a href="#maven核心概念" class="headerlink" title="maven核心概念"></a>maven核心概念</h2><h3 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h3><ol><li><p>坐标的概念<br>&emsp;&emsp;和在平面几何中坐标（x,y）可以标识平面中唯一的一点相似。在maven中坐标就是为了定位一个唯一确定的jar包。Maven世界拥有大量构建，我们需要找一个用来唯一标识一个构建的统一规范拥有了统一规范，就可以把查找工作交给机器。</p></li><li><p>maven坐标的组成<br>groupId:定义当前Maven组织名称<br>artifactId:定义实际项目名称//如cn.itcast.maven<br>version:定义当前项目的当前版本</p></li></ol><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><p>&emsp;&emsp;就是对项目中jar包的管理，可以在pom文件中定义jar包的GAV坐标，管理依赖。<br>依赖声明主要包括如下元素：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">denpendency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h4><p><img src="/images/j2eeTools/maven-%E4%BE%9D%E8%B5%96%E8%8C%83%E5%9B%B4.jpg" alt="maven-依赖范围"></p><p>&emsp;&emsp;其中，依赖范围scope 用来控制依赖和编译，测试，运行的classpath的关系. 主要的是三种依赖关系如下：</p><ol><li>compile： 默认编译依赖范围。对于编译，测试，运行三种classpath都有效</li><li>test：测试依赖范围。只对于测试classpath有效</li><li>provided：已提供依赖范围。对于编译，测试的classpath都有效，但对于运行无效。因为由容器已经提供，例如servlet-api</li><li>runtime:运行时提供。例如:jdbc驱动</li></ol><h4 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h4><ul><li>直接依赖和间接依赖<br>&emsp;&emsp;若B中使用A，C中使用B，则称B是C的直接依赖，而称A是C的间接依赖。<ul><li>C-&gt;B B-&gt;A //C直接依赖B,C间接依赖A<br><img src="/images/j2eeTools/maven-%E9%97%B4%E6%8E%A5%E4%BE%9D%E8%B5%96.png" alt="maven-间接依赖"></li></ul></li></ul><h4 id="依赖范围对传递依赖的影响"><a href="#依赖范围对传递依赖的影响" class="headerlink" title="依赖范围对传递依赖的影响"></a>依赖范围对传递依赖的影响</h4><p><img src="/images/j2eeTools/maven-%E4%BE%9D%E8%B5%96%E5%BD%B1%E5%93%8D.jpg" alt="maven-依赖影响"></p><ul><li><p>左边第一列表示第一直接依赖范围<br>上面第一行表示第二直接依赖范围<br>中间的交叉单元格表示传递性依赖范围。</p></li><li><p><strong>总结：</strong></p><ul><li>当第二依赖的范围是compile的时候，传递性依赖的范围与第一直接依赖的范围一致。<ul><li>当第二直接依赖的范围是test的时候，依赖不会得以传递。</li><li>当第二依赖的范围是provided的时候，只传递第一直接依赖范围也为provided的依赖，且传递性依赖的范围同样为 provided；</li><li>当第二直接依赖的范围是runtime的时候，传递性依赖的范围与第一直接依赖的范围一致，但compile例外，此时传递的依赖范围为runtime；</li></ul></li></ul></li></ul><h4 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h4><ul><li>若直接与间接依赖中包含有同一个坐标不同版本的依赖，以直接依赖的版本为准（就近原则）</li><li>从如下例子可以看出：<ul><li>Maven-first工程依赖log4j-1.2.8版本, Maven-second无依赖，那么maven-third中依赖的是log4j-1.2.8</li><li>若在前面的基础上，Maven-second依赖log4j-1.2.9，那么maven-third中依赖的是log4j-1.2.9</li><li>若直接依赖中包含同一坐标不同版本的资源依赖，以配置文件下方的为准</li></ul></li></ul><h4 id="可选依赖"><a href="#可选依赖" class="headerlink" title="可选依赖"></a>可选依赖</h4><p>&emsp;&emsp;在依赖中添加optional选项决定此依赖是否向下传递，如果是true则不传递，如果是false就传递，默认为false。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">denpendencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-first<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 决定此依赖是否向下传递，true不传递，false传递 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h4><p>&emsp;&emsp;排除依赖包中所包含的依赖关系，不需要添加版本号。如果在本次依赖中有一些多余的jar包也被传递依赖过来，如果想把这些jar包排除的话可以配置exclusions进行排除。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-first<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置要排除的jar包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 此处只需要groupId和artifactId，不需要版本号，</span></span><br><span class="line"><span class="comment">            此配置将排除所有版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-first<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><h4 id="什么是生命周期？"><a href="#什么是生命周期？" class="headerlink" title="什么是生命周期？"></a>什么是生命周期？</h4><p>&emsp;&emsp;Maven生命周期就是为了对所有的构建过程进行抽象和统一。包括项目清理、初始化、编译、打包、测试、部署等几乎所有构建步骤。生命周期可以理解为构建工程的步骤。<br>&emsp;&emsp;在Maven中有三套相互独立的生命周期，请注意这里说的是“三套”，而且“相互独立”，这三套生命周期分别是：</p><ul><li>Clean Lifecycle： 在进行真正的构建之前进行一些清理工作。</li><li>Default Lifecycle： 构建的核心部分，编译，测试，打包，部署等等。</li><li>Site Lifecycle： 生成项目报告，站点，发布站点。</li></ul><p>&emsp;&emsp;再次强调一下它们是相互独立的，你可以仅仅调用clean来清理工作目录，仅仅调用site来生成站点。当然你也可以直接运行 mvn clean install site 运行所有这三套生命周期。</p><h4 id="Maven三大生命周期"><a href="#Maven三大生命周期" class="headerlink" title="Maven三大生命周期"></a>Maven三大生命周期</h4><ol><li>clean：清理项目<br>&emsp;&emsp;每套生命周期都由一组阶段(Phase)组成，我们平时在命令行输入的命令总会对应于一个特定的阶段。比如，运行mvn clean ，这个的clean是Clean生命周期的一个阶段。有Clean生命周期，也有clean阶段。Clean生命周期一共包含了三个阶段：<ul><li>pre-clean 执行一些需要在clean之前完成的工作</li><li>clean 移除所有上一次构建生成的文件</li><li>post-clean 执行一些需要在clean之后立刻完成的工作</li></ul></li></ol><ul><li>&emsp;&emsp;mvn clean 中的clean就是上面的clean，在一个生命周期中，运行某个阶段的时候，它之前的所有阶段都会被运行，也就是说，mvn clean 等同于 mvn pre-clean clean ，如果我们运行 mvn post-clean ，那么 pre-clean，clean 都会被运行。这是Maven很重要的一个规则，可以大大简化命令行的输入。</li></ul><ol><li>default:构建项目<br>&emsp;&emsp;Default生命周期是Maven生命周期中最重要的一个，绝大部分工作都发生在这个生命周期中。这里，只解释一些比较重要和常用的阶段：<ul><li>validate</li><li>initialize</li><li>generate-sources</li><li>process-sources :处理项目主资源文件。一般来说，是对src/main/resource目录的内容进行变量替换等工作后，复制到项目输出的主classpath目录中</li><li>generate-resources</li><li>process-resources 复制并处理资源文件，至目标目录，准备打包。</li><li>compile 编译项目的源代码。一般来说，就是编译src/main/java目录下的java文件到项目输出的主classpath目录中</li><li>process-classes</li><li>generate-test-sources</li><li>process-test-sources ：处理项目测试资源文件，一般来说，是对src/test/resource目录的内容进行变量替换等工作后，复制到项目输出的测试classpath目录中</li><li>generate-test-resources</li><li>process-test-resources 复制并处理资源文件，至目标测试目录。</li><li>test-compile 编译测试源代码。</li><li>process-test-classes</li><li>test 使用合适的单元测试框架运行测试。这些测试代码不会被打包或部署。</li><li>prepare-package</li><li>package 接受编译好的代码，打包成可发布的格式，如 JAR 。</li><li>pre-integration-test</li><li>integration-test</li><li>post-integration-test</li><li>verify</li><li>install 将包安装至本地仓库，以让其它项目依赖。</li><li>deploy 将最终的包复制到远程的仓库，以让其它开发人员与项目共享。</li></ul></li></ol><ul><li>&emsp;&emsp;运行任何一个阶段的时候，它前面的所有阶段都会被运行，这也就是为什么我们运行mvn install 的时候，代码会被编译，测试，打包。此外，Maven的插件机制是完全依赖Maven的生命周期的，因此理解生命周期至关重要。</li></ul><ol><li>site：生成项目站点<br>&emsp;&emsp;Site生命周期：<ul><li>pre-site 执行一些需要在生成站点文档之前完成的工作</li><li>site 生成项目的站点文档</li><li>post-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备</li><li>site-deploy 将生成的站点文档部署到特定的服务器上</li></ul></li></ol><ul><li>&emsp;&emsp;这里经常用到的是site阶段和site-deploy阶段，用以生成和发布Maven站点，这可是Maven相当强大的功能，Manager比较喜欢，文档及统计数据自动生成，很好看。</li></ul><h3 id="Maven插件"><a href="#Maven插件" class="headerlink" title="Maven插件"></a>Maven插件</h3><p>&emsp;&emsp;Maven的核心仅仅定义了抽象的生命周期，具体的任务都是交由插件完成的。每个插件都能实现一个功能，每个功能就是一个插件目标。Maven的生命周期与插件目标相互绑定，以完成某个具体的构建任务。<br>例如compile就是插件maven-compiler-plugin的一个插件目标</p><h4 id="Maven编译插件"><a href="#Maven编译插件" class="headerlink" title="Maven编译插件"></a>Maven编译插件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在dependencies标签后 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 指定编译java1.7版本的源文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Tomcat插件"><a href="#Tomcat插件" class="headerlink" title="Tomcat插件"></a>Tomcat插件</h4><p>&emsp;&emsp;写完以下配置后，可通过tomcat7:run 运行tomcat7（推荐，但是需要添加插件）<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>&emsp;&emsp;继承是为了消除重复，可以把很多相同的配置提取出来。例如：grouptId，version等，具体步骤如下：</p><ol><li>创建父工程（即创建一个packaging为pom的工程）</li><li>创建子工程<br>&emsp;&emsp;创建方式有两种：<br>&emsp;&emsp;&emsp;&emsp;一种是创建新工程为子工程，在创建时设置父工程的GAV。<br>&emsp;&emsp;&emsp;&emsp;一种是修改原有的工程为子工程，在子工程的pom.xml文件中手动添加父工程的GAV。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在pom.xml中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">....</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置父工程gav --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-subt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>父工程可以做到的操作如下：<ol><li>父工程中对依赖进行的配置，在子工程中都会继承此依赖</li><li>使用<code>&lt;dependencyManagement&gt;</code>可以管理依赖的版本号（即若子工程中有相同的依赖，可以不指定版本号，使用父工程中指定的版本号）</li><li>父工程可以使用<code>&lt;properties&gt;&lt;log4j.version&gt;1.2.9&lt;/log4j.version&gt;...&lt;/properties&gt;</code>的形式定义版本号，在<code>&lt;dependencyManagement&gt;</code>中通过<code>&lt;version&gt;${log4j.version}&lt;/version&gt;</code>的形式统一管理版本号</li></ol></li></ul><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>&emsp;&emsp;聚合一般是一个工程拆分成多个模块开发，每个模块是一个独立的工程，但是要是运行时必须把所有模块聚合到一起才是一个完整的工程，此时可以使用maven的聚合工程。<br>例如电商项目中，包括商品模块、订单模块、用户模块等。就可以对不同的模块单独创建工程，最终在打包时，将不同的模块聚合到一起。<br>例如同一个项目中的表现层、业务层、持久层，也可以分层创建不同的工程，最后打包运行时，再聚合到一起。</p><h4 id="创建聚合工程的步骤"><a href="#创建聚合工程的步骤" class="headerlink" title="创建聚合工程的步骤"></a>创建聚合工程的步骤</h4><ol><li>创建聚合工程，打包方式为pom(用来放置子模块)</li><li>通过<code>new- - - Maven Module</code>创建子模块工程（若为表现层要将打包方式设置为war）</li><li>修改聚合工程的pom.xml文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在gav下添加如下内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>模块的artifactId<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    ...  </span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Maven仓库管理"><a href="#Maven仓库管理" class="headerlink" title="Maven仓库管理"></a>Maven仓库管理</h2><h3 id="什么是Maven仓库？"><a href="#什么是Maven仓库？" class="headerlink" title="什么是Maven仓库？"></a>什么是Maven仓库？</h3><p>&emsp;&emsp;用来统一存储所有Maven共享构建的位置就是仓库。根据Maven坐标定义每个构建在仓库中唯一存储路径大致为：groupId/artifactId/version/artifactId-version.packaging</p><h3 id="仓库的分类"><a href="#仓库的分类" class="headerlink" title="仓库的分类"></a>仓库的分类</h3><ol><li>本地仓库(每个用户只有一个本地仓库)<br><code>~/.m2/repository</code></li><li>远程仓库<ul><li>中央仓库：Maven默认的远程仓库，不包含版权资源<a href="http://repo1.maven.org/maven2" target="_blank" rel="noopener">http://repo1.maven.org/maven2</a></li><li>私服：是一种特殊的远程仓库，它是架设在局域网内的仓库<br><img src="/images/j2eeTools/maven-%E4%BB%93%E5%BA%93.png" alt="maven-仓库"></li></ul></li></ol><h3 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h3><h3 id="安装nexus"><a href="#安装nexus" class="headerlink" title="安装nexus"></a>安装nexus</h3><p>&emsp;&emsp;为所有来自中央仓库的构建安装提供本地缓存。下载网站：<a href="http://nexus.sonatype.org/" target="_blank" rel="noopener">http://nexus.sonatype.org/</a><br>&emsp;&emsp;安装版本：nexus-2.7.0-06.war</p><ul><li>第一步：将下载的nexus的war包复制到tomcat下的webapps目录。</li><li>第二步：启动tomcat。nexus将在c盘创建sonatype-work目录【C:\Users\当前用户\sonatype-work\nexus】。<br>目录结构如下：<br><img src="/images/j2eeTools/maven-nexus%E7%BB%93%E6%9E%841.png" alt="maven-nexus结构1"><br><img src="/images/j2eeTools/maven-nexus%E7%BB%93%E6%9E%842.png" alt="maven-nexus结构2"></li></ul><h3 id="nexus的仓库简介"><a href="#nexus的仓库简介" class="headerlink" title="nexus的仓库简介"></a>nexus的仓库简介</h3><p>仓库有4种类型 :</p><ul><li>group(仓库组)：一组仓库的集合</li><li>hosted(宿主)：配置第三方仓库 （包括公司内部私服 ）</li><li>proxy(代理)：私服会对中央仓库进行代理，用户连接私服，私服自动去中央仓库下载jar包或者插件</li><li>virtual(虚拟)：兼容Maven1 版本的jar或者插件</li></ul><p>Nexus的仓库和仓库组介绍:</p><ul><li>3rd party: 一个策略为Release的宿主类型仓库，用来部署无法从公共仓库获得的第三方发布版本构建</li><li>Apache Snapshots: 一个策略为Snapshot的代理仓库，用来代理Apache Maven仓库的快照版本构建</li><li>Central: 代理Maven中央仓库</li><li>Central M1 shadow: 代理Maven1 版本 中央仓库</li><li>Codehaus Snapshots: 一个策略为Snapshot的代理仓库，用来代理Codehaus Maven仓库的快照版本构件</li><li>Releases: 一个策略为Release的宿主类型仓库，用来部署组织内部的发布版本构件</li><li>Snapshots: 一个策略为Snapshot的宿主类型仓库，用来部署组织内部的快照版本构件</li><li>Public Repositories:该仓库组将上述所有策略为Release的仓库聚合并通过一致的地址提供服务</li></ul><h3 id="nexus的使用"><a href="#nexus的使用" class="headerlink" title="nexus的使用"></a>nexus的使用</h3><ol><li><p>访问<br>访问URL: <a href="http://localhost:8080/nexus-2.7.0-06/" target="_blank" rel="noopener">http://localhost:8080/nexus-2.7.0-06/</a><br>默认账号:<br>&emsp;&emsp;用户名： admin<br>&emsp;&emsp;密码： admin123</p></li><li><p>在本地仓库的setting.xml中配置如下(即配置所有构建均从私服下载)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--此处配置所有的构建均从私有仓库中下载 *代表所有，也可以写central --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/nexus-2.7.0-06/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svn </tag>
            
            <tag> maven </tag>
            
            <tag> ssh </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring学习笔记</title>
      <link href="/2018/07/30/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/07/30/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<!-- build time:Tue Nov 05 2019 10:56:58 GMT+0800 (GMT+08:00) --><blockquote><p>Tips:本笔记主要信息来源为传智播客的《<a href="https://www.bilibili.com/video/av14839030/" target="_blank" rel="noopener">60集精通java教程Spring框架开发</a>》,笔记内容为：学习资料 + 个人补充；如有内容或排版方面的错误，欢迎纠正~</p></blockquote><hr><p><strong>内容分布</strong></p><ol><li>spring概念和ioc入门（ioc操作xml配置文件）</li><li>spring的ioc操作（注解）和aop概念</li><li>jdbcTemplate和spring管理事务</li><li>ssh框架整合[开发]<sup><a href="#fn_1" id="reffn_1">1</a></sup></li></ol><hr><a id="more"></a><h1 id="Spring概念与IOC入门"><a href="#Spring概念与IOC入门" class="headerlink" title="Spring概念与IOC入门"></a>Spring概念与IOC入门</h1><h2 id="Spring概念"><a href="#Spring概念" class="headerlink" title="Spring概念"></a>Spring概念</h2><ol><li><p>Spring是开源的轻量级框架</p></li><li><p>Spring的核心包括两个部分<br>&emsp;&emsp;-aop：面向切面编程，扩展功能不是修改源代码实现<br>&emsp;&emsp;-ioc：控制反转<br>&emsp;&emsp;&emsp;&emsp;- 比如有一个类，在类里面有方法（不是静态的方法），调用类里面的方法，创建类的对象，使用对象调用方法，创建类对象的过程，需要new出来对象。在这里，对象的创建不是通过new方式实现，而是交给spring配置创建类对象</p></li><li><p>spring是一站式框架<br>&emsp;&emsp;spring在javaee三层结构中，每一层都提供不同的解决技术<br>&emsp;&emsp;&emsp;&emsp;- web层：springMVC<br>&emsp;&emsp;&emsp;&emsp;- service层：spring的ioc<br>&emsp;&emsp;&emsp;&emsp;- dao层：spring的jdbcTemplate</p></li><li><p>Spring的版本<br>&emsp;&emsp;-hibernate：5.x<br>&emsp;&emsp;-Spring4.x（这里学习的版本）</p></li></ol><h2 id="Spring的ioc操作"><a href="#Spring的ioc操作" class="headerlink" title="Spring的ioc操作"></a>Spring的ioc操作</h2><ol><li>把对象的创建交给spring进行管理</li><li>ioc操作两部分：<br>1）ioc的配置文件方式<br>2）ioc的注解方式</li></ol><h3 id="IOC底层原理"><a href="#IOC底层原理" class="headerlink" title="IOC底层原理"></a>IOC底层原理</h3><ol><li><p>ioc底层原理使用技术<br>（1）xml配置文件<br>（2）dom4j解决xml<br>（3）工厂设计模式<br>（4）反射</p></li><li><p>画图分析ioc实现原理</p></li></ol><p><img src="/images/Spring/1.1.png" alt="1.1"><br><img src="/images/Spring/1.2.png" alt="1.2"></p><h3 id="IOC和DI区别"><a href="#IOC和DI区别" class="headerlink" title="IOC和DI区别"></a>IOC和DI区别</h3><ol><li>IOC: 控制反转，把对象创建交给spring进行配置</li><li>DI: 依赖注入，向类里面的属性中设置值</li><li>关系：依赖注入不能单独存在，需要在ioc基础之上完成操作</li></ol><h2 id="Spring整合web项目原理"><a href="#Spring整合web项目原理" class="headerlink" title="Spring整合web项目原理"></a>Spring整合web项目原理</h2><h3 id="Spring整合web项目原理-1"><a href="#Spring整合web项目原理-1" class="headerlink" title="Spring整合web项目原理"></a>Spring整合web项目原理</h3><ol><li><p>加载spring核心配置文件<br><code>ApplicationContext context = new ClasssPathXmlApplicationContext(&quot;xml路径&quot;)</code>//new 对象;的方法，功能可以实现，效率很低</p></li><li><p>实现思想：把加载配置文件和创建对象过程，在服务器启动时候完成</p></li><li><p>实现原理<br>（1）ServletContext对象<br>（2）监听器<br>（3）具体使用：</p><ul><li>在服务器启动时候，为每个项目创建一个ServletContext对象</li><li>在ServletContext对象创建时候，使用监听器可以具体到ServletContext对象在什么时候创建</li><li>使用监听器监听到ServletContext对象创建时候，<ul><li>加载spring配置文件，把配置文件配置对象创建</li><li>把创建出来的对象放到ServletContext域对象里面（setAttribute方法）</li></ul></li><li>获取对象时候，到ServletContext域得到（getAttribute方法）</li></ul></li></ol><h3 id="Spring整合web项目演示"><a href="#Spring整合web项目演示" class="headerlink" title="Spring整合web项目演示"></a>Spring整合web项目演示</h3><ol><li><p>导包</p><ul><li>struts2相关jar包：<br><img src="/images/Spring/struts2%E7%9B%B8%E5%85%B3jar%E5%8C%85.png" alt="struts2相关jar包"></li><li>Spring相关jar包<br><img src="/images/Spring/Spring%E7%9B%B8%E5%85%B3jar%E5%8C%85.png" alt="Spring相关jar包"></li><li>Spring-web整合包:<br>Spring-web-3.0.7.jar(myeclipse2015可支持的最高版本)</li></ul></li><li><p>代码实现之准备部分</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---UserService.java---</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"service........"</span>);</span><br><span class="line">userDao.add();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> UserDao <span class="title">getUserDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userDao;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//---UserDao.java---</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"dao........"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>代码实现之Spring与struts2配置文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!------ applicationContext.xml ------&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置userDao和userService --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.pinzhi.dao.UserDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.pinzhi.service.UserService"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!------ struts.xml------&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE struts PUBLIC</span></span><br><span class="line"><span class="meta">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="meta">"http://struts.apache.org/dtds/struts-2.3.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">struts</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"spring_web"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"userAction"</span> <span class="attr">class</span>=<span class="string">"cn.pinzhi.action.UserAction"</span>  <span class="attr">method</span>=<span class="string">"execute"</span>&gt;</span><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">struts</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>代码实现之spring与struts2的整合</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------web.xml------</span></span><br><span class="line">&lt;web-app xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span><br><span class="line">    xmlns=<span class="string">"http://java.sun.com/xml/ns/javaee"</span>  </span><br><span class="line">    xsi:schemaLocation=<span class="string">"http://java.sun.com/xml/ns/javaee </span></span><br><span class="line"><span class="string">    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> id=<span class="string">"WebApp_ID"</span> version=<span class="string">"2.5"</span>&gt;</span><br><span class="line">  &lt;display-name&gt;spring_web&lt;/display-name&gt;</span><br><span class="line">  &lt;!-- 重要：配置struts2的核心过滤器 --&gt;</span><br><span class="line">  &lt;!--配置struts2的过滤器，要放到其他过滤器后面，保证其他过滤器可以执行  --&gt;</span><br><span class="line">  &lt;filter&gt;</span><br><span class="line">&lt;filter-name&gt;struts2&lt;/filter-name&gt;</span><br><span class="line">&lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">apache</span>.<span class="title">struts2</span>.<span class="title">dispatcher</span>.<span class="title">ng</span>.<span class="title">filter</span>.<span class="title">StrutsPrepareAndExecuteFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">struts2</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;!-- 指定<span class="title">Spring</span>配置文件的位置 --&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">context</span>-<span class="title">param</span>&gt;</span></span><br><span class="line"><span class="class">  &lt;<span class="title">param</span>-<span class="title">name</span>&gt;<span class="title">contextConfigLocation</span>&lt;/<span class="title">param</span>-<span class="title">name</span>&gt;</span></span><br><span class="line">  &lt;param-value&gt;classpath:bean2.xml&lt;/param-value&gt;</span><br><span class="line">  &lt;/context-param&gt;</span><br><span class="line"> &lt;listener&gt;</span><br><span class="line"> &lt;listener-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">context</span>.<span class="title">ContextLoaderListener</span>&lt;/<span class="title">listener</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class"> &lt;/<span class="title">listener</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">web</span>-<span class="title">app</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//-----<span class="title">UserAction</span>.<span class="title">java</span>----</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"action...."</span>);</span><br><span class="line">ApplicationContext ctx = WebApplicationContextUtils.getWebApplicationContext(ServletActionContext.getServletContext());</span><br><span class="line">UserService userService = (UserService)ctx.getBean(<span class="string">"userService"</span>);</span><br><span class="line">userService.add();</span><br><span class="line"><span class="keyword">return</span> NONE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>验证<br>通过访问 localhost:8080\项目名\UserAction.action 验证</li></ol><h1 id="Spring的bean管理（xml）"><a href="#Spring的bean管理（xml）" class="headerlink" title="Spring的bean管理（xml）"></a>Spring的bean管理（xml）</h1><h2 id="bean实例化的方式"><a href="#bean实例化的方式" class="headerlink" title="bean实例化的方式"></a>bean实例化的方式</h2><p>&emsp;&emsp;在Spring中通过配置文件创建对象</p><ul><li><p>bean实例化的三种方式</p><p>&emsp;&emsp;&emsp;1.使用类的无参构造方法创建（重点）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--   若类中没有无参构造方法，会出现异常。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">“user”</span> <span class="attr">class</span>=<span class="string">“cn.itcast.ioc.User”</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;&emsp;2.使用静态工厂创建</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//创建静态的方法，返回类对象</span></span><br><span class="line"> <span class="comment">//Bean2Factory.java</span></span><br><span class="line">      <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean2Factory</span></span>&#123;</span><br><span class="line">      <span class="comment">//静态的方法，返回Bean2对象</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bean2 <span class="title">getBean2</span><span class="params">()</span></span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">new</span> Bean2();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//applicationContext.xml</span></span><br><span class="line">      &lt;!--  使用静态工厂创建对象 --&gt;</span><br><span class="line">      &lt;bean id=“bean2” class=“cn.itcast.bean.Bean2Factory” factory-method=“getBean2”&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;&emsp;3.使用实例工厂创建</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// Bean3Factory.java</span></span><br><span class="line"><span class="comment">//创建非静态方法，返回类对象</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean3Factory</span></span>&#123;</span><br><span class="line">        <span class="comment">//普通的方法，返回Bean3对象</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Bean3 <span class="title">getBean3</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Bean3();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//applicationContext.xml</span></span><br><span class="line">&lt;!-- 使用实例工厂创建对象--&gt;</span><br><span class="line">&lt;bean id="bean3Factory" class="cn.itcast.bean.Bean3Factory"&gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean id="bean3" factory-bean="bean3Factory" factory-method="getBean3"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h3 id="Bean标签常用属性"><a href="#Bean标签常用属性" class="headerlink" title="Bean标签常用属性"></a>Bean标签常用属性</h3><ol><li>id属性：起名称，id属性值名称任意命名<ul><li>id属性值，不能包含特殊符号</li><li>根据id值得到配置对象</li></ul></li><li>class属性：创建对象所在类的全路径</li><li><p>name属性：功能和id属性一样的，id属性值不能包含特殊符号，但是在name属性值里面可以包含特殊符号</p></li><li><p>scope属性</p><ul><li>singleton：默认值，单例</li><li>prototype：多例</li><li>request：创建对象把对象放到request域里面</li><li>session：创建对象把对象放到session域里面</li><li>globalSession：创建对象把对象放到globalSession里面</li></ul></li></ol><h1 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h1><h2 id="属性注入介绍"><a href="#属性注入介绍" class="headerlink" title="属性注入介绍"></a>属性注入介绍</h2><p>&emsp;&emsp;创建对象时候，向类里面属性里面设置值</p><h2 id="属性注入的方式的三种方式"><a href="#属性注入的方式的三种方式" class="headerlink" title="属性注入的方式的三种方式"></a>属性注入的方式的三种方式</h2><ol><li>使用set方法注入(重点)</li><li>使用有参数构造注入</li><li><p>使用接口注入<br>! 在spring框架里面，支持前两种方式</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//使用有参数构造注入属性</span></span><br><span class="line">&lt;!-- 第一种：构造方法的方式 --&gt; </span><br><span class="line">&lt;bean id=<span class="string">"car"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.itcast.spring.demo4.Car"</span>&gt; </span><br><span class="line">        &lt;constructor-arg name=<span class="string">"name"</span> value=<span class="string">" 保 时 捷 "</span>/&gt;  </span><br><span class="line">        &lt;constructor-arg name="price" value="1000000"/&gt; &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------</span></span><br><span class="line"><span class="comment">//使用set方法注入属性（重点）</span></span><br><span class="line">&lt;!-- 第二种：set方法的方式 --&gt;</span><br><span class="line"> &lt;bean id=<span class="string">"car2"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.itcast.spring.demo4.Car2"</span>&gt;</span><br><span class="line">          &lt;property name=<span class="string">"name"</span> value=<span class="string">" 奇 瑞 QQ"</span>/&gt;</span><br><span class="line">           &lt;property name=<span class="string">"price"</span> value=<span class="string">"40000"</span>/&gt; </span><br><span class="line">   &lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="注入对象类型属性（重点）"><a href="#注入对象类型属性（重点）" class="headerlink" title="注入对象类型属性（重点）"></a>注入对象类型属性（重点）</h2><ul><li>具体实现过程<br>（1）在service里面把dao作为类型属性<br>（2）生成dao类型属性的set方法<br>（3）配置文件中注入关系</li></ul><p>相关代码：<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------------------------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">  <span class="comment">//定义一个service类，dao类为类的属性</span></span><br><span class="line">  <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">  <span class="comment">//在service类中包含dao属性的set方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao=userDao;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------------------------</span></span><br><span class="line">&lt;bean id=<span class="string">"userDao"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.itcast.dao.UserDao"</span> /&gt;</span><br><span class="line">&lt;!-- 注入对象类型的属性 --&gt;</span><br><span class="line"> &lt;bean id=<span class="string">"person"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.itcast.spring.demo4.Person"</span>&gt;</span><br><span class="line">      &lt;property name=<span class="string">"name"</span> value=<span class="string">" 会 希 "</span>/&gt; </span><br><span class="line">      &lt;!-- ref属性：引用另一个 bean的id或name --&gt; </span><br><span class="line">      &lt;property name=<span class="string">"car2"</span> ref=<span class="string">"car2"</span>/&gt; </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p></p><h2 id="P名称空间注入-Spring2-x-版本后提供的方式"><a href="#P名称空间注入-Spring2-x-版本后提供的方式" class="headerlink" title="P名称空间注入(Spring2.x 版本后提供的方式)"></a>P名称空间注入(Spring2.x 版本后提供的方式)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一步:引入p名称空间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第二步:使用p名称空间.</span></span><br><span class="line"><span class="comment">        * 普通属性: p:属性名称=””</span></span><br><span class="line"><span class="comment">        * 对象类型属性: p:属性名称-ref=””</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- p名称空间的属性注入的方式 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car2"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.demo4.Car2"</span> <span class="attr">p:name</span>=<span class="string">" 宝 马 7"</span> <span class="attr">p:price</span>=<span class="string">"1200000"</span>/&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.demo4.Person"</span> <span class="attr">p:name</span>=<span class="string">" 思 聪 "</span> <span class="attr">p:car2-ref</span>=<span class="string">"car2"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpEL-的方式的属性注入-Spring3-x-版本后提供的方式"><a href="#SpEL-的方式的属性注入-Spring3-x-版本后提供的方式" class="headerlink" title="SpEL 的方式的属性注入(Spring3.x 版本后提供的方式)"></a>SpEL 的方式的属性注入(Spring3.x 版本后提供的方式)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpEL：Spring Expression Language. </span></span><br><span class="line"><span class="comment">  语法:#&#123; SpEL &#125;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SpEL的注入的方式 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car2"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.demo4.Car2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#&#123;' 奔 驰 '&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"#&#123;800000&#125;"</span>/&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.demo4.Person"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#&#123;'冠希'&#125;"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"car2"</span> <span class="attr">value</span>=<span class="string">"#&#123;car2&#125;"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"carInfo"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.demo4.CarInfo"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引用了另一个类的属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car2"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.demo4.Car2"</span>&gt;</span> <span class="comment">&lt;!-- &lt;property name="name" value="#&#123;'奔驰'&#125;"/&gt; --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"#&#123;carInfo.carName&#125;"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"price"</span> <span class="attr">value</span>=<span class="string">"#&#123;carInfo.calculatePrice()&#125;"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注入复杂类型属性"><a href="#注入复杂类型属性" class="headerlink" title="注入复杂类型属性"></a>注入复杂类型属性</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring 的复杂类型的注入===================== --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"collectionBean"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.demo5.CollectionBean"</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 数组类型的属性 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arrs"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>会希<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>冠希<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>天一<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入List集合的数据 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>芙蓉<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>如花<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>凤姐<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入Map集合 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"aaa"</span> <span class="attr">value</span>=<span class="string">"111"</span>/&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"bbb"</span> <span class="attr">value</span>=<span class="string">"222"</span>/&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ccc"</span> <span class="attr">value</span>=<span class="string">"333"</span>/&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Properties 的注入 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">props</span>&gt;</span> </span><br><span class="line">             <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span> </span><br><span class="line">             <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Spring的Bean管理（注解）"><a href="#Spring的Bean管理（注解）" class="headerlink" title="Spring的Bean管理（注解）"></a>Spring的Bean管理（注解）</h1><p><strong>注解介绍：</strong></p><ol><li>代码里面特殊标记，使用注解可以完成功能</li><li>注解写法 @注解名称(属性名称=属性值)</li><li>注解使用在类上面，方法上面 和 属性上面</li></ol><h2 id="Spring注解开发准备"><a href="#Spring注解开发准备" class="headerlink" title="Spring注解开发准备"></a>Spring注解开发准备</h2><ol><li><p>导入jar包</p><ul><li><p>基本的jar包<br><img src="/images/Spring/4.1.png" alt="4.1"></p></li><li><p>aop的jar包:Spring-aop-4.3.4.RELEASE.jar</p></li></ul></li><li><p>创建类，创建方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        System.out.println(<span class="string">"Hello Spring..."</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建spring配置文件，引入约束<br>（1）第一天做ioc基本功能，引入约束beans<br>（2）做spring的ioc注解开发，引入新的约束<br><img src="/images/Spring/4.2.png" alt="4.2"></p></li></ol><ol><li>开启注解扫描<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring 的注解开发:组件扫描(类上注解: 可以直接使用属性注入的注解) --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.itheima.spring.demo1"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="注解创建对象"><a href="#注解创建对象" class="headerlink" title="注解创建对象"></a>注解创建对象</h2><ol><li><p>在创建对象的类上面使用注解实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过注解注册Bean</span></span><br><span class="line"><span class="meta">@Component</span>(value=<span class="string">"userDao"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"Hello Spring Annotation..."</span>); </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试方法中获取bean对象</span></span><br><span class="line"><span class="meta">@Test</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext( <span class="string">"applicationContext.xml"</span>); </span><br><span class="line">    UserDao userDao = (UserDao) applicationContext.getBean(<span class="string">"userDao"</span>); userDao.sayHello(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建对象有四个注解（目前这四个注解功能是一样的，都创建对象）<br>（1）@Component<br>（2）@Controller：web层<br>（3）@Service：业务层<br>（4）@Repository：持久层</p></li></ol><p>！ 指定创建对象单实例还是多实例的方法<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注解的方式</span></span><br><span class="line"><span class="meta">@Service</span>(value=<span class="string">"user"</span>)<span class="comment">//注解bean对象</span></span><br><span class="line"><span class="meta">@Scope</span>(value=<span class="string">"prototype"</span>)<span class="comment">//指定对象是多例，默认是单例：Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置文件的方式</span></span><br><span class="line">&lt;bean id="" class="" scope="singleton"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p></p><h2 id="注解注入属性-使用注解注入的方式-可以不用提供-set-方法"><a href="#注解注入属性-使用注解注入的方式-可以不用提供-set-方法" class="headerlink" title="注解注入属性:(使用注解注入的方式,可以不用提供 set 方法.)"></a>注解注入属性:(使用注解注入的方式,可以不用提供 set 方法.)</h2><ul><li>@Value :用于注入普通类型.</li><li>@Autowired :自动装配: * 默认按类型进行装配.<ul><li>按名称注入:</li><li>@Qualifier:强制使用名称注入.</li></ul></li><li>@Resource相当于:<ul><li>@Autowired和@Qualifier一起使用.</li></ul></li></ul><p><strong>示例：</strong><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建dao和service对象</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"userDao"</span>)<span class="comment">//value值可以省略</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(<span class="string">"userService"</span>)<span class="comment">//目前功能与Component相同</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span><span class="comment">//根据类名自动匹配属性</span></span><br><span class="line">  <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">  <span class="meta">@Resource</span>(name=<span class="string">"userDao"</span>)<span class="comment">//通过bean名字匹配属性</span></span><br><span class="line">  <span class="keyword">private</span> UserDao userDao2;</span><br></pre></td></tr></table></figure><p></p><h2 id="配置文件和注解混合使用"><a href="#配置文件和注解混合使用" class="headerlink" title="配置文件和注解混合使用"></a>配置文件和注解混合使用</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//使用配置文件方式实现创建对象操作</span><br><span class="line"><span class="comment">&lt;!-- 配置对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookDao"</span> <span class="attr">class</span>=<span class="string">"xxx.xx.xxx.bookDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookService"</span> <span class="attr">class</span>=<span class="string">"xx.xx.xx.BookService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//使用注解方式注入属性</span><br><span class="line">public class BookService&#123;</span><br><span class="line">  @Resource(name="bookDao")</span><br><span class="line">  private BookDao bookDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><h2 id="AOP相关概念"><a href="#AOP相关概念" class="headerlink" title="AOP相关概念"></a>AOP相关概念</h2><ol><li>AOP：面向切面（方面）编程，在不修改源码的情况下扩展功能</li><li>AOP采取横向抽取机制，取代了传统纵向继承体系重复性代码</li><li>AOP底层使用动态代理实现<ul><li>第一种情况，有接口情况，（JDK 的动态代理 ）使用动态代理创建接口实现类代理对象</li><li>第二种情况，没有接口情况，（ Cglib 的动态代理）使用动态代理创建类的子类代理对象</li></ul></li></ol><h2 id="AOP原理"><a href="#AOP原理" class="headerlink" title="AOP原理"></a>AOP原理</h2><p><img src="/images/Spring/5.1.png" alt="5.1"><br><img src="/images/Spring/5.2.png" alt="5.2"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Cglib 动态代理增强一个类中的方法:</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CustomerDao customerDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCglibProxy</span><span class="params">(CustomerDao customerDao)</span></span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.customerDao = customerDao;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">// 生成代理的方法: </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CustomerDao <span class="title">createProxy</span><span class="params">()</span></span>&#123; </span><br><span class="line">        <span class="comment">// 创建Cglib的核心类: </span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer(); <span class="comment">// 设置父类:</span></span><br><span class="line">         enhancer.setSuperclass(CustomerDao.class); <span class="comment">// 设置回调: </span></span><br><span class="line">         enhancer.setCallback(<span class="keyword">this</span>); <span class="comment">// 生成代理：</span></span><br><span class="line">        CustomerDao customerDaoProxy = (CustomerDao) enhancer.create(); </span><br><span class="line">        <span class="keyword">return</span> customerDaoProxy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"delete"</span>.equals(method.getName()))&#123; </span><br><span class="line">            Object obj = methodProxy.invokeSuper(proxy, args); </span><br><span class="line">            System.out.println(<span class="string">"日志记录================"</span>); </span><br><span class="line">            <span class="keyword">return</span> obj; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> methodProxy.invokeSuper(proxy, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-的基于-AspectJ-的-AOP-开发"><a href="#Spring-的基于-AspectJ-的-AOP-开发" class="headerlink" title="Spring 的基于 AspectJ 的 AOP 开发"></a>Spring 的基于 AspectJ 的 AOP 开发</h2><ul><li><p>在spring里面进行aop操作，使用aspectj实现<br>（1）aspectj不是spring一部分，和spring一起使用进行aop操作<br>（2）Spring2.0以后新增了对AspectJ支持</p></li><li><p>使用aspectj实现aop有两种方式<br>（1）基于aspectj的xml配置<br>（2）基于aspectj的注解方式</p></li></ul><h3 id="AOP操作术语"><a href="#AOP操作术语" class="headerlink" title="AOP操作术语"></a>AOP操作术语</h3><ol><li>Joinpoint(连接点): 类里面可以被增强的方法，这些方法称为连接点</li><li>Pointcut(切入点):所谓切入点是指我们要对哪些Joinpoint进行拦截的定义.</li><li>Advice(通知/增强):所谓通知是指拦截到Joinpoint之后所要做的事情就是通知.<br>通知分为:前置通知；后置通知；异常通知；最终通知；环绕通知(切面要完成的功能)</li><li>Aspect(切面): 是切入点和通知（引介）的结合</li><li>Introduction(引介):引介是一种特殊的通知在不修改类代码的前提下, Introduction可以在运行期为类动态地添加一些方法或Field.</li><li>Target(目标对象):代理的目标对象(要增强的类)</li><li>Weaving(织入):是把增强应用到目标的过程.把advice 应用到 target的过程</li><li>Proxy（代理）:一个类被AOP织入增强后，就产生一个结果代理类</li></ol><h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><p>&emsp;切入点，即实际增强的方法</p><ul><li>表达式格式为<br>execution(&lt;访问修饰符&gt;?&lt;返回类型&gt;&lt;方法名&gt;(&lt;参数&gt;)&lt;异常&gt;)<br>（1）execution(* cn.itcast.aop.Book.add(..))<br>（2）execution(* cn.itcast.aop.Book.*(..))<br>（3）execution(* *.*(..))<br>（4） 匹配所有save开头的方法 execution(* save*(..))</li></ul><h3 id="Spring-使用-AspectJ-进行-AOP-的开发：XML-的方式（-）"><a href="#Spring-使用-AspectJ-进行-AOP-的开发：XML-的方式（-）" class="headerlink" title="Spring 使用 AspectJ 进行 AOP 的开发：XML 的方式（*）"></a>Spring 使用 AspectJ 进行 AOP 的开发：XML 的方式（<strong>*</strong>）</h3><ol><li><p>导包<br>&emsp;除了导入基本的jar包之外，还需要导入aop相关的jar包<br><img src="/images/Spring/5.3.png" alt="5.3"></p></li><li><p>创建配置文件，导入aop约束</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写切面类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspectXml</span> </span>&#123; </span><br><span class="line">  <span class="comment">// 定义前置增强方法 </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123; </span><br><span class="line">      System.out.println(<span class="string">"前置增强==========="</span>); </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="comment">// 定义后置增强方法 </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodName</span><span class="params">()</span></span>&#123; </span><br><span class="line">      System.out.println(<span class="string">"后置增强==========="</span>); </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置切入点</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置切面类 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAspectXml"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.spring.demo3.MyAspectXml"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 进行 aop的配置 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 配置切入点表达式:哪些类的哪些方法需要进行增强 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.itcast.spring.demo3.OrderDao.*(..))"</span> <span class="attr">id</span>=<span class="string">"pointcut1"</span>/&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 配置切面 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myAspectXml"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"methodName"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut1"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写测试程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOrderDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取applicationContext</span></span><br><span class="line">ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean2.xml"</span>);</span><br><span class="line"><span class="comment">//使用接口类取得Bean</span></span><br><span class="line">OrderDao orderDao = (OrderDao)ctx.getBean(<span class="string">"orderDao"</span>);</span><br><span class="line">orderDao.save();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Spring-使用-AspectJ-进行-AOP-的开发：注解的方式"><a href="#Spring-使用-AspectJ-进行-AOP-的开发：注解的方式" class="headerlink" title="Spring 使用 AspectJ 进行 AOP 的开发：注解的方式"></a>Spring 使用 AspectJ 进行 AOP 的开发：注解的方式</h3><ol><li>创建对象</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"book"</span> <span class="attr">class</span>=<span class="string">"cn.pinzhi.aop.Book"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myBook"</span> <span class="attr">class</span>=<span class="string">"cn.pinzhi.aop.MyBook"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>在配置文件中开启aop操作</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启aop操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspect-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在增强类上使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBook</span></span>&#123;</span><br><span class="line">  <span class="comment">//在方法上使用注解完成增强配置</span></span><br><span class="line">  <span class="meta">@Before</span>(value=<span class="string">"execution(* cn.itcast.aop.Book.*(..)）"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Before1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"before..."</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Spring的jdbcTemplate操作"><a href="#Spring的jdbcTemplate操作" class="headerlink" title="Spring的jdbcTemplate操作"></a>Spring的jdbcTemplate操作</h1><h2 id="jdbcTemplate引入"><a href="#jdbcTemplate引入" class="headerlink" title="jdbcTemplate引入"></a>jdbcTemplate引入</h2><ol><li><p>spring框架一站式框架<br>（1）针对javaee三层，每一层都有解决技术<br>（2）在dao层，使用 jdbcTemplate</p></li><li><p>spring对不同的持久化层技术都进行封装<br><img src="/images/Spring/6.1.png" alt="6.1"></p></li><li><p>jdbcTemplate使用和dbutils使用很相似，都数据库进行crud操作</p></li></ol><h2 id="用jdbcTemplate实现增删改"><a href="#用jdbcTemplate实现增删改" class="headerlink" title="用jdbcTemplate实现增删改"></a>用jdbcTemplate实现增删改</h2><ol><li>导入jdbcTemplate使用的jar包<ul><li>spring-jdbc-4.2.4.RELEASE.jar</li><li>spring-tx-4.2.4.RELEASE.jar</li><li>jdbc-connector-xx.jar(依赖包)</li></ul></li><li><p>创建对象，设置数据库信息</p></li><li><p>创建jdbcTemplate对象，设置数据源</p></li><li><p>调用jdbcTemplate对象里面的方法实现操作</p><ul><li>int update(String sql,Object… args);</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//设置数据库信息</span></span><br><span class="line">    DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">    dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">    dataSource.setUrl(<span class="string">"jdbc:mysql://localhost:3306/Spring_day03"</span>);</span><br><span class="line">    dataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">    dataSource.setPassword(<span class="string">"root"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建jdbcTemplate对象，设置数据源</span></span><br><span class="line">    JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用jdbcTemplate里的方法实现操作</span></span><br><span class="line">    <span class="comment">//增</span></span><br><span class="line">    String sql1 = <span class="string">"insert into user values(?,?)"</span>;</span><br><span class="line">    <span class="keyword">int</span> rows1 = jdbcTemplate.update(sql1,<span class="string">"lucy"</span>,<span class="string">"250"</span>);</span><br><span class="line">    System.out.println(rows1);</span><br><span class="line"></span><br><span class="line">     <span class="comment">//删</span></span><br><span class="line">    String sql2 = <span class="string">"delete from user where name=？"</span>;</span><br><span class="line">    <span class="keyword">int</span> rows2 = jdbcTemplate.update(sql1,<span class="string">"lucy"</span>);</span><br><span class="line">    System.out.println(rows2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增改</span></span><br><span class="line">    String sql3 = <span class="string">"update user set password=？where name =?"</span>;</span><br><span class="line">    <span class="keyword">int</span> rows3 = jdbcTemplate.update(sql3,<span class="string">"250"</span>,<span class="string">"lucy"</span>);</span><br><span class="line">    System.out.println(rows3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="用jdbcTemplate实现查询操作"><a href="#用jdbcTemplate实现查询操作" class="headerlink" title="用jdbcTemplate实现查询操作"></a>用jdbcTemplate实现查询操作</h2><h3 id="回顾：jdbc上的查询操作"><a href="#回顾：jdbc上的查询操作" class="headerlink" title="回顾：jdbc上的查询操作"></a>回顾：jdbc上的查询操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"> Connection conn = <span class="keyword">null</span>;</span><br><span class="line"> PrepareStatement pstmt = <span class="keyword">null</span>;</span><br><span class="line"> ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);<span class="comment">//加载驱动</span></span><br><span class="line">    <span class="comment">//创建连接</span></span><br><span class="line">    conn = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/Spring_day03"</span>,<span class="string">"root"</span>,<span class="string">"root"</span>);</span><br><span class="line">    <span class="comment">//编写sql语句</span></span><br><span class="line">    String sql = <span class="string">"seelect * from user where username=?"</span>;</span><br><span class="line">    <span class="comment">//预编译sql</span></span><br><span class="line">    pstmt = conn.prepareStatement(sql);</span><br><span class="line">    <span class="comment">//设置参数</span></span><br><span class="line">    pstmt.setString(<span class="number">1</span>,<span class="string">"lucy"</span>);</span><br><span class="line">    <span class="comment">//执行sql语句</span></span><br><span class="line">    rs = pstmt.excuteQuery();</span><br><span class="line">    <span class="comment">//遍历结果集</span></span><br><span class="line">    <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">        <span class="comment">//得到返回的结果</span></span><br><span class="line">        String username = rs.getString(<span class="string">"username"</span>);</span><br><span class="line">        String password = rs.getString(<span class="string">"password"</span>);</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setPassword(password);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        rs.close();</span><br><span class="line">        pstmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;<span class="keyword">catch</span>()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="jdbcTemplate上的查询操作"><a href="#jdbcTemplate上的查询操作" class="headerlink" title="jdbcTemplate上的查询操作"></a>jdbcTemplate上的查询操作</h3><ul><li>查询的种类<ul><li>返回结果为一个值<br>使用方法：<code>T queryForObject(String sql,Class&lt;t&gt; re quiredType);</code><br>//参数1：sql语句；参数2：返回值类型.class</li><li>返回结果为一个对象<br>使用方法：<code>T queryForObject(String sqlRowMapper&lt;T&gt; rowMapper,Object... args);</code><br>//参数1：sql语句；参数2：RowMapper接口(要自己写);参数3：可变参数</li><li>返回结果为List集合<br>使用方法：<code>List&lt;T&gt; query(String sqlRowMapper&lt;T&gt; rowMapper,Object... args);</code><br>//参数1：sql语句；参数2：RowMapper接口(要自己写);参数3：可变参数</li></ul></li></ul><p><strong>实现过程：</strong><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//创建dataSource（略）</span></span><br><span class="line">  <span class="comment">//创建jdbaTemplate对象</span></span><br><span class="line">  JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//单值查询</span></span><br><span class="line">  String sql = <span class="string">"select count(*) from user"</span>;</span><br><span class="line">  <span class="keyword">int</span> count = jdbcTemplate.queryForObject(sql,Interger.class);</span><br><span class="line">  System.out.println(count);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//对象查询</span></span><br><span class="line">  String sql = <span class="string">"select * from user where name=?"</span>;</span><br><span class="line">  User user = jdbcTemplate.queryForObject(sql,<span class="keyword">new</span> MyRowMapper(),<span class="string">"marry"</span>);</span><br><span class="line">  System.out.println(user);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//对象集合查询</span></span><br><span class="line">    String sql = <span class="string">"select * from user"</span>;</span><br><span class="line">  List&lt;User&gt; users = jdbcTemplate.queryForObject(sql,<span class="keyword">new</span> MyRowMapper());</span><br><span class="line">  System.out.println(users);</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------Mapper.java---------</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRowMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">User</span>&gt;</span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">mapRow</span><span class="params">(ResultSet rs,<span class="keyword">int</span> num)</span><span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">    <span class="comment">//从结果集中得到数据</span></span><br><span class="line">    String username = rs.getString(<span class="string">"username"</span>);</span><br><span class="line">    String password = rs.getString(<span class="string">"password"</span>);</span><br><span class="line">    <span class="comment">//把得到的数据封装到对象中</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUsername(username);</span><br><span class="line">    user.setPassword(password);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="Spring配置连接池和dao使用jdbcTemplate"><a href="#Spring配置连接池和dao使用jdbcTemplate" class="headerlink" title="Spring配置连接池和dao使用jdbcTemplate"></a>Spring配置连接池和dao使用jdbcTemplate</h2><h3 id="Spring配置c3p0连接池"><a href="#Spring配置c3p0连接池" class="headerlink" title="Spring配置c3p0连接池"></a>Spring配置c3p0连接池</h3><ol><li><p>导包<br>c3p0-0.9.2.1.jar<br>mchange-commons-java-0.2.3.4.jar</p></li><li><p>在Spring配置文件中配置连接池</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置c3p0连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入属性值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/Spring_day03"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在dao中使用jdbcTemplate"><a href="#在dao中使用jdbcTemplate" class="headerlink" title="在dao中使用jdbcTemplate"></a>在dao中使用jdbcTemplate</h3><p>配置xml文件后就可以直接使用连接池<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//---- 创建service和dao，配置service和dao对象----</span><br><span class="line">//--------applicationContext.xml-------</span><br><span class="line"><span class="comment">&lt;!-- 注入JdbcTemplate对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframwork.jdbc.core.JdbaTemplate"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入dataSource --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.c3p0.UserDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入jdbcTemplate对象  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">ref</span>=<span class="string">"jdbcTemplate"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.c3p0.UserService"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入dao对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"userDao"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h1 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h1><h2 id="回顾：事务"><a href="#回顾：事务" class="headerlink" title="回顾：事务"></a>回顾：事务</h2><ol><li><p>什么是事务？<br>事务逻辑上的一组操作,组成这组操作的各个逻辑单元,要么一起成功,要么一起失败.</p></li><li><p>事务特性:</p><ul><li>原子性 :强调事务的不可分割.</li><li>一致性 :事务的执行的前后数据的完整性保持一致.</li><li>隔离性 :一个事务执行的过程中,不应该受到其他事务的干扰</li><li>持久性 :事务一旦结束,数据就持久到数据库</li></ul></li><li><p>如果不考虑隔离性引发安全性问题:</p><ul><li>脏读 :一个事务读到了另一个事务的未提交的数据</li><li>不可重复读 :一个事务读到了另一个事务已经提交的 update 的数据导致多次查询结果不一致.</li><li>虚读 :一个事务读到了另一个事务已经提交的 insert 的数据导致多次查询结果不一致.</li></ul></li><li><p>解决读问题:设置事务隔离级别</p><ul><li>未提交读 :脏读，不可重复读，虚读都有可能发生</li><li>已提交读 :避免脏读。但是不可重复读和虚读有可能发生</li><li>可重复读 :避免脏读和不可重复读.但是虚读有可能发生.</li><li>串行化的 :避免以上所有读问题.</li></ul></li></ol><h2 id="Spring事务管理api"><a href="#Spring事务管理api" class="headerlink" title="Spring事务管理api"></a>Spring事务管理api</h2><ul><li>spring事务管理两种方式<ul><li>第一种 编程式事务管理（不用）</li><li>第二种 声明式事务管理<br>（1） 基于xml配置文件实现<br>（2） 基于注解实现</li></ul></li></ul><p>相关代码<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//------基于配置文件实现------</span><br><span class="line">//---Spring配置文件---</span><br><span class="line"><span class="comment">&lt;!-- 第一步：配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=</span></span><br><span class="line"><span class="tag">    "<span class="attr">org.springframework.jdbc.datasource.DataSourceTransactionManager</span>"&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入dataSource --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第二步：配置事务增强(前提：引入tx约束) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txadvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transaction"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 做事务操作 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置进行事务操作的方法匹配规则 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:meyhod</span> <span class="attr">name</span>=<span class="string">"acount*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第三步 配置切面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 切入点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execute(* cn.itcast.service.OrderService.*(..))"</span> <span class="attr">id</span>=<span class="string">"ponitcut1"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 切面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txadvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//------注解方式实现事务------</span><br><span class="line"><span class="comment">&lt;!-- 第一步：配置事务管理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=</span></span><br><span class="line"><span class="tag">    "<span class="attr">org.springframework.jdbc.datasource.DataSourceTransactionManager</span>"&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入dataSource --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第2步：开启事务注解 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第3步：在要使用事务方法所在类上面添加注解 --&gt;</span></span><br><span class="line">@Transactional</span><br><span class="line">public class OrderService&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ol><li>Spring分模块开发（将配置文件中的一部分分出去）<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在主配置文件中，引入其他配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"classpath:user.xml"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="在最后"><a href="#在最后" class="headerlink" title="在最后"></a>在最后</h1><p>&emsp;&emsp;Spring的基本内容已结束，随后还有ssh的整合部分，暂时不会去写，因为hibernate还没学习。谢谢你们的阅读</p><h1 id="To-be-continue…"><a href="#To-be-continue…" class="headerlink" title="To be continue…"></a>To be continue…</h1><hr><blockquote id="fn_1"><sup>1</sup>. qqqqq<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> ssm </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mybatis学习笔记</title>
      <link href="/2018/07/25/mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/07/25/mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<!-- build time:Tue Nov 05 2019 10:56:58 GMT+0800 (GMT+08:00) --><blockquote><p>Tips：本笔记的内容主要来自传智播客mybatis学习视频的相关资料，以及一些实操后的补充。如有内容或排版方面的错误，欢迎纠正~篇幅较长，建议结合目录阅读</p></blockquote><h1 id="Mybatis是什么？"><a href="#Mybatis是什么？" class="headerlink" title="Mybatis是什么？"></a>Mybatis是什么？</h1><p>&emsp;&emsp; MyBatis 本是<a href="http://baike.baidu.com/view/28283.htm" target="_blank" rel="noopener">apache</a>的一个开源项目<a href="http://baike.baidu.com/view/628102.htm" target="_blank" rel="noopener">iBatis</a>, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis，实质上Mybatis对ibatis进行一些改进。<br>&emsp;&emsp; MyBatis是一个优秀的持久层框架，它对jdbc的操作数据库的过程进行封装，使开发者只需要关注 SQL 本身，而不需要花费精力去处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等jdbc繁杂的过程代码。<br><a id="more"></a><br>&emsp;&emsp; Mybatis通过xml或注解的方式将要执行的各种statement（statement、preparedStatemnt、CallableStatement）配置起来，并通过java对象和statement中的sql进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射成java对象并返回。</p><h1 id="分析原生态jdbc程序中存在的问题"><a href="#分析原生态jdbc程序中存在的问题" class="headerlink" title="分析原生态jdbc程序中存在的问题"></a>分析原生态jdbc程序中存在的问题</h1><h2 id="原生态Jdbc程序代码"><a href="#原生态Jdbc程序代码" class="headerlink" title="原生态Jdbc程序代码"></a>原生态Jdbc程序代码</h2><pre><code>//原生态Jdbc程序代码public static void** main(String[] args) {    Connection connection = null;    PreparedStatement preparedStatement = null;    ResultSet resultSet = **null**;    try{        //1、加载数据库驱动       Class.forName(&quot;com.mysql.jdbc.Driver&quot;);        //2、通过驱动管理类获取数据库链接       connection =DriverManager._getConnection_(&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8&quot;, &quot;root&quot;, &quot;root&quot;);       //3、定义sql语句 ?表示占位符       String sql = &quot;select * from user where username = ?&quot;;           //4、获取预处理statement           preparedStatement = connection.prepareStatement(sql);            //5、设置参数，第一个参数为sql语句中参数的序号（从1开始），第二个参数为设置的参数值           preparedStatement.setString(1, &quot;王五&quot;);            //6、向数据库发出sql执行查询，查询出结果集           resultSet = preparedStatement.executeQuery();           //7、遍历查询结果集            while(resultSet.next()){                                      System._out_.println(resultSet.getString(&quot;id&quot;)+&quot;&quot;+resultSet.getString(&quot;username&quot;));           }       } catch(Exception e) {             e.printStackTrace();       }finally{            //8、释放资源            if(resultSet!=null){               try{                   resultSet.close();                } catch(SQLException e) {                   e.printStackTrace();               }           }            if(preparedStatement!=null){              try {                 preparedStatement.close();               } catch(SQLException e) {                      e.printStackTrace();               }             }            if(connection!=null){                try{                   connection.close();                 } catch (SQLException e) {                     e.printStackTrace();                 }             }       }    }</code></pre><h2 id="Jdbc问题总结"><a href="#Jdbc问题总结" class="headerlink" title="Jdbc问题总结"></a>Jdbc问题总结</h2><ul><li>数据库连接频繁开启和关闭，会严重影响数据库的性能。</li><li>代码中存在硬编码，分别是数据库部分的硬编码和SQL执行部分的硬编码。</li></ul><h1 id="Mybatis框架原理（核心）"><a href="#Mybatis框架原理（核心）" class="headerlink" title="Mybatis框架原理（核心）"></a>Mybatis框架原理（核心）</h1><h2 id="框架图"><a href="#框架图" class="headerlink" title="框架图"></a>框架图</h2><p><img src="/images/mybatis/mybatis%E6%A1%86%E6%9E%B6%E5%9B%BE.png" alt="mybatis框架图"></p><h2 id="分析结论"><a href="#分析结论" class="headerlink" title="分析结论"></a>分析结论</h2><ol><li>mybatis配置文件，包括Mybatis全局配置文件和Mybatis映射文件，其中全局配置文件配置了数据源、事务等信息；映射文件配置了SQL执行相关的信息。</li><li>mybatis通过读取配置文件信息（全局配置文件和映射文件），构造出SqlSessionFactory，即会话工厂。</li><li>通过SqlSessionFactory，可以创建SqlSession即会话。Mybatis是通过SqlSession来操作数据库的。</li><li>SqlSession本身不能直接操作数据库，它是通过底层的Executor执行器接口来操作数据库的。Executor接口有两个实现类，一个是普通执行器，一个是缓存执行器（默认）。</li><li>Executor执行器要处理的SQL信息是封装到一个底层对象MappedStatement中。该对象包括：SQL语句、输入参数映射信息、输出结果集映射信息。其中输入参数和输出结果的映射类型包括java的简单类型、HashMap集合对象、POJO对象类型。</li></ol><h1 id="Mybatis入门程序"><a href="#Mybatis入门程序" class="headerlink" title="Mybatis入门程序"></a>Mybatis入门程序</h1><p>Mybatis课程的所有代码程序将通过一个订单商品案例来进行讲解。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>&emsp;&emsp; 对用户信息的增删改查操作。</p><ol><li>根据用户ID来查询用户信息；</li><li>根据用户名称来模糊查询用户信息列表；</li><li>添加用户</li><li>删除用户（练习）</li><li>修改用户（练习）</li></ol><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>Jdk环境：jdk1.7.0_72</li><li>Ide环境：eclipse indigo</li><li>数据库环境：MySQL 5.1</li><li>Mybatis：3.2.7</li></ul><h3 id="数据库初始化"><a href="#数据库初始化" class="headerlink" title="数据库初始化"></a>数据库初始化</h3><h4 id="数据库脚本"><a href="#数据库脚本" class="headerlink" title="数据库脚本"></a>数据库脚本</h4><ol><li>执行sql_table.sql脚本，创建数据库表；</li><li>执行sql_data.sql初始化测试数据。</li></ol><h4 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h4><p>订单商品案例的数据库脚本中，总共包含四张表，其中入门程序只使用user表.<br>用户表的表结构如下：<br><img src="/images/mybatis/4.2user%E8%A1%A8%E7%BB%93%E6%9E%84.png" alt="4.2user表结构"></p><h3 id="下载mybatis"><a href="#下载mybatis" class="headerlink" title="下载mybatis"></a>下载mybatis</h3><p>mybaits的代码由github.com管理，下载地址：<a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/releases</a><br><img src="/images/mybatis/4.2mybatis%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.png" alt="4.2mybatis文件结构"></p><ul><li>Lib：mybatis的依赖包</li><li>Mybatis-3.2.7.jar：mybatis的核心包</li><li>Mybatis-3.2.7.pdf：mybatis的使用指南</li></ul><h2 id="工程搭建（三步）"><a href="#工程搭建（三步）" class="headerlink" title="工程搭建（三步）"></a>工程搭建（三步）</h2><h3 id="第一步：创建java工程"><a href="#第一步：创建java工程" class="headerlink" title="第一步：创建java工程"></a>第一步：创建java工程</h3><p>用eclipse创建一个java工程，jdk使用1.7.0_72。</p><h3 id="第二步：加入jar包"><a href="#第二步：加入jar包" class="headerlink" title="第二步：加入jar包"></a>第二步：加入jar包</h3><p>加入以下四部分jar包，其中junit的jar包，是非必须的。</p><ul><li><p>Mybatis核心包:mybaties-3.2.7.jar</p></li><li><p>Mybatis依赖包<br><img src="/images/mybatis/mybatis%E4%BE%9D%E8%B5%96%E5%8C%85.png" alt="mybatis依赖包"></p></li><li><p>MySQL驱动包: mysql-connector-*</p></li><li><p>Junit单元测试包（单元测试需要的包）:junit-4.9.jar</p></li></ul><h3 id="第三步：添加log4j-properties文件"><a href="#第三步：添加log4j-properties文件" class="headerlink" title="第三步：添加log4j.properties文件"></a>第三步：添加log4j.properties文件</h3><p>Mybatis使用的日志包是log4j的，所以需要添加log4j.properties。<br>在classpath下创建log4j.properties如下：</p><pre><code>   //文件内容可以从mybatis-3.2.7.pdf中拷贝   # Global logging configuration  log4j.rootLogger=DEBUG, stdout      # Console output...  log4j.appender.stdout=org.apache.log4j.ConsoleAppender      log4j.appender.stdout.layout=org.apache.log4j.PatternLayout      log4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n</code></pre><ul><li>日志级别在开发阶段设置成DEBUG，在生产阶段设置成INFO或者ERROR。</li></ul><h2 id="编程步骤"><a href="#编程步骤" class="headerlink" title="编程步骤"></a>编程步骤</h2><ol><li>创建PO类，根据需求创建；</li><li>创建全局配置文件SqlMapConfig.xml；</li><li>编写映射文件；</li><li>加载映射文件，在SqlMapConfig.xml中进行加载；</li><li>编写测试程序，即编写Java代码，连接并操作数据库。</li></ol><p>&emsp; 思路：</p><ul><li>读取配置文件；</li><li>通过SqlSessionFactoryBuilder创建SqlSessionFactory会话工厂。</li><li>通过SqlSessionFactory创建SqlSession。</li><li>调用SqlSession的操作数据库方法。</li><li>关闭SqlSession。</li></ul><h2 id="代码开发"><a href="#代码开发" class="headerlink" title="代码开发"></a>代码开发</h2><h3 id="创建PO类"><a href="#创建PO类" class="headerlink" title="创建PO类"></a>创建PO类</h3><p>&emsp; 创建的po类的属性要和数据库中表的列名一致（如果表中的列名是带有下划线，那么po类中对应的的属性名要采用驼峰式命名）<br>&emsp;User.java类如下：</p><pre><code>//Public class User {    private int id;    private String username;// 用户姓名    private String sex;// 性别    private Date birthday;// 生日    private String address;// 地址get/set……</code></pre><h3 id="创建SqlMapConfig-xml配置文件"><a href="#创建SqlMapConfig-xml配置文件" class="headerlink" title="创建SqlMapConfig.xml配置文件"></a>创建SqlMapConfig.xml配置文件</h3><p>&emsp; 在classpath下，创建SqlMapConfig.xml文件</p><pre><code>//SqlMapConfig.xml（文件头可以从mybatis-3.2.7.pdf文档的2.1.2小节中拷贝）：&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configurationPUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;&lt;!-- 配置mybatis的环境信息 --&gt;&lt;environments default=&quot;development&quot;&gt;    &lt;environment id=&quot;development&quot;&gt;        &lt;!-- 配置JDBC事务控制，由mybatis进行管理 --&gt;        &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;        &lt;!-- 配置数据源，采用dbcp连接池 --&gt;        &lt;dataSource type=&quot;POOLED&quot;&gt;            &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;            &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;amp;characterEncoding=utf8&quot;/&gt;            &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;            &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;        &lt;/dataSource&gt;    &lt;/environment&gt;&lt;/environments&gt;&lt;/configuration&gt;</code></pre><h3 id="需求开发"><a href="#需求开发" class="headerlink" title="需求开发"></a>需求开发</h3><p>&emsp;在classpath下，创建sqlmap文件夹。在sqlmap目录下，创建User.xml映射文件。</p><pre><code>//Mybatis的映射文件头（可以从mybatis-3.2.7.pdf文件中拷贝）：&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper    PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;    &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</code></pre><h4 id="根据用户ID来查询用户信息"><a href="#根据用户ID来查询用户信息" class="headerlink" title="根据用户ID来查询用户信息"></a>根据用户ID来查询用户信息</h4><h5 id="编写映射文件"><a href="#编写映射文件" class="headerlink" title="编写映射文件"></a>编写映射文件</h5><p>&emsp;在User.xml中添加以下代码：</p><pre><code>//&lt;!--     namespace：命名空间，它的作用就是对SQL进行分类化管理，可以理解为SQL隔离    注意：使用mapper代理开发时，namespace有特殊且重要的作用 --&gt;&lt;mapper namespace=&quot;test&quot;&gt;        &lt;!-- 根据用户ID，查询用户信息 --&gt;    &lt;!--         [id]：statement的id，要求在命名空间内唯一          [parameterType]：入参的java类型        [resultType]：查询出的单条结果集对应的java类型        [#{}]： 表示一个占位符?        [#{id}]：表示该占位符待接收参数的名称为id。注意：如果参数为简单类型时，#{}里面的参数名称可以是任意定义     --&gt;    &lt;select id=&quot;findUserById&quot; parameterType=&quot;int&quot; resultType=&quot;cn.itcast.mybatis.po.User&quot;&gt;        SELECT * FROM USER WHERE id = #{id}    &lt;/select&gt;&lt;/mapper&gt;</code></pre><h5 id="加载映射文件"><a href="#加载映射文件" class="headerlink" title="加载映射文件"></a>加载映射文件</h5><pre><code>//在SqlMapConfig.xml中，添加以下代码：&lt;!-- 加载mapper --&gt;&lt;mappers&gt;    &lt;mapper resource=&quot;sqlmap/User.xml&quot;/&gt;&lt;/mappers&gt;</code></pre><h5 id="编写测试程序"><a href="#编写测试程序" class="headerlink" title="编写测试程序"></a>编写测试程序</h5><pre><code>//public class MybatisFirst {                @Test        public void findUserByIdTest() throws Exception{                            //1、读取配置文件            String resource = &quot;SqlMapConfig.xml&quot;;            InputStream inputStream = Resources.getResourceAsStream(resource);            //2、根据配置文件创建SqlSessionFactory            SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);            //3、SqlSessionFactory创建SqlSession            SqlSession sqlSession = sqlSessionFactory.openSession();            //4、SqlSession执行statement，并返回映射结果            //第一个参数：statement的id，建议：namespace.statementId（确保唯一）            //第二个参数：入参的值，它的类型要和映射文件中对应的statement的入参类型一致            User user = sqlSession.selectOne(&quot;findUserById&quot;, 1);                            //打印输出结果集            System.out.println(user);                            //5、关闭SqlSession            sqlSession.close();        }    }</code></pre><h4 id="根据用户名称来模糊查询用户信息列表"><a href="#根据用户名称来模糊查询用户信息列表" class="headerlink" title="根据用户名称来模糊查询用户信息列表"></a>根据用户名称来模糊查询用户信息列表</h4><h5 id="编写映射文件-1"><a href="#编写映射文件-1" class="headerlink" title="编写映射文件"></a>编写映射文件</h5><pre><code>//在User.xml中，添加以下内容&lt;!-- 根据用户名称模糊查询用户信息列表 --&gt;&lt;!--     [${}]：表示拼接SQL字符串    [${value}]：表示要拼接的是简单类型参数。    注意：      1、如果参数为简单类型时，${}里面的参数名称必须为value       2、${}会引起SQL注入，一般情况下不推荐使用。但是有些场景必须使用${}，比如order by ${colname}--&gt;&lt;select id=&quot;findUsersByName&quot; parameterType=&quot;String&quot; resultType=&quot;cn.itcast.mybatis.po.User&quot;&gt;    SELECT * FROM USER WHERE username LIKE &#39;%${value}%&#39;&lt;/select&gt;</code></pre><h5 id="加载映射文件-1"><a href="#加载映射文件-1" class="headerlink" title="加载映射文件"></a>加载映射文件</h5><pre><code>//已配置，此处无需再次配置</code></pre><h5 id="编写测试程序-1"><a href="#编写测试程序-1" class="headerlink" title="编写测试程序"></a>编写测试程序</h5><pre><code>//@Testpublic void findUsersByNameTest() throws Exception {    // 1、读取配置文件    String resource = &quot;SqlMapConfig.xml&quot;;    InputStream inputStream = Resources.getResourceAsStream(resource);    // 2、根据配置文件创建SqlSessionFactory    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);    // 3、SqlSessionFactory创建SqlSession    SqlSession sqlSession = sqlSessionFactory.openSession();    // 4、SqlSession执行statement，并返回映射结果    // 第一个参数：statement的id，建议：namespace.statementId（确保唯一）    // 第二个参数：入参的值，它的类型要和映射文件中对应的statement的入参类型一致    List&lt;User&gt; users = sqlSession.selectList(&quot;test.findUsersByName&quot;, &quot;小明&quot;);    // 打印输出结果集    System.out.println(users);    // 5、关闭SqlSession    sqlSession.close();}</code></pre><h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><h5 id="编写映射文件-2"><a href="#编写映射文件-2" class="headerlink" title="编写映射文件"></a>编写映射文件</h5><pre><code>//&lt;!-- 添加用户 --&gt;&lt;!-- 如果主键的值是通过MySQL自增机制生成的，那么我们此处不需要再显示的给ID赋值 --&gt;&lt;insert id=&quot;insertUser&quot; parameterType=&quot;cn.itcast.mybatis.po.User&quot;&gt;    INSERT INTO USER(username,sex,birthday,address) VALUES (#{username},#{sex},#{birthday},#{address})&lt;/insert&gt;</code></pre><h5 id="加载映射文件-2"><a href="#加载映射文件-2" class="headerlink" title="加载映射文件"></a>加载映射文件</h5><pre><code>//已配置，此处无需再次配置</code></pre><h5 id="编写测试程序-2"><a href="#编写测试程序-2" class="headerlink" title="编写测试程序"></a>编写测试程序</h5><pre><code>//注意：增删改操作要对SqlSession执行commit操作。@Test    public void insertUserTest() throws Exception {        // 1、读取配置文件        String resource = &quot;SqlMapConfig.xml&quot;;        InputStream inputStream = Resources.getResourceAsStream(resource);        // 2、根据配置文件创建SqlSessionFactory        SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder()                .build(inputStream);        // 3、SqlSessionFactory创建SqlSession        SqlSession sqlSession = sqlSessionFactory.openSession();        // 4、SqlSession执行statement，并返回映射结果        //构建user参数，没有赋值的属性采取默认值        User user = new User();        user.setUsername(&quot;东哥1&quot;);        user.setAddress(&quot;清河宝盛西里&quot;);        // 第一个参数：statement的id，建议：namespace.statementId（确保唯一）        // 第二个参数：入参的值，它的类型要和映射文件中对应的statement的入参类型一致        sqlSession.insert(&quot;insertUser&quot;, user);        //切记：增删改操作时，要执行commit操作        sqlSession.commit();        // 5、关闭SqlSession        sqlSession.close();    }</code></pre><h5 id="主键返回之MySQL自增主键"><a href="#主键返回之MySQL自增主键" class="headerlink" title="主键返回之MySQL自增主键"></a>主键返回之MySQL自增主键</h5><p>思路：</p><ul><li>MySQL自增主键，是指在insert之前MySQL会自动生成一个自增的主键。</li><li>我们可以通过MySQL的函数获取到刚插入的自增主键:LAST_INSERT_ID()</li><li>这个函数是在insert语句之后去调用。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//修改映射文件：</span><br><span class="line"><span class="comment">&lt;!-- 添加用户之自增主键返回（selectKey方式） --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">[selectKey标签]：通过select查询来生成主键</span></span><br><span class="line"><span class="comment">[keyProperty]：指定存放生成主键的属性</span></span><br><span class="line"><span class="comment">[resultType]：生成主键所对应的Java类型</span></span><br><span class="line"><span class="comment">[order]：指定该查询主键SQL语句的执行顺序，相对于insert语句</span></span><br><span class="line"><span class="comment">[last_insert_id]：MySQL的函数，要配合insert语句一起使用</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"cn.itcast.mybatis.po.User"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">resultType</span>=<span class="string">"int"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span>&gt;</span></span><br><span class="line">SELECT LAST_INSERT_ID()</span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">INSERT INTO USER(username,sex,birthday,address) VALUES (#&#123;username&#125;,#&#123;sex&#125;,#&#123;birthday&#125;,#&#123;address&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="主键返回之MySQL函数UUID"><a href="#主键返回之MySQL函数UUID" class="headerlink" title="主键返回之MySQL函数UUID"></a>主键返回之MySQL函数UUID</h5><pre><code>// 注意：使用mysql的uuid()函数生成主键，需要修改表中id字段类型为string，长度设置成35位。&lt;!-- 添加用户之UUID主键返回 --&gt;&lt;!--     [uuid]：MySQL的函数，生成的主键是35位的字符串，所以使用它时要修改id的类型为字符类型    注意：        1、此时order采用BEFORE，因为需要先生成出主键，再执行insert语句        2、显式的给ID赋值--&gt;&lt;insert id=&quot;insertUser&quot; parameterType=&quot;cn.itcast.mybatis.po.User&quot;&gt;    &lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;string&quot; order=&quot;BEFORE&quot;&gt;        SELECT UUID()    &lt;/selectKey&gt;    INSERT INTO USER(id,username,sex,birthday,address) VALUES (#{id},#{username},#{sex},#{birthday},#{address})&lt;/insert&gt;</code></pre><h5 id="主键返回之Oracle序列返回"><a href="#主键返回之Oracle序列返回" class="headerlink" title="主键返回之Oracle序列返回"></a>主键返回之Oracle序列返回</h5><pre><code>//&lt;!-- 添加用户之sequence返回 --&gt;&lt;!--     通过Oracle的sequence获取主键方式与MySQL的uuid方式基本一致    --&gt;&lt;insert id=&quot;insertUser&quot; parameterType=&quot;cn.itcast.mybatis.po.User&quot;&gt;    &lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;int&quot; order=&quot;BEFORE&quot;&gt;        SELECT user_seq.nextval() FROM dual    &lt;/selectKey&gt;    INSERT INTO USER(id,username,sex,birthday,address) VALUES (#{id},#{username},#{sex},#{birthday},#{address})&lt;/insert&gt;</code></pre><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><h5 id="编写映射文件-3"><a href="#编写映射文件-3" class="headerlink" title="编写映射文件"></a>编写映射文件</h5><pre><code>//&lt;!-- 根据ID删除用户 --&gt;&lt;delete id=&quot;deleteUser&quot; parameterType=&quot;int&quot;&gt;    DELETE FROM USER WHERE id= #{id}&lt;/delete&gt;</code></pre><h5 id="加载映射文件-3"><a href="#加载映射文件-3" class="headerlink" title="加载映射文件"></a>加载映射文件</h5><pre><code>//已配置，此处无需再次配置。</code></pre><h5 id="编写测试程序-3"><a href="#编写测试程序-3" class="headerlink" title="编写测试程序"></a>编写测试程序</h5><pre><code>//@Testpublic void deleteUserTest() throws Exception{    // 1、读取配置文件    String resource = &quot;SqlMapConfig.xml&quot;;    InputStream inputStream = Resources.getResourceAsStream(resource);    // 2、根据配置文件创建SqlSessionFactory    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder()                .build(inputStream);    // 3、SqlSessionFactory创建SqlSession    SqlSession sqlSession = sqlSessionFactory.openSession();    // 4、SqlSession执行statement，并返回映射结果    // 第一个参数：statement的id，建议：namespace.statementId（确保唯一）    // 第二个参数：入参的值，它的类型要和映射文件中对应的statement的入参类型一致    sqlSession.delete(&quot;test.deleteUser&quot;, 30);                //切记：增删改操作时，要执行commit操作    sqlSession.commit();       // 5、关闭SqlSession    sqlSession.close();}</code></pre><h4 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h4><h5 id="编写映射文件-4"><a href="#编写映射文件-4" class="headerlink" title="编写映射文件"></a>编写映射文件</h5><pre><code>//&lt;!-- 根据传入的用户信息修改用户 --&gt;&lt;update id=&quot;updateUser&quot; parameterType=&quot;cn.itcast.mybatis.po.User&quot;&gt;    UPDATE USER SET username = #{username},sex=#{sex} WHERE id=#{id}&lt;/update&gt;</code></pre><h5 id="加载映射文件-4"><a href="#加载映射文件-4" class="headerlink" title="加载映射文件"></a>加载映射文件</h5><pre><code>//已配置，此处无需再次配置。</code></pre><h5 id="编写测试程序-4"><a href="#编写测试程序-4" class="headerlink" title="编写测试程序"></a>编写测试程序</h5><pre><code>//@Testpublic void updateUserTest() throws Exception{    // 1、读取配置文件    String resource = &quot;SqlMapConfig.xml&quot;;    InputStream inputStream = Resources.getResourceAsStream(resource);    // 2、根据配置文件创建SqlSessionFactory    SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);    // 3、SqlSessionFactory创建SqlSession    SqlSession sqlSession = sqlSessionFactory.openSession();    // 4、SqlSession执行statement，并返回映射结果               //构建user参数，没有赋值的属性采取默认值    User user = new User();    user.setId(28);    user.setUsername(&quot;东哥11&quot;);    user.setAddress(&quot;清河宝盛西里&quot;);                // 第一个参数：statement的id，建议：namespace.statementId（确保唯一）    // 第二个参数：入参的值，它的类型要和映射文件中对应的statement的入参类型一致    sqlSession.update(&quot;test.updateUser&quot;, user);                //切记：增删改操作时，要执行commit操作    sqlSession.commit();        // 5、关闭SqlSession    sqlSession.close();}</code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><h3 id="parameterType和resultType"><a href="#parameterType和resultType" class="headerlink" title="parameterType和resultType"></a>parameterType和resultType</h3><ul><li>parameterType指定输入参数的java类型，可以填写别名或Java类的全限定名。</li><li>resultType指定输出结果的java类型，可以填写别名或Java类的全限定名。</li></ul><h3 id="和"><a href="#和" class="headerlink" title="#{}和${}"></a>#{}和${}</h3><ul><li><h1 id="：相当于预处理中的占位符？。"><a href="#：相当于预处理中的占位符？。" class="headerlink" title="{}：相当于预处理中的占位符？。"></a>{}：相当于预处理中的占位符？。</h1></li><li><h1 id="里面的参数表示接收java输入参数的名称。"><a href="#里面的参数表示接收java输入参数的名称。" class="headerlink" title="{}里面的参数表示接收java输入参数的名称。"></a>{}里面的参数表示接收java输入参数的名称。</h1></li><li><h1 id="可以接受HashMap、简单类型、POJO类型的参数。"><a href="#可以接受HashMap、简单类型、POJO类型的参数。" class="headerlink" title="{}可以接受HashMap、简单类型、POJO类型的参数。"></a>{}可以接受HashMap、简单类型、POJO类型的参数。</h1></li><li>当接受简单类型的参数时，#{}里面可以是value，也可以是其他。</li><li><h1 id="可以防止SQL注入。"><a href="#可以防止SQL注入。" class="headerlink" title="{}可以防止SQL注入。"></a>{}可以防止SQL注入。</h1></li><li>${}：相当于拼接SQL串，对传入的值不做任何解释的原样输出。</li><li>${}会引起SQL注入，所以要谨慎使用。</li><li>${}可以接受HashMap、简单类型、POJO类型的参数。</li><li>当接受简单类型的参数时，${}里面只能是value。</li></ul><h3 id="selectOne和selectList"><a href="#selectOne和selectList" class="headerlink" title="selectOne和selectList"></a>selectOne和selectList</h3><ul><li>selectOne：只能查询0或1条记录，大于1条记录的话，会报错；</li><li>selectList：可以查询0或N条记录</li></ul><h1 id="Mybatis开发dao"><a href="#Mybatis开发dao" class="headerlink" title="Mybatis开发dao"></a>Mybatis开发dao</h1><p>&emsp;&emsp;Mybatis在项目中主要使用的地方就是开发dao（数据访问层），所以下面讲解一下mybatis开发dao的方法。有两种方式：原始dao开发方式、mapper代理开发方式（推荐）。</p><h2 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h2><ol><li>根据用户ID来查询用户信息；</li><li>根据用户名称来模糊查询用户信息列表；</li><li>添加用户；</li></ol><h2 id="原始dao开发方式"><a href="#原始dao开发方式" class="headerlink" title="原始dao开发方式"></a>原始dao开发方式</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>程序员需要写dao接口和dao实现类。</li></ul><h3 id="编程步骤-1"><a href="#编程步骤-1" class="headerlink" title="编程步骤"></a>编程步骤</h3><ol><li>根据需求创建po类</li><li>编写全局配置文件</li><li>根据需求编写映射文件</li><li>加载映射文件</li><li>编写dao接口</li><li>编写dao实现类</li><li>编写测试代码</li></ol><h3 id="程序编写"><a href="#程序编写" class="headerlink" title="程序编写"></a>程序编写</h3><p>&emsp;&emsp;步骤中的1、2、3、4都在入门程序中进行了编写，此处不需要重新编写。</p><h4 id="开发dao接口"><a href="#开发dao接口" class="headerlink" title="开发dao接口"></a>开发dao接口</h4><pre><code>//public interface UserDao {           public User findUserById(int id);//根据用户ID来查询用户信息            public List&lt;User&gt; findUsersByName(String username);//根据用户名称来模糊查询用户信息列表    public void insertUser(User user);//添加用户}</code></pre><h4 id="开发dao实现类"><a href="#开发dao实现类" class="headerlink" title="开发dao实现类"></a>开发dao实现类</h4><h5 id="SqlSession使用范围"><a href="#SqlSession使用范围" class="headerlink" title="SqlSession使用范围"></a>SqlSession使用范围</h5><p>&emsp;&emsp;通过入门程序，大家可以看出，在测试代码中，有大量的重复代码。所以我们第一反应就是想给它抽取出共性的部分，但是SqlSession、SqlSessionFactory、SqlSessionFactoryBuilder有着各自的生命周期，因为这些生命周期的不同，抽取时要有针对性的处理。</p><p>&emsp;&emsp;所以在抽取之前，我们先来了解并总结下它们三个的生命周期。</p><ul><li>SqlSessionFactoryBuilder</li></ul><p>&emsp;&emsp;它的作用只是通过配置文件创建SqlSessionFactory，所以只要创建出SqlSessionFactory，它就可以销毁了。所以说，它的生命周期是在方法之内。</p><ul><li>SqlSessionFactory</li></ul><p>&emsp;&emsp;它的作用是创建SqlSession的工厂，工厂一旦创建，除非应用停掉，不要销毁。<br>所以说它的生命周期是在应用范围内。这里可以通过单例模式来管理它。<br>&emsp;&emsp;在mybatis整合spring之后，最好的处理方式是把SqlSessionFactory交由spring来做单例管理。</p><ul><li>SqlSession</li></ul><p>&emsp;&emsp;SqlSession是一个面向用户（程序员）的接口，它的默认实现是DefaultSqlSession。<br>&emsp;&emsp;Mybatis是通过SqlSession来操作数据库的。SqlSession中不仅包含要处理的SQL信息，还包括一些数据信息，所以说它是线程不安全的，因此它最佳的生命周期范围是在方法体之内。</p><h5 id="Dao实现类代码"><a href="#Dao实现类代码" class="headerlink" title="Dao实现类代码"></a>Dao实现类代码</h5><ul><li>需要向dao实现类中注入SqlSessionFactory，在方法体内通过SqlSessionFactory创建SqlSession</li><li>要注意SqlSession和SqlSessionFactory的生命周期。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//public class UserDaoImpl implements UserDao &#123;    </span></span><br><span class="line"><span class="comment">//注入SqlSessionFactory</span></span><br><span class="line"><span class="keyword">private</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"><span class="comment">//使用构造方法来初始化SqlSessionFactory</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">&#125;    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="comment">//通过工厂，在方法内部获取SqlSession，这样就可以避免线程不安全</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">//返回结果集</span></span><br><span class="line"><span class="keyword">return</span> sqlSession.selectOne(<span class="string">"test.findUserById"</span>, id);</span><br><span class="line">&#125;    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUsersByName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="comment">//通过工厂，在方法内部获取SqlSession，这样就可以避免线程不安全</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">return</span> sqlSession.selectList(<span class="string">"test.findUsersByName"</span>, username);</span><br><span class="line">&#125;    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line"><span class="comment">//通过工厂，在方法内部获取SqlSession，这样就可以避免线程不安全</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">sqlSession.insert(<span class="string">"test.insertUser"</span>, user);</span><br><span class="line">&#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h5><pre><code>//public class UserDaoTest {    //声明全局的SqlSessionFactory    private SqlSessionFactory sqlSessionFactory;            @Before    public void setUp() throws Exception {        // 1、读取配置文件        String resource = &quot;SqlMapConfig.xml&quot;;        InputStream inputStream = Resources.getResourceAsStream(resource);        // 2、根据配置文件创建SqlSessionFactory        sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);    }        @Test    public void testFindUserById() {        //构造UserDao对象        UserDao userDao = new UserDaoImpl(sqlSessionFactory);        //调用UserDao对象的方法        User user = userDao.findUserById(1);                    System.out.println(user);    }       @Test    public void testFindUsersByName() {        //构造UserDao对象        UserDao userDao = new UserDaoImpl(sqlSessionFactory);        //调用UserDao对象的方法        List&lt;User&gt; list = userDao.findUsersByName(&quot;小明&quot;);                    System.out.println(list);    }        @Test    public void testInsertUser() {        //构造UserDao对象        UserDao userDao = new UserDaoImpl(sqlSessionFactory);        //构造User对象        User user = new User();        user.setUsername(&quot;东哥3&quot;);        user.setAddress(&quot;清河宝盛西里3&quot;);                    //调用UserDao对象的方法        userDao.insertUser(user);                    System.out.println(user.getId());    }    }</code></pre><h3 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h3><p>&emsp;原始dao开发存在一些问题：</p><ul><li>存在一定量的模板代码。比如：通过SqlSessionFactory创建SqlSession；调用SqlSession的方法操作数据库；关闭Sqlsession。</li><li>存在一些硬编码。调用SqlSession的方法操作数据库时，需要指定statement的id，这里存在了硬编码。</li></ul><h2 id="Mapper代理开发方式（推荐）"><a href="#Mapper代理开发方式（推荐）" class="headerlink" title="Mapper代理开发方式（推荐）"></a>Mapper代理开发方式（推荐）</h2><p>&emsp;&emsp;Mapper代理的开发方式，程序员只需要编写mapper接口（相当于dao接口）即可。Mybatis会自动的为mapper接口生成动态代理实现类。<br>&emsp;&emsp;不过要实现mapper代理的开发方式，需要遵循一些开发规范。</p><h3 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h3><ol><li>mapper接口的全限定名要和mapper映射文件的namespace的值相同。</li><li>mapper接口的方法名称要和mapper映射文件中的statement的id相同；<br>3.mapper接口的方法参数只能有一个，且类型要和mapper映射文件中statement的parameterType的值保持一致。</li><li>mapper接口的返回值类型要和mapper映射文件中statement的resultType值或resultMap中的type值保持一致；</li></ol><p>&emsp;注：通过规范式的开发mapper接口，可以解决原始dao开发当中存在的问题：</p><ul><li>模板代码已经去掉；</li><li>剩下去不掉的操作数据库的代码，其实就是一行代码。这行代码中硬编码的部分，通过第一和第二个规范就可以解决。</li></ul><h3 id="编程步骤-2"><a href="#编程步骤-2" class="headerlink" title="编程步骤"></a>编程步骤</h3><ol><li>根据需求创建po类</li><li>编写全局配置文件</li><li>根据需求编写映射文件</li><li>加载映射文件</li><li>编写mapper接口</li><li>编写测试代码</li></ol><h3 id="程序编写-1"><a href="#程序编写-1" class="headerlink" title="程序编写"></a>程序编写</h3><p>&emsp;&emsp;步骤中的1、2都在入门程序中进行了编写，此处不需要重新编写。</p><h4 id="编写mapper映射文件"><a href="#编写mapper映射文件" class="headerlink" title="编写mapper映射文件"></a>编写mapper映射文件</h4><p>&emsp;&emsp;重新定义mapper映射文件UserMapper.xml（内容同Users.xml，除了namespace的值），放到新创建的目录mapper下。</p><pre><code>//&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper    PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;    &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;!-- namespace：此时用mapper代理方式，它的值必须等于对应mapper接口的全限定名  --&gt;&lt;mapper namespace=&quot;cn.itcast.mybatis.mapper.UserMapper&quot;&gt;        &lt;!-- 根据用户ID，查询用户信息 --&gt;    &lt;!--         [id]：statement的id，要求在命名空间内唯一          [parameterType]：入参的java类型，可是是简单类型、POJO、HashMap        [resultType]：查询出的单条结果集对应的java类型        [#{}]： 表示一个占位符?        [#{id}]：表示该占位符待接收参数的名称为id。注意：如果参数为简单类型时，#{}里面的参数名称可以是任意定义     --&gt;    &lt;select id=&quot;findUserById&quot; parameterType=&quot;int&quot; resultType=&quot;cn.itcast.mybatis.po.User&quot;&gt;        SELECT * FROM USER WHERE id = #{id}    &lt;/select&gt;                    &lt;!-- 根据用户名称模糊查询用户信息列表 --&gt;    &lt;!--         [${}]：表示拼接SQL字符串，即不加解释的原样输出         [${value}]：表示要拼接的是简单类型参数。         注意：        1、如果参数为简单类型时，${}里面的参数名称必须为value         2、${}会引起SQL注入，一般情况下不推荐使用。但是有些场景必须使用${}，比如order by ${colname}    --&gt;    &lt;select id=&quot;findUsersByName&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;cn.itcast.mybatis.po.User&quot;&gt;        SELECT * FROM USER WHERE username LIKE &#39;%${value}%&#39;    &lt;/select&gt;            &lt;!-- 添加用户之自增主键返回（selectKey方式） --&gt;    &lt;!--         [selectKey标签]：通过select查询来生成主键        [keyProperty]：指定存放生成主键的属性        [resultType]：生成主键所对应的Java类型        [order]：指定该查询主键SQL语句的执行顺序，相对于insert语句，此时选用AFTER        [last_insert_id]：MySQL的函数，要配合insert语句一起使用     --&gt;    &lt;insert id=&quot;insertUser&quot; parameterType=&quot;cn.itcast.mybatis.po.User&quot;&gt;        &lt;selectKey keyProperty=&quot;id&quot; resultType=&quot;int&quot; order=&quot;AFTER&quot;&gt;            SELECT LAST_INSERT_ID()        &lt;/selectKey&gt;        INSERT INTO USER(username,sex,birthday,address) VALUES (#{username},#{sex},#{birthday},#{address})    &lt;/insert&gt;        &lt;/mapper&gt;</code></pre><h4 id="加载mapper映射文件"><a href="#加载mapper映射文件" class="headerlink" title="加载mapper映射文件"></a>加载mapper映射文件</h4><pre><code>//&lt;!-- 加载mapper --&gt;&lt;mappers&gt;    &lt;mapper resource=&quot;sqlmap/User.xml&quot;/&gt;    &lt;mapper resource=&quot;mapper/UserMapper.xml&quot;/&gt;&lt;/mappers&gt;</code></pre><h4 id="编写mapper接口"><a href="#编写mapper接口" class="headerlink" title="编写mapper接口"></a>编写mapper接口</h4><p>&emsp;&emsp;内容同UserDao接口一样：</p><pre><code>//public interface UserMapper {    //根据用户ID来查询用户信息    public User findUserById(int id);    //根据用户名称来模糊查询用户信息列表    public List&lt;User&gt; findUsersByName(String username);    //添加用户    public void insertUser(User user);}</code></pre><h4 id="编写测试代码-1"><a href="#编写测试代码-1" class="headerlink" title="编写测试代码"></a>编写测试代码</h4><pre><code>//public class UserMapperTest {        // 声明全局的SqlSessionFactory    private SqlSessionFactory sqlSessionFactory;        @Before    public void setUp() throws Exception {        // 1、读取配置文件        String resource = &quot;SqlMapConfig.xml&quot;;        InputStream inputStream = Resources.getResourceAsStream(resource);        // 2、根据配置文件创建SqlSessionFactory        sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);    }        @Test    public void testFindUserById() {        // 创建SqlSession        SqlSession sqlSession = sqlSessionFactory.openSession();        // 通过SqlSession，获取mapper接口的动态代理对象        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);        // 调用mapper对象的方法        User user = userMapper.findUserById(1);            System.out.println(user);        // 关闭SqlSession        sqlSession.close();        }        @Test    public void testFindUsersByName() {        // 创建SqlSession        SqlSession sqlSession = sqlSessionFactory.openSession();        // 通过SqlSession，获取mapper接口的动态代理对象        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);        // 调用mapper对象的方法        List&lt;User&gt; list = userMapper.findUsersByName(&quot;小明&quot;);            System.out.println(list);        // 关闭SqlSession        sqlSession.close();    }        @Test    public void testInsertUser() {        // 创建SqlSession        SqlSession sqlSession = sqlSessionFactory.openSession();        // 通过SqlSession，获取mapper接口的动态代理对象        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);                    //构造User对象        User user = new User();        user.setUsername(&quot;东哥4&quot;);        user.setAddress(&quot;清河宝盛西里4&quot;);                    // 调用mapper对象的方法        userMapper.insertUser(user);            System.out.println(user.getId());                    //执行SqlSession的commit操作        sqlSession.commit();        // 关闭SqlSession        sqlSession.close();    }    }</code></pre><h1 id="Mybatis全局配置文件"><a href="#Mybatis全局配置文件" class="headerlink" title="Mybatis全局配置文件"></a>Mybatis全局配置文件</h1><p>&emsp;&emsp;SqlMapConfig.xml是mybatis的全局配置文件，它的名称可以是任意命名的。</p><h2 id="全部配置内容"><a href="#全部配置内容" class="headerlink" title="全部配置内容"></a>全部配置内容</h2><p>&emsp;SqlMapConfig.xml的配置内容和顺序如下（顺序不能乱）：</p><ul><li>Properties（属性）</li><li>Settings（全局参数设置）</li><li>typeAliases（类型别名）</li><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins（插件）</li><li>environments（环境信息集合）</li><li><ul><li>environment（单个环境信息）</li></ul></li><li><ul><li><ul><li>transactionManager（事物）</li></ul></li></ul></li><li><ul><li><ul><li>dataSource（数据源）</li></ul></li></ul></li><li>mappers（映射器）</li></ul><h2 id="常用配置详解"><a href="#常用配置详解" class="headerlink" title="常用配置详解"></a>常用配置详解</h2><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><p>&emsp;SqlMapConfig.xml文件中可以引用java属性文件中的配置信息<br>&emsp;&emsp;db.properties配置信息如下：</p><pre><code>//db.driver=com.mysql.jdbc.Driverdb.url=jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf8db.username=rootdb.password=root</code></pre><p>SqlMapConfig.xml使用properties标签后，如下所示：</p><pre><code>//&lt;!-- 通过properties标签，读取java配置文件的内容 --&gt;&lt;properties resource=&quot;db.properties&quot; /&gt;    &lt;!-- 配置mybatis的环境信息 --&gt;&lt;environments default=&quot;development&quot;&gt;    &lt;environment id=&quot;development&quot;&gt;        &lt;!-- 配置JDBC事务控制，由mybatis进行管理 --&gt;        &lt;transactionManager type=&quot;JDBC&quot;&gt;&lt;/transactionManager&gt;        &lt;!-- 配置数据源，采用dbcp连接池 --&gt;        &lt;dataSource type=&quot;POOLED&quot;&gt;            &lt;property name=&quot;driver&quot; value=&quot;${db.driver}&quot;/&gt;            &lt;property name=&quot;url&quot; value=&quot;${db.url}&quot;/&gt;            &lt;property name=&quot;username&quot; value=&quot;${db.username}&quot;/&gt;            &lt;property name=&quot;password&quot; value=&quot;${db.password}&quot;/&gt;        &lt;/dataSource&gt;    &lt;/environment&gt;&lt;/environments&gt;              </code></pre><p>&emsp;使用${}，可以引用已经加载的java配置文件中的信息。</p><p>&emsp;&emsp;注意：mybatis将按照下面的顺序加载属性：</p><ul><li>Properties标签体内定义的属性首先被读取</li><li>Properties引用的属性会被读取，如果发现上面已经有同名的属性了，那后面会覆盖前面的值</li><li>parameterType接收的值会最后被读取，如果发现上面已经有同名的属性了，那后面会覆盖前面的值</li></ul><p>&emsp;所以说，mybatis读取属性的顺序由高到低分别是：parameterType接收的属性值、properties引用的属性、properties标签内定义的属性。</p><h3 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h3><p>&emsp;&emsp;mybatis全局配置参数，全局参数将会影响mybatis的运行行为。详细如下：</p><p><img src="/images/mybatis/setting%E9%85%8D%E7%BD%AE1.png" alt="setting配置1"><br><img src="/images/mybatis/setting%E9%85%8D%E7%BD%AE2.png" alt="setting配置2"></p><h3 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h3><p>&emsp;&emsp;别名是使用是为了在映射文件中，更方便的去指定入参和结果集的类型，不再用写很长的一段全限定名。</p><h4 id="mybatis支持的别名"><a href="#mybatis支持的别名" class="headerlink" title="mybatis支持的别名"></a>mybatis支持的别名</h4><div class="table-container"><table><thead><tr><th style="text-align:center">别名</th><th style="text-align:center">映射的类型</th></tr></thead><tbody><tr><td style="text-align:center">_byte</td><td style="text-align:center">byte</td></tr><tr><td style="text-align:center">_long</td><td style="text-align:center">long</td></tr><tr><td style="text-align:center">_short</td><td style="text-align:center">short</td></tr><tr><td style="text-align:center">_int</td><td style="text-align:center">int</td></tr><tr><td style="text-align:center">_integer</td><td style="text-align:center">int</td></tr><tr><td style="text-align:center">_double</td><td style="text-align:center">double</td></tr><tr><td style="text-align:center">_float</td><td style="text-align:center">float</td></tr><tr><td style="text-align:center">_boolean</td><td style="text-align:center">boolean</td></tr><tr><td style="text-align:center">string</td><td style="text-align:center">String</td></tr><tr><td style="text-align:center">byte</td><td style="text-align:center">Byte</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">Long</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">Short</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">Integer</td></tr><tr><td style="text-align:center">integer</td><td style="text-align:center">Integer</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">Double</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">Float</td></tr><tr><td style="text-align:center">boolean</td><td style="text-align:center">Boolean</td></tr><tr><td style="text-align:center">date</td><td style="text-align:center">Date</td></tr><tr><td style="text-align:center">decimal</td><td style="text-align:center">BigDecimal</td></tr><tr><td style="text-align:center">bigdecimal</td><td style="text-align:center">BigDecimal</td></tr></tbody></table></div><h4 id="自定义别名"><a href="#自定义别名" class="headerlink" title="自定义别名"></a>自定义别名</h4><p>&emsp;&emsp;SqlMapConfig.xml配置信息如下：</p><pre><code>//&lt;!-- 定义别名 --&gt;    &lt;typeAliases&gt;        &lt;!-- 单个定义别名 --&gt;        &lt;typeAlias type=&quot;cn.itcast.mybatis.po.User&quot; alias=&quot;user&quot;/&gt;                    &lt;!-- 批量定义别名（推荐） --&gt;        &lt;!-- [name]：指定批量定义别名的类包，别名为类名（首字母大小写都可） --&gt;        &lt;package name=&quot;cn.itcast.mybatis.po&quot;/&gt;    &lt;/typeAliases&gt;                </code></pre><h3 id="mappers"><a href="#mappers" class="headerlink" title="mappers"></a>mappers</h3><h4 id="lt-mapper-resource-’’-gt"><a href="#lt-mapper-resource-’’-gt" class="headerlink" title="&lt;mapper resource=’’/&gt;"></a><code>&lt;mapper resource=’’/&gt;</code></h4><p>&emsp;&emsp;使用相对于类路径的资源<br>&emsp;&emsp;&emsp;如：<code>&lt;mapper resource=&quot;sqlmap/User.xml&quot; /&gt;</code></p><h4 id="lt-mapper-url-’’-gt"><a href="#lt-mapper-url-’’-gt" class="headerlink" title="&lt;mapper url=’’/&gt;"></a><code>&lt;mapper url=’’/&gt;</code></h4><p>&emsp;&emsp;使用完全限定路径如：<br>&emsp;&emsp;&emsp;<code>&lt;mapper url=&quot;file:///D:\workspace_spingmvc\mybatis_01\config\sqlmap\User.xml&quot; /&gt;</code></p><h4 id="lt-mapper-class-’’-gt"><a href="#lt-mapper-class-’’-gt" class="headerlink" title="&lt;mapper class=’’/&gt;"></a><code>&lt;mapper class=’’/&gt;</code></h4><p>&emsp;&emsp;使用mapper接口的全限定名<br>&emsp;&emsp;&emsp;如：<code>&lt;mapper class=&quot;cn.itcast.mybatis.mapper.UserMapper&quot;/&gt;</code><br><strong>注意：此种方法要求mapper接口和mapper映射文件要名称相同，且放到同一个目录下;</strong></p><h4 id="（推荐）"><a href="#（推荐）" class="headerlink" title="```（推荐）"></a>`<package name="’’/">``（推荐）</package></h4><p>&emsp;&emsp;注册指定包下的所有映射文件<br>&emsp;&emsp;&emsp;如：<code>&lt;package name=&quot;cn.itcast.mybatis.mapper&quot;/&gt;</code><br><strong>注意：此种方法要求mapper接口和mapper映射文件要名称相同，且放到同一个目录下;</strong></p><h1 id="Mybatis映射文件（核心）"><a href="#Mybatis映射文件（核心）" class="headerlink" title="Mybatis映射文件（核心）"></a>Mybatis映射文件（核心）</h1><h2 id="输入映射"><a href="#输入映射" class="headerlink" title="输入映射"></a>输入映射</h2><h3 id="ParameterType"><a href="#ParameterType" class="headerlink" title="ParameterType"></a>ParameterType</h3><p>&emsp;&emsp;指定输入参数的java类型，可以使用别名或者类的全限定名。它可以接收简单类型、POJO、HashMap。</p><h4 id="传递简单类型"><a href="#传递简单类型" class="headerlink" title="传递简单类型"></a>传递简单类型</h4><p>&emsp;&emsp;参考入门需求：根据用户ID查询用户信息。<br><img src="/images/mybatis/7.1.1.png" alt="7.1.1"></p><h4 id="传递POJO对象"><a href="#传递POJO对象" class="headerlink" title="传递POJO对象"></a>传递POJO对象</h4><p>&emsp;&emsp;参考入门需求：添加用户。<br><img src="/images/mybatis/7.1.2.png" alt="7.1.2"></p><h4 id="传递POJO包装对象"><a href="#传递POJO包装对象" class="headerlink" title="传递POJO包装对象"></a>传递POJO包装对象</h4><p>&emsp;&emsp;开发中通过pojo传递查询条件 ，查询条件是综合的查询条件，不仅包括用户查询条件还包括其它的查询条件（比如将用户购买商品信息也作为查询条件），这时可以使用包装对象传递输入参数。</p><h5 id="需求-2"><a href="#需求-2" class="headerlink" title="需求"></a>需求</h5><p>&emsp;&emsp;综合查询用户信息，需要传入查询条件复杂，比如（用户信息、订单信息、商品信息）。</p><h5 id="定义包装对象"><a href="#定义包装对象" class="headerlink" title="定义包装对象"></a>定义包装对象</h5><p>&emsp;&emsp;一般User.java类要和数据表表字段一致，最好不要在这里面添加其他字段，学习mybatis的逆向工程时，会根据表结构，生成po类，如果在po类中扩展字段，此时会被覆盖掉。<br>&emsp;&emsp;所以针对要扩展的po类，我们需要创建一个扩展类，来继承它。<br><img src="/images/mybatis/7.1.3.png" alt="7.1.3"></p><p>&emsp;&emsp;定义POJO包装类：<br><img src="/images/mybatis/7.1.4.png" alt="7.1.4"></p><h5 id="编写Mapper接口"><a href="#编写Mapper接口" class="headerlink" title="编写Mapper接口"></a>编写Mapper接口</h5><pre><code>//通过包装类来进行复杂的用户信息综合查询    public List&lt;UserExt&gt; findUserList(UserQueryVO userQueryVO);</code></pre><h5 id="编写mapper映射文件-1"><a href="#编写mapper映射文件-1" class="headerlink" title="编写mapper映射文件"></a>编写mapper映射文件</h5><pre><code>&lt;!-- 通过包装类来进行复杂的用户信息综合查询 --&gt;    &lt;select id=_&quot;findUserList&quot;_ parameterType=_&quot;userQueryVO&quot;_ resultType=_&quot;userExt&quot;_&gt;  SELECT * FROM USER WHERE sex=#{userExt.sex} AND username LIKE &#39;%${userExt.username}%&#39;    &lt;/select&gt;  </code></pre><p><strong>注意：入参的类型变为UserQueryVO、结果集的类型变为UserExt，#{}里面的参数变为UserQueryVO对象中的userExt属性的sex和username子属性。</strong></p><h5 id="编写测试代码-2"><a href="#编写测试代码-2" class="headerlink" title="编写测试代码"></a>编写测试代码</h5><pre><code>//@Testpublic void findUserListTest() {    // 创建SqlSession    SqlSession sqlSession = sqlSessionFactory.openSession();    // 通过SqlSession，获取mapper接口的动态代理对象    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);        //构造userQueryVO对象    UserQueryVO userQueryVO = new UserQueryVO();               // 构造UserExt对象    UserExt userExt = new UserExt();    userExt.setSex(&quot;1&quot;);    userExt.setUsername(&quot;小明&quot;);                userQueryVO.setUserExt(userExt);        // 调用mapper对象的方法    List&lt;UserExt&gt; list = userMapper.findUserList(userQueryVO);        System.out.println(list);    // 关闭SqlSession    sqlSession.close();}</code></pre><h4 id="传递HashMap（练习）"><a href="#传递HashMap（练习）" class="headerlink" title="传递HashMap（练习）"></a>传递HashMap（练习）</h4><ul><li>同传递POJO对象一样，map的key相当于pojo的属性。</li></ul><h5 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h5><pre><code>&lt;!-- 传递hashmap综合查询用户信息 --&gt;      &lt;select id=&quot;findUserByHashmap&quot; parameterType=&quot;hashmap&quot; resultType=&quot;user&quot;&gt;     select * from user where id=#{id} and username like &#39;%${username}%&#39;     &lt;/select&gt;          </code></pre><p>&emsp;&emsp; 上边引用的是hashmap的key。</p><h5 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h5><pre><code>Public void testFindUserByHashmap()throws Exception{      //获取session     SqlSession session = sqlSessionFactory.openSession();      //获限mapper接口实例     UserMapper userMapper = session.getMapper(UserMapper.class);      //构造查询条件Hashmap对象     HashMap&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();     map.put(&quot;id&quot;, 1);     map.put(&quot;username&quot;, &quot;管理员&quot;);     //传递Hashmap对象查询用户列表     List&lt;User&gt;list = userMapper.findUserByHashmap(map);      //关闭session     session.close();     }</code></pre><p>&emsp;异常测试：</p><ul><li>传递的map中的key和sql中解析的key不一致。</li><li>测试结果没有报错，只是通过key获取值为空。</li></ul><h2 id="输出映射"><a href="#输出映射" class="headerlink" title="输出映射"></a>输出映射</h2><h3 id="resultType"><a href="#resultType" class="headerlink" title="resultType"></a>resultType</h3><p>&emsp;&emsp;先看下原先resultType作为输出结果映射时，它的特点，如何再把列名改为别名，看看是否还能不能映射成功。</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ul><li>使用resultType进行结果映射时，查询的列名和映射的pojo属性名完全一致，该列才能映射成功。</li><li>如果查询的列名和映射的pojo属性名全部不一致，则不会创建pojo对象；</li><li>如果查询的列名和映射的pojo属性名有一个一致，就会创建pojo对象。</li></ul><h4 id="输出简单类型"><a href="#输出简单类型" class="headerlink" title="输出简单类型"></a>输出简单类型</h4><p>&emsp;&emsp;当输出结果只有一列时，可以使用ResultType指定简单类型作为输出结果类型。</p><h5 id="需求-3"><a href="#需求-3" class="headerlink" title="需求"></a>需求</h5><p>&emsp;&emsp;综合查询用户总数，需要传入查询条件复杂，比如（用户信息、订单信息、商品信息）。</p><h5 id="Mapper映射文件"><a href="#Mapper映射文件" class="headerlink" title="Mapper映射文件"></a>Mapper映射文件</h5><pre><code>&lt;!-- 综合查询用户信息总数，需要传入查询条件复杂，比如（用户信息、订单信息、商品信息） --&gt;    &lt;select id=&quot;findUsersCount&quot; parameterType=&quot;UserQueryVO&quot;     resultType=&quot;int&quot;&gt;     SELECT count(1) FROM USER WHERE sex = #{userExt.sex} AND username LIKE &#39;%${userExt.username}%&#39;    &lt;/select&gt;</code></pre><h5 id="Mapper接口"><a href="#Mapper接口" class="headerlink" title="Mapper接口"></a>Mapper接口</h5><pre><code>//综合查询用户信息总数。学习：resultType输出简单类型    public int findUsersCount(UserQueryVO vo);        </code></pre><h5 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h5><pre><code>//@Testpublic void testFindUsersCount() {    // 创建SqlSession    SqlSession sqlSession = sqlSessionFactory.openSession();    // 通过SqlSession，获取mapper接口的动态代理对象    UserMapper userMapper = sqlSession.getMapper(UserMapper.class);        //构造userQueryVO对象    UserQueryVO userQueryVO = new UserQueryVO();                // 构造UserExt对象    UserExt userExt = new UserExt();    userExt.setSex(&quot;1&quot;);    userExt.setUsername(&quot;小明&quot;);               userQueryVO.setUserExt(userExt);        int count = mapper.findUsersCount(userQueryVO);    System.out.println(count);    // 关闭SqlSession    sqlSession.close();}</code></pre><h4 id="输出POJO单个对象和列表"><a href="#输出POJO单个对象和列表" class="headerlink" title="输出POJO单个对象和列表"></a>输出POJO单个对象和列表</h4><p>&emsp;<strong>注意：输出单个pojo对象和pojo列表（盛放pojo对象）时，mapper映射文件中的resultType的类型是一样的，mapper接口的方法返回值不同。</strong></p><h5 id="Mapper映射文件-1"><a href="#Mapper映射文件-1" class="headerlink" title="Mapper映射文件"></a>Mapper映射文件</h5><p>&emsp;&emsp;Mapper映射文件是同一个</p><pre><code>&lt;select id=&quot;findUsersByName&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;cn.itcast.mybatis.po.User&quot;&gt;     SELECT * FROM USER WHERE username LIKE &#39;%${value}%&#39;    &lt;/select&gt;</code></pre><h5 id="Mapper接口-1"><a href="#Mapper接口-1" class="headerlink" title="Mapper接口"></a>Mapper接口</h5><p>&emsp;&emsp;下面看下mapper接口的不同之处</p><ol><li>输出单个pojo对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//根据用户名称来模糊查询用户信息  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findUsersByName</span><span class="params">(String username)</span></span>;</span><br></pre></td></tr></table></figure><ol><li>输出pojo列表</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据用户名称来模糊查询用户信息列表    </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUsersByName</span><span class="params">(String username)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>总结：同样的mapper映射文件，返回单个对象和对象列表时，mapper接口在生成动态代理的时候，会根据返回值的类型，决定调用selectOne方法还是selectList方法。</li></ul><h3 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h3><p>&emsp;&emsp;resultMap可以进行高级结果映射（一对一、一对多映射）。</p><h4 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h4><p>&emsp;&emsp;如果查询出来的列名和属性名不一致，通过定义一个resultMap将列名和pojo属性名之间作一个映射关系。</p><ol><li>定义resultMap</li><li>使用resultMap作为statement的输出映射类型。</li></ol><h4 id="需求-4"><a href="#需求-4" class="headerlink" title="需求"></a>需求</h4><p>&emsp;&emsp;把下面SQL的输出结果集进行映射</p><pre><code>SELECT id id_,username username_,sex sex_ FROM USER WHERE id = 1</code></pre><h4 id="Mapper映射文件-2"><a href="#Mapper映射文件-2" class="headerlink" title="Mapper映射文件"></a>Mapper映射文件</h4><p>&emsp;&emsp;定义resultMap：</p><pre><code>&lt;!-- 定义resultMap --&gt;    &lt;!--     [id]：定义resultMap的唯一标识    [type]：定义该resultMap最终映射的pojo对象     [id标签]：映射结果集的唯一标识列，如果是多个字段联合唯一，则定义多个id标签     [result标签]：映射结果集的普通列     [column]：SQL查询的列名，如果列有别名，则该处填写别名     [property]：pojo对象的属性名    --&gt;    &lt;resultMap type=&quot;user&quot; id=&quot;userResultMap&quot;&gt;      &lt;id column=&quot;id_&quot; property=&quot;id&quot;/&gt;      &lt;result column=&quot;username_&quot; property=&quot;username&quot;/&gt;      &lt;result column=&quot;sex_&quot; property=&quot;sex&quot;/&gt;    &lt;/resultMap&gt;</code></pre><p>&emsp;&emsp;定义statement：</p><pre><code>&lt;!-- 根据ID查询用户信息（学习resultMap） --&gt;    &lt;select id=&quot;findUserByIdResultMap&quot; parameterType=&quot;int&quot; resultMap=&quot;userResultMap&quot;&gt;    SELECT id id_,username username_,sex sex_ FROM USER WHERE id = #{id}    &lt;/select&gt;</code></pre><h4 id="Mapper接口定义"><a href="#Mapper接口定义" class="headerlink" title="Mapper接口定义"></a>Mapper接口定义</h4><pre><code>  //根据ID查询用户信息（学习resultMap）  public User findUserByIdResultMap(int id);</code></pre><ul><li>定义Statement使用resultMap映射结果集时，Mapper接口定义方法的返回值类型为mapper映射文件中resultMap的type类型。</li></ul><h4 id="测试代码-2"><a href="#测试代码-2" class="headerlink" title="测试代码"></a>测试代码</h4><pre><code>@Test    public  void findUserByIdResultMapTest() {      // 创建SqlSession    SqlSession sqlSession = sqlSessionFactory.openSession();      // 通过SqlSession，获取mapper接口的动态代理对象     UserMapper userMapper = sqlSession.getMapper(UserMapper.class);      // 调用mapper对象的方法     User user = userMapper.findUserByIdResultMap(1);     System._out_.println(user);      // 关闭SqlSession    sqlSession.close();</code></pre><h2 id="动态SQL（重点）"><a href="#动态SQL（重点）" class="headerlink" title="动态SQL（重点）"></a>动态SQL（重点）</h2><p>&emsp;&emsp;通过Mybatis提供的各种动态标签实现动态拼接sql，使得mapper映射文件在编写SQL时更加灵活，方便。常用动态SQL标签有：if、where、foreach；</p><h3 id="If和where"><a href="#If和where" class="headerlink" title="If和where"></a>If和where</h3><ul><li><p>If标签：作为判断入参来使用的，如果符合条件，则把if标签体内的SQL拼接上。<br><strong>注意：用if进行判断是否为空时，不仅要判断null，也要判断空字符串‘’；</strong></p></li><li><p>Where标签：会去掉条件中的第一个and符号。</p></li></ul><h4 id="需求-5"><a href="#需求-5" class="headerlink" title="需求"></a>需求</h4><p>&emsp;&emsp;用户信息综合查询列表和用户信息综合查询总数这两个statement的定义使用动态SQL。</p><h4 id="映射文件-1"><a href="#映射文件-1" class="headerlink" title="映射文件"></a>映射文件</h4><pre><code>&lt;!-- 综合查询用户信息，需要传入查询条件复杂，比如（用户信息、订单信息、商品信息） --&gt;   &lt;select id=&quot;findUsersByQueryVO&quot; parameterType=&quot;cn.itcast.mybatis.po.QueryUserVO&quot;     resultType=&quot;User&quot;&gt;    SELECT * FROM USER      &lt;where&gt;      &lt;if test=&quot;userExt != null&quot;&gt;      &lt;if test=&quot;userExt.sex != null and userExt.sex != &#39;&#39;&quot;&gt;     AND sex = #{userExt.sex}      &lt;/if&gt;      &lt;if test=&quot;userExt.username != null and userExt.username != &#39;&#39;&quot;&gt;     AND username LIKE &#39;%${userExt.username}%&#39;      &lt;/if&gt;      &lt;/if&gt;      &lt;/where&gt;    &lt;/select&gt;    &lt;!-- 综合查询用户信息总数，需要传入查询条件复杂，比如（用户信息、订单信息、商品信息） --&gt;    &lt;select id=&quot;findUsersCount&quot; parameterType=&quot;QueryUserVO&quot;    resultType=&quot;int&quot;&gt;     SELECT count(1) FROM USER      &lt;where&gt;      &lt;if test=&quot;userExt != null&quot;&gt;      &lt;if test=&quot;userExt.sex != null and userExt.sex != &#39;&#39;&quot;&gt;    AND sex = #{userExt.sex}      &lt;/if&gt;      &lt;if test=&quot;userExt.username != null and userExt.username != &#39;&#39;&quot;&gt;     AND username LIKE &#39;%${userExt.username}%&#39;      &lt;/if&gt;      &lt;/if&gt;      &lt;/where&gt;    &lt;/select&gt;</code></pre><h4 id="Mapper接口-2"><a href="#Mapper接口-2" class="headerlink" title="Mapper接口"></a>Mapper接口</h4><pre><code>//通过包装类来进行复杂的用户信息综合查询    public List&lt;UserExt&gt; findUserList(UserQueryVO userQueryVO);    //综合查询用户总数    public int findUsersCount(UserQueryVO userQueryVO);</code></pre><h4 id="测试代码-3"><a href="#测试代码-3" class="headerlink" title="测试代码"></a>测试代码</h4><p>&emsp;&emsp;不传用户名：<br><img src="/images/mybatis/7.3.1.png" alt="7.3.1"></p><p>&emsp;&emsp;输出的SQL如下（也不包含用户名）：<br><img src="/images/mybatis/7.3.2.png" alt="7.3.2"></p><p>&emsp;通过测试可以得知，打印出的SQL语句确实会随着条件的满足情况而不一样。</p><h3 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h3><p>&emsp;&emsp;Mybatis提供了SQL片段的功能，可以提高SQL的可重用性。</p><h4 id="定义SQL片段"><a href="#定义SQL片段" class="headerlink" title="定义SQL片段"></a>定义SQL片段</h4><p>&emsp;&emsp;使用sql标签来定义一个SQL片段：</p><pre><code>//&lt;!-- 定义SQL片段 --&gt;    &lt;!--     [sql标签]：定义一个SQL片段     [id]：SQL片段的唯一标识      建议：     1、SQL片段中的内容最好是以单表来定义     2、如果是查询字段，则不要写上SELECT     3、如果是条件语句，则不要写上WHERE     --&gt;    &lt;sql id=_&quot;select_user_where&quot;_&gt;      &lt;if test=_&quot;userExt != null&quot;_&gt;      &lt;if test=_&quot;userExt.sex != null and userExt.sex != &#39;&#39;&quot;_&gt;     AND sex = #{userExt.sex}      &lt;/if&gt;      &lt;if test=_&quot;userExt.username != null and userExt.username != &#39;&#39;&quot;_&gt;     AND username LIKE &#39;%${userExt.username}%&#39;      &lt;/if&gt;      &lt;/if&gt;    &lt;/sql&gt;</code></pre><h4 id="引用SQL片段"><a href="#引用SQL片段" class="headerlink" title="引用SQL片段"></a>引用SQL片段</h4><p>&emsp;&emsp;使用<code>&lt;include refid=’’ /&gt;</code> 来引用SQL片段：</p><pre><code>//&lt;!-- 根据用户id来查询用户信息（使用SQL片段） --&gt;    &lt;!--     [include标签]：引用已经定义好的SQL片段     [refid]：引用的SQL片段id    --&gt;    &lt;select id=_&quot;findUserList&quot;_ parameterType=_&quot;userQueryVO&quot;_ resultType=_&quot;userExt&quot;_&gt;    SELECT * FROM USER    &lt;where&gt;      &lt;include refid=_&quot;select_user_where&quot;_/&gt;     &lt;/where&gt;    &lt;/select&gt;    &lt;!-- 综合查询用户信息总数，需要传入查询条件复杂，比如（用户信息、订单信息、商品信息） --&gt;    &lt;select id=_&quot;findUsersCount&quot;_ parameterType=_&quot;QueryUserVO&quot;_     resultType=_&quot;int&quot;_&gt;     SELECT count(1) FROM USER      &lt;where&gt;      &lt;include refid=_&quot;select_user_where&quot;_/&gt;      &lt;/where&gt;    &lt;/select&gt;</code></pre><h3 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h3><p>&emsp;&emsp;向sql传递数组或List时，mybatis使用foreach解析数组里的参数并拼接到SQL中。</p><h4 id="传递pojo对象中的List集合"><a href="#传递pojo对象中的List集合" class="headerlink" title="传递pojo对象中的List集合"></a>传递pojo对象中的List集合</h4><h5 id="需求-6"><a href="#需求-6" class="headerlink" title="需求"></a>需求</h5><p>&emsp;&emsp;在用户查询列表和查询总数的statement中增加多个id输入查询。</p><h5 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h5><p><code>SELECT * FROM user WHERE id IN (1,10,16)</code></p><p>定义pojo中的List属性<br><img src="/images/mybatis/7.3.3.png" alt="7.3.3"></p><h5 id="映射文件-2"><a href="#映射文件-2" class="headerlink" title="映射文件"></a>映射文件</h5><pre><code>//&lt;!-- [foreach标签]：表示一个foreach循环 --&gt;    &lt;!-- [collection]：集合参数的名称，如果是直接传入集合参数，则该处的参数名称只能填写[list]。 --&gt;    &lt;!-- [item]：每次遍历出来的对象 --&gt;    &lt;!-- [open]：开始遍历时拼接的串 --&gt;    &lt;!-- [close]：结束遍历时拼接的串 --&gt;    &lt;!-- [separator]：遍历出的每个对象之间需要拼接的字符 --&gt;    &lt;if test=_&quot;idList != null and idList.size &gt; 0&quot;_&gt;    &lt;foreach collection=_&quot;idList&quot;_ item=_&quot;id&quot;_ open=_&quot;AND id IN (&quot;_ close=_&quot;)&quot;_ separator=_&quot;,&quot;_&gt;     #{id}    &lt;/foreach&gt;    &lt;/if&gt;</code></pre><h5 id="Mapper接口-3"><a href="#Mapper接口-3" class="headerlink" title="Mapper接口"></a>Mapper接口</h5><p>&emsp;&emsp;根据用户ID的集合查询用户列表（学习foreach标签之通过POJO对象传ID集合）<br><code>public List&lt;UserExt&gt; findUserList(UserQueryVO vo);</code></p><h5 id="测试代码-4"><a href="#测试代码-4" class="headerlink" title="测试代码"></a>测试代码</h5><pre><code>//@Test    public  void testFindUserList() {      // 创建SqlSession     SqlSession sqlSession = sqlSessionFactory.openSession();      // 通过SqlSession，获取mapper接口的动态代理对象     UserMapper mapper = sqlSession.getMapper(UserMapper.class);      // 构造QueryUserVO对象     QueryUserVO vo = new QueryUserVO();      // UserExt ext = new UserExt();      // ext.setUsername(&quot;小明&quot;);      // ext.setSex(&quot;1&quot;);      // vo.setUserExt(ext);      // 创建用户ID集合，然后设置到QueryUserVO对象中     List&lt;Integer&gt; idList = new ArrayList&lt;Integer&gt;();     idList.add(1);     idList.add(10);     idList.add(16);     vo.setIdList(idList);      // 调用mapper代理对象的方法     List&lt;UserExt&gt; list = mapper.findUserList(vo);     System._out_.println(list);      // 关闭SqlSession     sqlSession.close();    }</code></pre><h4 id="直接传递List集合"><a href="#直接传递List集合" class="headerlink" title="直接传递List集合"></a>直接传递List集合</h4><h5 id="需求-7"><a href="#需求-7" class="headerlink" title="需求"></a>需求</h5><p>&emsp;&emsp;根据用户ID的集合查询用户列表</p><h5 id="SQL-1"><a href="#SQL-1" class="headerlink" title="SQL"></a>SQL</h5><p><code>SELECT * FROM user WHERE id IN (1,10,16)</code></p><h5 id="映射文件-3"><a href="#映射文件-3" class="headerlink" title="映射文件"></a>映射文件</h5><pre><code>//&lt;!-- 根据用户ID的集合查询用户列表（学习foreach标签之直接传ID集合） --&gt;    &lt;!--     [foreach标签]：表示一个foreach循环     [collection]：集合参数的名称，如果是直接传入集合参数，则该处的参数名称只能填写[list]。     [item]：定义遍历集合之后的参数名称     [open]：开始遍历之前需要拼接的SQL串     [close]：结束遍历之后需要拼接的SQL串     [separator]：遍历出的每个对象之间需要拼接的字符     --&gt;    &lt;select id=&quot;findUsersByIdList&quot; parameterType=&quot;java.util.List&quot; resultType=&quot;user&quot;&gt;     SELECT * FROM USER      &lt;where&gt;      &lt;if test=&quot;list!= null and list.size &gt; 0&quot;&gt;      &lt;foreach collection=&quot;list&quot; item=&quot;id&quot; open=&quot;AND id IN (&quot; close=&quot;)&quot;_separator=&quot;,&quot;&gt;     #{id}      &lt;/foreach&gt;      &lt;/if&gt;      &lt;/where&gt;    &lt;/select&gt;</code></pre><h5 id="Mapper接口-4"><a href="#Mapper接口-4" class="headerlink" title="Mapper接口"></a>Mapper接口</h5><pre><code>//根据用户ID的集合查询用户列表（学习foreach标签之直接传ID集合)    public List&lt;User&gt; findUsersByIdList (List&lt;Integer&gt; idList);</code></pre><h5 id="测试代码-5"><a href="#测试代码-5" class="headerlink" title="测试代码"></a>测试代码</h5><pre><code>//@Test    public  void findUsersByIdListTest() {      // 创建SqlSession     SqlSession sqlSession = sqlSessionFactory.openSession();      // 通过SqlSession，获取mapper接口的动态代理对象     UserMapper userMapper = sqlSession.getMapper(UserMapper.class);      // 构造List&lt;Integer&gt;集合     List&lt;Integer&gt; idList = new ArrayList&lt;Integer&gt;();     idList.add(1);     idList.add(10);    idList.add(16);      // 调用mapper对象的方法     List&lt;User&gt; list = userMapper.findUsersByIdList (idList);     System.out.println(list);      // 关闭SqlSession     sqlSession.close();    }</code></pre><h1 id="mybatis与hibernate的区别及各自应用场景"><a href="#mybatis与hibernate的区别及各自应用场景" class="headerlink" title="mybatis与hibernate的区别及各自应用场景"></a>mybatis与hibernate的区别及各自应用场景</h1><p>&emsp;Mybatis技术特点：</p><ol><li>通过直接编写SQL语句，可以直接对SQL进行性能的优化；</li><li>学习门槛低，学习成本低。只要有SQL基础，就可以学习mybatis，而且很容易上手；</li><li>由于直接编写SQL语句，所以灵活多变，代码维护性更好。</li><li>不能支持数据库无关性，即数据库发生变更，要写多套代码进行支持，移植性不好。</li><li>需要编写结果映射。</li></ol><p>&emsp;Hibernate技术特点：</p><ol><li>标准的orm框架，程序员不需要编写SQL语句。</li><li>具有良好的数据库无关性，即数据库发生变化的话，代码无需再次编写。</li><li>学习门槛高，需要对数据关系模型有良好的基础，而且在设置OR映射的时候，需要考虑好性能和对象模型的权衡。</li><li>程序员不能自主的去进行SQL性能优化。</li></ol><p>&emsp;Mybatis应用场景：</p><p>&emsp;&emsp;需求多变的互联网项目，例如电商项目。</p><p>&emsp;Hibernate应用场景：</p><p>&emsp;&emsp;需求明确、业务固定的项目，例如OA项目、ERP项目等。</p><h1 id="关联查询映射"><a href="#关联查询映射" class="headerlink" title="关联查询映射"></a>关联查询映射</h1><h2 id="分析数据模型"><a href="#分析数据模型" class="headerlink" title="分析数据模型"></a>分析数据模型</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><ol><li><p>每张表记录的数据内容<br>&emsp;&emsp;分模块对每张表记录的内容进行熟悉，相当于你学习系统需求（功能）的过程。</p></li><li><p>每张表重要的字段<br>&emsp;&emsp;主键、外键、非空字段</p></li><li><p>数据库级别表与表的关系<br>&emsp;&emsp;外键关系</p></li><li><p>表与表之间的业务关系<br>&emsp;&emsp;在分析表与表之间的业务关系时一定要建立 在某个业务意义基础上去分析。<br>&emsp;&emsp;图形分析:<br><img src="/images/mybatis/9.1.png" alt="9.1"></p></li></ol><h3 id="数据库表之间有外键关系的业务关系"><a href="#数据库表之间有外键关系的业务关系" class="headerlink" title="数据库表之间有外键关系的业务关系"></a>数据库表之间有外键关系的业务关系</h3><p>user和orders：<br>&emsp;&emsp;user——&gt;orders：一个用户可以创建多个订单，一对多<br>&emsp;&emsp;orders—-&gt;user：一个订单只由一个用户创建，一对一</p><p>orders和orderdetail：<br>&emsp;&emsp;orders—-&gt;orderdetail：一个订单可以包括 多个订单明细，因为一个订单可以购买多个商品，每个商品的购买信息在orderdetail记录，一对多关系<br>&emsp;&emsp;orderdetail—&gt; orders：一个订单明细只能包括在一个订单中，一对一</p><p>orderdetail和itesm：<br>&emsp;&emsp;orderdetail—-&gt;itesms：一个订单明细只对应一个商品信息，一对一<br>&emsp;&emsp;items—-&gt; orderdetail:一个商品可以包括在多个订单明细 ，一对多</p><h3 id="数据库表之间没有外键关系的业务关系"><a href="#数据库表之间没有外键关系的业务关系" class="headerlink" title="数据库表之间没有外键关系的业务关系"></a>数据库表之间没有外键关系的业务关系</h3><p>Orders和items：//这两张表没有直接的外键关系，通过业务及数据库的间接关系分析出它们是多对多的关系。<br>&emsp;&emsp;Orders—-&gt; orderdetai—-&gt;items：一个订单可以有多个订单明细，一个订单明细对应一个商品，所以一个订单对应多个商品<br>&emsp;&emsp;Items—-&gt;orderdetail—-&gt;orders：一个商品可以对应多个订单明细，一个订单明细对应一个订单，所以一个商品对应多个订单</p><p>User和items：//这两张表没有直接的外键关系，通过业务及数据库的间接关系分析出它们是多对多的关系。<br>&emsp;&emsp;User—-&gt;orders—-&gt;orderdetail—-&gt;items：一个用户有多个订单，一个订单有多个订单明细、一个订单明细对应一个商品，所以一个用户对应多个商品<br>&emsp;&emsp;Items—-&gt;orderdetail—-&gt;orders—-&gt;user：一个商品对应多个订单明细，一个订单明细对应一个订单，一个订单对应一个用户，所以一个商品对应多个用户</p><h2 id="一对一查询"><a href="#一对一查询" class="headerlink" title="一对一查询"></a>一对一查询</h2><h3 id="需求-8"><a href="#需求-8" class="headerlink" title="需求"></a>需求</h3><p>&emsp;&emsp;查询订单信息，关联查询创建订单的用户信息</p><h3 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h3><p>&emsp;&emsp;确定查询的主表：订单表<br>&emsp;&emsp;确定查询的关联表：用户表<br>&emsp;&emsp;关联查询使用内链接？还是外链接？</p><pre><code>//Select        Orders.id,        Orders.user_id,        orders.number,        orders.createtime,        orders.note,        user.username,        user.address    from orders,user    where orders.user_id = user.id</code></pre><h3 id="resultType-1"><a href="#resultType-1" class="headerlink" title="resultType"></a>resultType</h3><p>&emsp;&emsp;复杂查询时，单表对应的po类已不能满足输出结果集的映射。所以要根据需求建立一个扩展类来作为resultType的类型。</p><h4 id="创建po类"><a href="#创建po类" class="headerlink" title="创建po类"></a>创建po类</h4><pre><code>//通过此类映射订单和用户查询的结果，让此类继承包括 字段较多的pojo类public class OrdersExt extends Orders{            //添加用户属性    /*USER.username,      USER.address */            private String username;    private String address;    public String getUsername() {        return username;    }    public void setUsername(String username) {        this.username = username;    }    public String getAddress() {        return address;    }    public void setAddress(String address) {        this.address = address;    }        }</code></pre><h4 id="编写mapper接口-1"><a href="#编写mapper接口-1" class="headerlink" title="编写mapper接口"></a>编写mapper接口</h4><p>&emsp;&emsp;创建OrdersMapper接口类，在类中添加以下内容：</p><pre><code>// 进行订单信息查询，包括用户的名称和地址信息    public List&lt;OrdersExt&gt; findOrdersUser();</code></pre><h4 id="编写映射文件-5"><a href="#编写映射文件-5" class="headerlink" title="编写映射文件"></a>编写映射文件</h4><pre><code>//&lt;mapper namespace=&quot;cn.itcast.mybatis.mapper.OrdersMapper&quot;&gt;      &lt;!-- 定义查询订单表列名的SQL片段 --&gt;      &lt;sql id=&quot;select_orders&quot;&gt;     Orders.id,     Orders.user_id,    orders.number,     orders.createtime,     orders.note      &lt;/sql&gt;      &lt;!-- 定义查询用户表列名的SQL片段 --&gt;      &lt;sql id=&quot;select_user&quot;&gt;     user.username,     user.address      &lt;/sql&gt;      &lt;!-- 进行订单信息查询，包括用户的名称和地址信息 --&gt;      &lt;select id=&quot;findOrdersUser&quot; resultType=&quot;OrdersExt&quot;&gt;     Select      &lt;include refid=&quot;select_orders&quot; /&gt;      &lt;include refid=&quot;select_user&quot;&gt;&lt;/include&gt;     from orders,user     where orders.user_id = user.id      &lt;/select&gt;    &lt;/mapper&gt;</code></pre><h4 id="加载映射文件-5"><a href="#加载映射文件-5" class="headerlink" title="加载映射文件"></a>加载映射文件</h4><pre><code>//&lt;!-- 批量加载mapper文件，需要mapper接口文件和mapper映射文件名称相同且在同一个包下 --&gt;&lt;package name=&quot;cn.itcast.mybatis.mapper&quot;/&gt;</code></pre><h4 id="编写测试代码-3"><a href="#编写测试代码-3" class="headerlink" title="编写测试代码"></a>编写测试代码</h4><pre><code>//@Test    public  void testFindOrdersUser() {      // 创建sqlSession     SqlSession sqlSession = sqlSessionFactory.openSession();      // 通过SqlSession构造usermapper的代理对象     OrdersMapper ordersMapper = sqlSession.getMapper(OrdersMapper.class);      // 调用usermapper的方法     List&lt;OrdersExt&gt; list = ordersMapper.findOrdersUser();    System.out.println(list);      // 释放SqlSession     sqlSession.close();    }</code></pre><h3 id="resultMap-1"><a href="#resultMap-1" class="headerlink" title="resultMap"></a>resultMap</h3><h4 id="修改po类"><a href="#修改po类" class="headerlink" title="修改po类"></a>修改po类</h4><p>&emsp;&emsp;在Orders类中，添加User对象</p><pre><code>//public class Orders {private Integer id;private Integer userId;private String number;private Date createtime;private String note;    //用户信息private User user;</code></pre><h4 id="编写mapper接口-2"><a href="#编写mapper接口-2" class="headerlink" title="编写mapper接口"></a>编写mapper接口</h4><pre><code>  // 进行订单信息查询，包括用户的名称和地址信息（resultMap） public List&lt;OrdersExt&gt; findOrdersUserRstMap();</code></pre><h4 id="编写映射文件-6"><a href="#编写映射文件-6" class="headerlink" title="编写映射文件"></a>编写映射文件</h4><pre><code>//&lt;!-- 进行订单信息查询，包括用户的名称和地址信息 (ResultMap) --&gt;      &lt;select id=&quot;findOrdersUserRstMap&quot; resultMap=&quot;OrdersUserRstMap&quot;&gt;          Select          &lt;include refid=&quot;select_orders&quot; /&gt;          ,          &lt;include refid=&quot;select_user&quot;&gt;&lt;/include&gt;          from orders,user          where orders.user_id = user.id      &lt;/select&gt;            &lt;!-- 定义orderUserResultMap --&gt;      &lt;resultMap type=&quot; cn.itcast.mybatis.po.Orders&quot; id=&quot;OrdersUserRstMap&quot;&gt;          &lt;id column=&quot;id&quot; property=&quot;id&quot; /&gt;          &lt;result column=&quot;user_id&quot; property=&quot;userId&quot; /&gt;          &lt;result column=&quot;number&quot; property=&quot;number&quot; /&gt;          &lt;result column=&quot;createtime&quot; property=&quot;createtime&quot; /&gt;          &lt;result column=&quot;note&quot; property=&quot;note&quot; /&gt;          &lt;!-- 映射一对一关联关系的用户对象--&gt;          &lt;!--               property：指定关联对象要映射到Orders的哪个属性上               javaType：指定关联对象所要映射的java类型            --&gt;          &lt;!-- id标签：指定关联对象结果集的唯一标识，很重要，不写不会报错，但是会影响性能 --&gt;          &lt;association property=&quot;user&quot; javaType=&quot;cn.itcast.mybatis.po.User&quot;&gt;              &lt;id column=&quot;user_id&quot; property=&quot;id&quot; /&gt;              &lt;result column=&quot;username&quot; property=&quot;username&quot; /&gt;              &lt;result column=&quot;address&quot; property=&quot;address&quot; /&gt;          &lt;/association&gt;      &lt;/resultMap&gt;</code></pre><h4 id="编写测试代码-4"><a href="#编写测试代码-4" class="headerlink" title="编写测试代码"></a>编写测试代码</h4><pre><code>//@Test    public  void testFindOrdersUserRstMap() {      // 创建sqlSession     SqlSession sqlSession = sqlSessionFactory.openSession();      // 通过SqlSession构造usermapper的代理对象     OrdersMapper ordersMapper = sqlSession.getMapper(OrdersMapper.class);      // 调用usermapper的方法     List&lt;Orders&gt; list = ordersMapper.findOrdersUserRstMap();      //此处我们采用debug模式来跟踪代码，然后验证结果集是否正确     System.out.println(list);     // 释放SqlSession     sqlSession.close();    }</code></pre><h3 id="一对一小结"><a href="#一对一小结" class="headerlink" title="一对一小结"></a>一对一小结</h3><p>实现一对一查询：</p><ul><li><p>resultType：使用resultType实现较为简单，如果pojo中没有包括查询出来的列名，需要增加列名对应的属性，即可完成映射。如果没有查询结果的特殊要求建议使用resultType。</p></li><li><p>resultMap：需要单独定义resultMap，实现有点麻烦，如果对查询结果有特殊的要求，使用resultMap可以完成将关联查询映射pojo的对象属性中。resultMap可以实现延迟加载，resultType无法实现延迟加载。</p></li></ul><h2 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h2><p>&emsp;&emsp;一对多查询和一对一查询的配置基本类似。只是如果使用resultMap的话，映射一对多关联关系要使用collection标签。</p><h3 id="需求-9"><a href="#需求-9" class="headerlink" title="需求"></a>需求</h3><p>&emsp;&emsp;查询订单信息及订单明细信息</p><h3 id="SQL语句-1"><a href="#SQL语句-1" class="headerlink" title="SQL语句"></a>SQL语句</h3><p>&emsp;&emsp;确定主查询表：订单表<br>&emsp;&emsp;确定关联查询表：订单明细表<br>&emsp;&emsp;在一对一查询基础上添加订单明细表关联即可。</p><pre><code>//Select    Orders.id,    Orders.user_id,    orders.number,    orders.createtime,    orders.note,    user.username,    user.address,    orderdetail.id detail_id,    orderdetail.items_id,    orderdetail.items_numfrom orders,user,orderdetailwhere orders.user_id = user.id     and orders.id = orderdetail.orders_id</code></pre><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>&emsp;&emsp;使用resultType将上边的 查询结果映射到pojo中，订单信息将会重复。<br><img src="/images/mybatis/7.3.4.png" alt="7.3.4"></p><p>&emsp;要求：<br>&emsp;&emsp;对orders映射不能出现重复记录。</p><ul><li>在orders.java类中添加List<orderdetail>detailList属性。最终会将订单信息映射到orders中，订单所对应的订单明细映射到orders中的detailList属性中。<br><img src="/images/mybatis/7.3.5.png" alt="7.3.5"></orderdetail></li><li>映射成的orders记录数为两条（orders信息不重复）,每个orders中的detailList属性存储了该订单所对应的订单明细集合。</li></ul><h3 id="修改PO类"><a href="#修改PO类" class="headerlink" title="修改PO类"></a>修改PO类</h3><p>&emsp;&emsp;在Orders类中添加以下属性，并提供get/set方法：</p><pre><code>//订单明细private List&lt;Orderdetail&gt; detailList;</code></pre><h3 id="编写mapper接口-3"><a href="#编写mapper接口-3" class="headerlink" title="编写mapper接口"></a>编写mapper接口</h3><pre><code>// 查询订单信息及订单明细信息（一对多映射之使用resultMap）public List&lt;Orders&gt; findOrdersAndOrderdetailRstMap();</code></pre><h3 id="编写映射文件-7"><a href="#编写映射文件-7" class="headerlink" title="编写映射文件"></a>编写映射文件</h3><pre><code>//&lt;!-- 定义OrdersAndOrderdetailRstMap --&gt;&lt;!-- extends：继承已有的ResultMap，值为继承的ResultMap的唯一标示 --&gt;&lt;resultMap type=&quot;Orders&quot; id=&quot;OrdersAndOrderdetailRstMap&quot;    extends=&quot;OrdersUserRstMap&quot;&gt;        &lt;!-- 映射关联关系（一对多） --&gt;        &lt;!-- collection标签：定义一个一对多关系            ofType：指定该集合参数所映射的类型         --&gt;        &lt;collection property=&quot;detailList&quot; ofType=&quot;Orderdetail&quot;&gt;            &lt;id column=&quot;detail_id&quot; property=&quot;id&quot; /&gt;            &lt;result column=&quot;items_id&quot; property=&quot;itemsId&quot; /&gt;            &lt;result column=&quot;items_num&quot; property=&quot;itemsNum&quot; /&gt;        &lt;/collection&gt;    &lt;/resultMap&gt;    &lt;!-- 查询订单信息，包括用户名称、用户地址，订单商品信息（嵌套结果） --&gt;&lt;select id=&quot;findOrdersAndOrderdetailRstMap&quot; resultMap=&quot;OrdersAndOrderdetailRstMap&quot;&gt;            Select        &lt;include refid=&quot;select_orders&quot; /&gt;        ,        &lt;include refid=&quot;select_user&quot;/&gt;        ,        orderdetail.id detail_id,        orderdetail.items_id,        orderdetail.items_num        from orders,user,orderdetail        where orders.user_id = user.id        and        orders.id = orderdetail.orders_id        &lt;/select&gt;</code></pre><p>&emsp;&emsp;resultMap的extends属性：可以用此属性来继承一个已有的resultmap。但是它继承的resultMap的type和它本身的type要保持一致。</p><h3 id="编写测试代码-5"><a href="#编写测试代码-5" class="headerlink" title="编写测试代码"></a>编写测试代码</h3><pre><code>//@Testpublic void testFindOrdersAndOrderdetailRstMap() {    // 创建sqlSession    SqlSession sqlSession = sqlSessionFactory.openSession();        // 通过SqlSession构造usermapper的代理对象    OrdersMapper ordersMapper = sqlSession.getMapper(OrdersMapper.class);    // 调用usermapper的方法    List&lt;Orders&gt; list = ordersMapper.findOrdersAndOrderdetailRstMap();                //此处我们采用debug模式来跟踪代码，然后验证结果集是否正确    System.out.println(list);    // 释放SqlSession    sqlSession.close();}</code></pre><h3 id="一对多小结"><a href="#一对多小结" class="headerlink" title="一对多小结"></a>一对多小结</h3><p>&emsp;&emsp;mybatis使用resultMap的collection对关联查询的多条记录映射到一个list集合属性中。<br>使用resultType实现：</p><ul><li>需要对结果集进行二次处理。</li><li>将订单明细映射到orders中的orderdetails中，需要自己处理，使用双重循环遍历，去掉重复记录，将订单明细放在orderdetails中。</li></ul><h2 id="多对多查询"><a href="#多对多查询" class="headerlink" title="多对多查询"></a>多对多查询</h2><h3 id="需求-10"><a href="#需求-10" class="headerlink" title="需求"></a>需求</h3><p>&emsp;&emsp;查询用户信息及用户购买的商品信息，要求将关联信息映射到主pojo的pojo属性中</p><h3 id="SQL语句-2"><a href="#SQL语句-2" class="headerlink" title="SQL语句"></a>SQL语句</h3><p>&emsp;&emsp;查询主表：user<br>&emsp;&emsp;查询关联表：orders、orderdetail、items</p><pre><code>//Select      Orders.id,      Orders.user_id,      orders.number,    orders.createtime,    orders.note,    user.username,    user.address,    orderdetail.id detail_id,    orderdetail.items_id,    orderdetail.items_num    items.name items_name,    items.detail items_detail    FROM    orders,  USER,    orderdetail,    items   WHERE user.`id` = orders.`user_id`     AND orders.`id` = orderdetail.`orders_id`     AND orderdetail.`items_id` = items.`id`</code></pre><h3 id="映射思路"><a href="#映射思路" class="headerlink" title="映射思路"></a>映射思路</h3><ul><li>将用户信息映射到user中。</li><li>在user类中添加订单列表属性List<orders>orderslist，将用户创建的订单映射到orderslist</orders></li><li>在Orders中添加订单明细列表属性List<orderdetail>detailList，将订单的明细映射到detailList</orderdetail></li><li>在Orderdetail中添加Items属性，将订单明细所对应的商品映射到Items</li></ul><h3 id="修改PO类-1"><a href="#修改PO类-1" class="headerlink" title="修改PO类"></a>修改PO类</h3><p>&emsp;&emsp;在user类中添加List<orders>ordersList 属性</orders></p><pre><code>// 订单信息private List&lt;Orders&gt; ordersList;</code></pre><p>&emsp;&emsp;在Orders类中添加List<orderdetail>属性</orderdetail></p><pre><code>//订单明细private List&lt;Orderdetail&gt; detailList;</code></pre><p>&emsp;&emsp;在Orderdetail类中添加Items属性</p><pre><code>//商品信息private Items items;</code></pre><h3 id="编写mapper接口-4"><a href="#编写mapper接口-4" class="headerlink" title="编写mapper接口"></a>编写mapper接口</h3><pre><code>//查询用户及用户购买商品信息（多对多映射之使用resultMap）public List&lt;User&gt; findUserAndItemsRstMap();</code></pre><h3 id="编写映射文件-8"><a href="#编写映射文件-8" class="headerlink" title="编写映射文件"></a>编写映射文件</h3><pre><code>//&lt;!-- 定义UserAndItemsRstMap --&gt;    &lt;resultMap type=&quot;User&quot; id=&quot;UserAndItemsRstMap&quot;&gt;        &lt;!-- 用户信息 --&gt;        &lt;!-- id：关联查询用户的唯一标示 --&gt;        &lt;id column=&quot;user_id&quot; property=&quot;id&quot; /&gt;        &lt;result column=&quot;username&quot; property=&quot;username&quot; /&gt;        &lt;result column=&quot;address&quot; property=&quot;address&quot; /&gt;        &lt;!-- 订单信息 （一个用户有多个订单） --&gt;        &lt;collection property=&quot;ordersList&quot; ofType=&quot;orders&quot;&gt;            &lt;id column=&quot;id&quot; property=&quot;id&quot; /&gt;            &lt;result column=&quot;user_id&quot; property=&quot;userId&quot; /&gt;            &lt;result column=&quot;number&quot; property=&quot;number&quot; /&gt;            &lt;result column=&quot;createtime&quot; property=&quot;createtime&quot; /&gt;            &lt;result column=&quot;note&quot; property=&quot;note&quot; /&gt;            &lt;!-- 订单明细信息（一个订单有多个订单明细） --&gt;            &lt;collection property=&quot;detailList&quot; ofType=&quot;orderdetail&quot;&gt;                &lt;id column=&quot;detail_id&quot; property=&quot;id&quot; /&gt;                &lt;result column=&quot;items_id&quot; property=&quot;itemsId&quot; /&gt;                &lt;result column=&quot;items_num&quot; property=&quot;itemsNum&quot; /&gt;                &lt;!-- 商品信息 （一个订单明细对应一个商品） --&gt;                &lt;association property=&quot;items&quot; javaType=&quot;cn.itcast.mybatis.po.Items&quot;&gt;                    &lt;id column=&quot;items_id&quot; property=&quot;id&quot; /&gt;                    &lt;result column=&quot;items_name&quot; property=&quot;name&quot; /&gt;                    &lt;result column=&quot;items_detail&quot; property=&quot;detail&quot; /&gt;                &lt;/association&gt;            &lt;/collection&gt;        &lt;/collection&gt;    &lt;/resultMap&gt;        &lt;!-- 查询用户及用户购买商品信息（多对多映射之使用resultMap） --&gt;    &lt;select id=&quot;findUserAndItemsRstMap&quot; resultMap=&quot;UserAndItemsRstMap&quot;&gt;        Select        &lt;include refid=&quot;select_orders&quot; /&gt;        ,        &lt;include refid=&quot;select_user&quot; /&gt;        ,        &lt;include refid=&quot;select_orderdetail&quot;&gt;&lt;/include&gt;        ,        items.name items_name,        items.detail items_detail        from        orders,user,orderdetail,items        where orders.user_id = user.id        and        orders.id = orderdetail.orders_id        and orderdetail.items_id = items.id    &lt;/select&gt;</code></pre><h3 id="编写测试代码-6"><a href="#编写测试代码-6" class="headerlink" title="编写测试代码"></a>编写测试代码</h3><pre><code>//@Test    public void testFindUserAndItemsRstMap() {        // 创建sqlSession        SqlSession sqlSession = sqlSessionFactory.openSession();            // 通过SqlSession构造usermapper的代理对象        OrdersMapper ordersMapper = sqlSession.getMapper(OrdersMapper.class);        // 调用usermapper的方法        List&lt;User&gt; list = ordersMapper.findUserAndItemsRstMap();            // 此处我们采用debug模式来跟踪代码，然后验证结果集是否正确        System.out.println(list);        // 释放SqlSession        sqlSession.close();    }</code></pre><h3 id="多对多查询小结"><a href="#多对多查询小结" class="headerlink" title="多对多查询小结"></a>多对多查询小结</h3><p>&emsp;&emsp;将查询用户购买的商品信息明细清单，（用户名、用户地址、购买商品名称、购买商品时间、购买商品数量）<br>&emsp;&emsp;针对上边的需求就使用resultType将查询到的记录映射到一个扩展的pojo中，很简单实现明细清单的功能。</p><p>&emsp;&emsp;一对多是多对多的特例，如下需求：//查询用户购买的商品信息，用户和商品的关系是多对多关系。</p><ul><li><p>需求1：<br>&emsp;&emsp;&emsp;&emsp;查询字段：用户账号、用户名称、用户性别、商品名称、商品价格(最常见)<br>&emsp;&emsp;&emsp;&emsp;企业开发中常见明细列表，用户购买商品明细列表，使用resultType将上边查询列映射到pojo输出。</p></li><li><p>需求2：<br>&emsp;&emsp;&emsp;&emsp;查询字段：用户账号、用户名称、购买商品数量、商品明细（鼠标移上显示明细）<br>&emsp;&emsp;&emsp;&emsp;使用resultMap将用户购买的商品明细列表映射到user对象中。</p></li></ul><p><strong>总结：</strong><br>&emsp;&emsp;使用resultMap是针对那些对查询结果映射有特殊要求的功能，，比如特殊要求映射成list中包括 多个list。</p><h2 id="高级映射总结"><a href="#高级映射总结" class="headerlink" title="高级映射总结"></a>高级映射总结</h2><ul><li><p>resultType：<br>&emsp;&emsp;作用：<br>&emsp;&emsp;&emsp;&emsp;将查询结果按照sql列名pojo属性名一致性映射到pojo中。<br>&emsp;&emsp;场合：<br>&emsp;&emsp;&emsp;&emsp;常见一些明细记录的展示，比如用户购买商品明细，将关联查询信息全部展示在页面时，此时可直接使用resultType将每一条记录映射到pojo中，在前端页面遍历list（list中是pojo）即可。</p></li><li><p>resultMap：<br>&emsp;&emsp;使用association和collection完成一对一和一对多高级映射（对结果有特殊的映射要求）。</p></li><li><ul><li>association：<br>&emsp;&emsp;作用：<br>&emsp;&emsp;&emsp;&emsp; 将关联查询信息映射到一个pojo对象中。<br>&emsp;&emsp;场合：<br>&emsp;&emsp;&emsp;&emsp;为了方便查询关联信息可以使用association将关联订单信息映射为用户对象的pojo属性中，比如：查询订单及关联用户信息。</li></ul></li></ul><p>// &emsp;&emsp;使用resultType无法将查询结果映射到pojo对象的pojo属性中，根据对结果集查询遍历的需要选择使用resultType还是resultMap。</p><ul><li><ul><li>collection：<br>&emsp;&emsp;作用：<br>&emsp;&emsp;&emsp;&emsp; 将关联查询信息映射到一个list集合中。<br>&emsp;&emsp;场合：<br>&emsp;&emsp;&emsp;&emsp;为了方便查询遍历关联信息可以使用collection将关联信息映射到list集合中，比如：查询用户权限范围模块及模块下的菜单，可使用collection将模块映射到模块list中，将菜单列表映射到模块对象的菜单list属性中，这样的作的目的也是方便对查询结果集进行遍历查询。</li></ul></li></ul><p>//&emsp;&emsp; 如果使用resultType无法将查询结果映射到list集合中。</p><h1 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h1><h2 id="什么是延迟加载"><a href="#什么是延迟加载" class="headerlink" title="什么是延迟加载"></a>什么是延迟加载</h2><p>&emsp;&emsp;resultMap中的association和collection标签具有延迟加载的功能。<br>&emsp;&emsp;延迟加载的意思是说，在关联查询时，利用延迟加载，先加载主信息。需要关联信息时再去按需加载关联信息。这样会大大提高数据库性能，因为查询单表要比关联查询多张表速度要快。</p><h2 id="设置延迟加载"><a href="#设置延迟加载" class="headerlink" title="设置延迟加载"></a>设置延迟加载</h2><p>&emsp;&emsp;Mybatis默认是不开启延迟加载功能的，我们需要手动开启。<br>&emsp;&emsp;需要在SqlMapConfig.xml文件中，在<settings>标签中开启延迟加载功能。</settings></p><div class="table-container"><table><thead><tr><th style="text-align:center">设置项</th><th style="text-align:left">描述</th><th style="text-align:center">允许值</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td style="text-align:center">lazyLoadingEnabled</td><td style="text-align:left">全局性设置懒加载。如果设为‘false’，则所有相关联的都会被初始化加载。</td><td style="text-align:center">true or false</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center">aggressiveLazyLoading</td><td style="text-align:left">当设置为‘true’的时候，懒加载的对象可能被任何懒属性全部加载。否则，每个属性都按需加载。</td><td style="text-align:center">true or false</td><td style="text-align:center">true</td></tr></tbody></table></div><p><img src="/images/mybatis/10.1.png" alt="10.1"></p><h2 id="使用association进行延迟加载"><a href="#使用association进行延迟加载" class="headerlink" title="使用association进行延迟加载"></a>使用association进行延迟加载</h2><h3 id="需求-11"><a href="#需求-11" class="headerlink" title="需求"></a>需求</h3><p>&emsp;&emsp;查询订单并且关联查询用户信息（对用户信息的加载要求是按需加载）</p><h3 id="编写映射文件-9"><a href="#编写映射文件-9" class="headerlink" title="编写映射文件"></a>编写映射文件</h3><p>&emsp;&emsp;需要定义两个mapper的方法对应的statement。</p><ol><li>只查询订单信息</li></ol><p><code>SELECT * FROM orders</code></p><p>&emsp;&emsp;在查询订单的statement中使用association去延迟加载（执行）下边的satatement(关联查询用户信息)</p><pre><code>  //&lt;!-- 定义OrdersUserLazyLoadingRstMap --&gt;      &lt;resultMap type=&quot;cn.itcast.mybatis.po.Orders&quot; id=&quot;OrdersUserLazyLoadingRstMap&quot;&gt;                  &lt;id column=&quot;id&quot; property=&quot;id&quot; /&gt;            &lt;result column=&quot;user_id&quot; property=&quot;userId&quot; /&gt;            &lt;result column=&quot;number&quot; property=&quot;number&quot; /&gt;            &lt;result column=&quot;createtime&quot; property=&quot;createtime&quot; /&gt;            &lt;result column=&quot;note&quot; property=&quot;note&quot; /&gt;                        &lt;!-- 延迟加载用户信息 --&gt;            &lt;!-- select：指定延迟加载需要执行的statement的id（是根据user_id查询用户信息的statement）            我们使用UserMapper.xml中的findUserById完成根据用户ID（user_id）查询用户信息            如果findUserById不在本mapper中，前边需要加namespace            --&gt;            &lt;!-- column：主信息表中需要关联查询的列，此处是user_id --&gt;            &lt;association property=&quot;user&quot; select=&quot;cn.itcast.mybatis.mapper.UserMapper.findUserById&quot; column=&quot;user_id&quot;&gt;&lt;/association&gt;        &lt;/resultMap&gt;            &lt;!-- 查询订单信息，延迟加载关联查询的用户信息 --&gt;        &lt;select id=&quot;findOrdersUserLazyLoading&quot; resultMap=&quot;OrdersUserLazyLoadingRstMap&quot;&gt;            SELECT * FROM orders        &lt;/select&gt;</code></pre><ol><li><p>关联查询用户信息</p><p>&emsp;&emsp;通过上边查询到的订单信息中user_id去关联查询用户信息,使用UserMapper.xml中的findUserById</p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;select id="findUserById" parameterType="int" resultType="cn.itcast.mybatis.po.User"&gt;</span></span><br><span class="line">SELECT * FROM user WHERE id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;&emsp;&emsp;上边先去执行findOrdersUserLazyLoading，当需要去查询用户的时候再去执行findUserById，通过resultMap的定义将延迟加载执行配置起来。</p><h3 id="加载映射文件-6"><a href="#加载映射文件-6" class="headerlink" title="加载映射文件"></a>加载映射文件</h3><pre><code>//&lt;!-- 批量加载mapper文件，需要mapper接口文件和mapper映射文件名称相同且在同一个包下 --&gt;   &lt;package name=_&quot;cn.itcast.mybatis.mapper&quot;_/&gt;</code></pre><h3 id="编写mapper接口-5"><a href="#编写mapper接口-5" class="headerlink" title="编写mapper接口"></a>编写mapper接口</h3><pre><code>// 查询订单信息，延迟加载关联查询的用户信息    public List&lt;Orders&gt; findOrdersUserLazyLoading();</code></pre><h3 id="编写测试代码-7"><a href="#编写测试代码-7" class="headerlink" title="编写测试代码"></a>编写测试代码</h3><p><strong>思路：</strong></p><ol><li>执行上边mapper方法（findOrdersUserLazyLoading），内部去调用cn.itcast.mybatis.mapper.OrdersMapper中的findOrdersUserLazyLoading只查询orders信息（单表）。</li><li>在程序中去遍历上一步骤查询出的List<orders>，当我们调用Orders中的getUser方法时，开始进行延迟加载。</orders></li><li>执行延迟加载，去调用UserMapper.xml中findUserbyId这个方法获取用户信息。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOrdersUserLazyLoading</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建sqlSession</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();    </span><br><span class="line"><span class="comment">// 通过SqlSession构造usermapper的代理对象</span></span><br><span class="line">OrdersMapper ordersMapper = sqlSession.getMapper(OrdersMapper.class);</span><br><span class="line"><span class="comment">// 调用usermapper的方法</span></span><br><span class="line">List&lt;Orders&gt; list = ordersMapper.findOrdersUserLazyLoading();    </span><br><span class="line"><span class="keyword">for</span>(Orders orders : list)&#123;</span><br><span class="line">System.out.println(orders.getUser());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放SqlSession</span></span><br><span class="line">sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="延迟加载思考"><a href="#延迟加载思考" class="headerlink" title="延迟加载思考"></a>延迟加载思考</h2><p>&emsp;&emsp;不使用mybatis提供的association及collection中的延迟加载功能，如何实现延迟加载？？</p><p>&emsp;&emsp;实现方法如下：<br>&emsp;&emsp;//定义两个mapper方法：</p><ol><li>查询订单列表</li><li>根据用户id查询用户信息</li></ol><p><strong>实现思路：</strong></p><p>先去查询第一个mapper方法，获取订单信息列表<br>在程序中（service），按需去调用第二个mapper方法去查询用户信息。</p><p><strong>总之：</strong><br>&emsp;&emsp;使用延迟加载方法，先去查询简单的sql（最好单表，也可以关联查询），再去按需要加载关联查询的其它信息。</p><h1 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h1><h2 id="mybatis缓存分析"><a href="#mybatis缓存分析" class="headerlink" title="mybatis缓存分析"></a>mybatis缓存分析</h2><p>&emsp;&emsp;mybatis提供查询缓存，如果缓存中有数据就不用从数据库中获取，用于减轻数据压力，提高系统性能。<br><img src="/images/mybatis/11.1.png" alt="11.1"><br>&emsp;&emsp;一级缓存是SqlSession级别的缓存。在操作数据库时需要构造 sqlSession对象，在对象中有一个数据结构（HashMap）用于存储缓存数据。不同的sqlSession之间的缓存数据区域（HashMap）是互相不影响的。<br>&emsp;&emsp;二级缓存是mapper级别的缓存，多个SqlSession去操作同一个Mapper的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession的。</p><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><img src="/images/mybatis/11.2.png" alt="11.2"></p><p>&emsp;&emsp;第一次发起查询用户id为1的用户信息，先去找缓存中是否有id为1的用户信息，如果没有，从数据库查询用户信息。<br>&emsp;&emsp;得到用户信息，将用户信息存储到一级缓存中。<br>&emsp;&emsp;如果sqlSession去执行commit操作（执行插入、更新、删除），清空SqlSession中的一级缓存，这样做的目的为了让缓存中存储的是最新的信息，避免脏读。<br>&emsp;&emsp;第二次发起查询用户id为1的用户信息，先去找缓存中是否有id为1的用户信息，缓存中有，直接从缓存中获取用户信息。</p><p><strong>注：Mybatis默认支持一级缓存。</strong></p><h3 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h3><pre><code>//@Test    public void testOneLevelCache() {        SqlSession sqlSession = sqlSessionFactory.openSession();        UserMapper mapper = sqlSession.getMapper(UserMapper.class);        // 第一次查询ID为1的用户，去缓存找，找不到就去查找数据库        User user1 = mapper.findUserById(1);        System.out.println(user1);                    // 第二次查询ID为1的用户        User user2 = mapper.findUserById(1);        System.out.println(user2);            sqlSession.close();    }</code></pre><p>&emsp;&emsp;只输出一次SQL：<br><img src="/images/mybatis/11.3.png" alt="11.3"></p><h3 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h3><pre><code>//@Test    public void testOneLevelCache() {        SqlSession sqlSession = sqlSessionFactory.openSession();        UserMapper mapper = sqlSession.getMapper(UserMapper.class);        // 第一次查询ID为1的用户，去缓存找，找不到就去查找数据库        User user1 = mapper.findUserById(1);        System.out.println(user1);                    User user = new User();        user.setUsername(&quot;东哥1&quot;);        user.setAddress(&quot;清河宝盛西里&quot;);        //执行增删改操作，清空缓存        mapper.insertUser(user);                    // 第二次查询ID为1的用户        User user2 = mapper.findUserById(1);        System.out.println(user2);            sqlSession.close();    }</code></pre><p>&emsp;&emsp;中间执行了commit操作，同样的查询SQL输出两次：<br><img src="/images/mybatis/11.4.png" alt="11.4"></p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>&emsp;&emsp;正式开发，是将mybatis和spring进行整合开发，事务控制在service中。<br>&emsp;&emsp;一个service方法中包括 很多mapper方法调用。</p><pre><code>//service{     //开始执行时，开启事务，创建SqlSession对象     //第一次调用mapper的方法findUserById(1)    //第二次调用mapper的方法findUserById(1)，从一级缓存中取数据     //方法结束，sqlSession关闭    }</code></pre><p>&emsp;&emsp;如果是执行两次service调用查询相同 的用户信息，不走一级缓存，因为session方法结束，sqlSession就关闭，一级缓存就清空。</p><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>&emsp;&emsp;下图是多个sqlSession请求UserMapper的二级缓存图解。<br><img src="/images/mybatis/11.5.png" alt="11.5"></p><p>&emsp;&emsp;二级缓存是mapper级别的。<br>&emsp;&emsp;第一次调用mapper下的SQL去查询用户信息。查询到的信息会存到该mapper对应的二级缓存区域内。<br>&emsp;&emsp;第二次调用相同namespace下的mapper映射文件中相同的SQL去查询用户信息。会去对应的二级缓存内取结果。<br>&emsp;&emsp;如果调用相同namespace下的mapper映射文件中的增删改SQL，并执行了commit操作。此时会清空该namespace下的二级缓存。</p><h3 id="开启二级缓存"><a href="#开启二级缓存" class="headerlink" title="开启二级缓存"></a>开启二级缓存</h3><p><strong>注：Mybatis默认是没有开启二级缓存</strong></p><ol><li>在核心配置文件SqlMapConfig.xml中加入以下内容（开启二级缓存总开关）：</li></ol><p>在settings标签中添加以下内容：</p><pre><code>&lt;!-- 开启二级缓存总开关 --&gt;    &lt;setting name=_&quot;cacheEnabled&quot;_ value=_&quot;true&quot;_/&gt;</code></pre><ol><li><p>在UserMapper映射文件中，加入以下内容，开启二级缓存：</p><cache></cache></li></ol><h3 id="实现序列化"><a href="#实现序列化" class="headerlink" title="实现序列化"></a>实现序列化</h3><p>&emsp;&emsp;由于二级缓存的数据不一定都是存储到内存中，它的存储介质多种多样，所以需要给缓存的对象执行序列化。<br>&emsp;&emsp;如果该类存在父类，那么父类也要实现序列化。<br><img src="/images/mybatis/11.6.png" alt="11.6"></p><h3 id="测试1-1"><a href="#测试1-1" class="headerlink" title="测试1"></a>测试1</h3><pre><code>//@Test    public void testTwoLevelCache() {        SqlSession sqlSession1 = sqlSessionFactory.openSession();        SqlSession sqlSession2 = sqlSessionFactory.openSession();        SqlSession sqlSession3 = sqlSessionFactory.openSession();            UserMapper mapper1 = sqlSession1.getMapper(UserMapper.class);        UserMapper mapper2 = sqlSession2.getMapper(UserMapper.class);        UserMapper mapper3 = sqlSession3.getMapper(UserMapper.class);        // 第一次查询ID为1的用户，去缓存找，找不到就去查找数据库        User user1 = mapper1.findUserById(1);        System.out.println(user1);        // 关闭SqlSession1        sqlSession1.close();            // 第二次查询ID为1的用户        User user2 = mapper2.findUserById(1);        System.out.println(user2);        // 关闭SqlSession2        sqlSession2.close();    }</code></pre><p>&emsp;SQL输出结果：<br><img src="/images/mybatis/11.7.png" alt="11.7"></p><p>&emsp;Cache Hit Radio ： 缓存命中率</p><ul><li>第一次缓存中没有记录，则命中率0.0；</li><li>第二次缓存中有记录，则命中率0.5（访问两次，有一次命中）</li></ul><h3 id="测试2-1"><a href="#测试2-1" class="headerlink" title="测试2"></a>测试2</h3><pre><code>//@Test    public void testTwoLevelCache() {        SqlSession sqlSession1 = sqlSessionFactory.openSession();        SqlSession sqlSession2 = sqlSessionFactory.openSession();        SqlSession sqlSession3 = sqlSessionFactory.openSession();          UserMapper mapper1 = sqlSession1.getMapper(UserMapper.class);        UserMapper mapper2 = sqlSession2.getMapper(UserMapper.class);        UserMapper mapper3 = sqlSession3.getMapper(UserMapper.class);        // 第一次查询ID为1的用户，去缓存找，找不到就去查找数据库        User user1 = mapper1.findUserById(1);        System.out.println(user1);        // 关闭SqlSession1        sqlSession1.close();            //修改查询出来的user1对象，作为插入语句的参数        user1.setUsername(&quot;东哥1&quot;);        user1.setAddress(&quot;清河宝盛西里&quot;);            mapper3.insertUser(user1);          // 提交事务        sqlSession3.commit();        // 关闭SqlSession3        sqlSession3.close();            // 第二次查询ID为1的用户        User user2 = mapper2.findUserById(1);        System.out.println(user2);        // 关闭SqlSession2        sqlSession2.close();    }        </code></pre><p>&emsp;SQL输出结果：<br>&emsp;&emsp;根据SQL分析，确实是清空了二级缓存了。<br><img src="/images/mybatis/11.8.png" alt="11.8"></p><h3 id="禁用二级缓存"><a href="#禁用二级缓存" class="headerlink" title="禁用二级缓存"></a>禁用二级缓存</h3><p>&emsp;&emsp;该statement中设置userCache=false，可以禁用当前select语句的二级缓存，即每次查询都是去数据库中查询，默认情况下是true，即该statement使用二级缓存。</p><pre><code>//&lt;select id=&quot;findUserById&quot; parameterType=&quot;int&quot;        resultType=&quot;cn.itcast.mybatis.po.User&quot; useCache=&quot;true&quot;&gt;    SELECT * FROM user WHERE id = #{id}&lt;/select&gt;</code></pre><h3 id="刷新二级缓存"><a href="#刷新二级缓存" class="headerlink" title="刷新二级缓存"></a>刷新二级缓存</h3><p>&emsp;&emsp;该statement中设置flushCache=true可以刷新当前的二级缓存，默认情况下如果是select语句，那么flushCache是false。如果是insert、update、delete语句，那么flushCache是true。</p><ul><li>如果查询语句设置成true，那么每次查询都是去数据库查询，即意味着该查询的二级缓存失效。</li><li>如果查询语句设置成false，即使用二级缓存，那么如果在数据库中修改了数据，而缓存数据还是原来的，这个时候就会出现脏读。<br>&emsp;flushCache设置如下：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;select id="findUserById" parameterType="int"</span></span><br><span class="line">resultType=<span class="string">"cn.itcast.mybatis.po.User"</span> useCache=<span class="string">"true"</span> flushCache=<span class="string">"true"</span>&gt;</span><br><span class="line">SELECT * FROM user WHERE id = #&#123;id&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="整合ehcache（了解）"><a href="#整合ehcache（了解）" class="headerlink" title="整合ehcache（了解）"></a>整合ehcache（了解）</h3><p>&emsp;&emsp;Ehcache是一个分布式缓存。</p><h4 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h4><p>&emsp;&emsp;系统为了提高性能，通常会对系统采用分布式部署（集群部署方式）<br><img src="/images/mybatis/11.9.png" alt="11.9"></p><p>&emsp;&emsp;不使用分布式缓存，缓存的数据在各个服务单独存储，不方便开发。所以要使用分布式缓存对缓存数据进行集中式管理。<br>&emsp;&emsp;Mybatis自身无法实现分布式缓存，需要和其它分布式缓存框架进行整合。</p><h4 id="整合思路（重点）"><a href="#整合思路（重点）" class="headerlink" title="整合思路（重点）"></a>整合思路（重点）</h4><p>Mybatis提供了一个cache接口，同时它自己有一个默认的实现类PerpetualCache。</p><p>通过实现cache接口可以实现mybatis缓存数据通过其他缓存数据库整合，mybatis的特长是sql，缓存数据管理不是mybatis的特长，为了提高mybatis的性能，所以需要mybatis和第三方缓存数据库整合，比如ehcache、memcache、redis等</p><p>&emsp;Mybatis提供接口如下：<br><img src="/images/mybatis/11.10.png" alt="11.10"></p><p>&emsp;&emsp;Mybatis的默认实现类：<br><img src="/images/mybatis/11.11.png" alt="11.11"></p><h4 id="整合ehcache的步骤"><a href="#整合ehcache的步骤" class="headerlink" title="整合ehcache的步骤"></a>整合ehcache的步骤</h4><ol><li>引入ehcache的jar包；</li><li>在mapper映射文件中，配置cache标签的type为ehcache对cache接口的实现类类型。</li><li>加入ehcache的配置文件</li></ol><h4 id="第一步：引入ehcache的jar包"><a href="#第一步：引入ehcache的jar包" class="headerlink" title="第一步：引入ehcache的jar包"></a>第一步：引入ehcache的jar包</h4><ul><li>ehcache-core-2.6.5.jar</li><li>mybatis-ehcache-1.0.2.jar</li></ul><h4 id="第二步：配置cache的type属性"><a href="#第二步：配置cache的type属性" class="headerlink" title="第二步：配置cache的type属性"></a>第二步：配置cache的type属性</h4><pre><code>&lt;!-- 使用默认二级缓存 --&gt;&lt;cache type=_&quot;org.mybatis.caches.ehcache.EhcacheCache&quot;_ /&gt;</code></pre><h4 id="第三步：添加ehcache的配置文件"><a href="#第三步：添加ehcache的配置文件" class="headerlink" title="第三步：添加ehcache的配置文件"></a>第三步：添加ehcache的配置文件</h4><p>&emsp;&emsp;在classpath下添加ehcache.xml</p><pre><code>//&lt;ehcache xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xsi:noNamespaceSchemaLocation=&quot;../config/ehcache.xsd&quot;&gt;    &lt;!-- 缓存数据要存放的磁盘地址 --&gt;    &lt;diskStore path=&quot;F:\develop\ehcache&quot; /&gt;    &lt;!-- diskStore：指定数据在磁盘中的存储位置。  defaultCache：当借助CacheManager.add(&quot;demoCache&quot;)创建Cache时，EhCache便会采用&lt;defalutCache/&gt;指定的的管理策略     以下属性是必须的：          maxElementsInMemory - 在内存中缓存的element的最大数目         maxElementsOnDisk - 在磁盘上缓存的element的最大数目，若是0表示无穷大  eternal - 设定缓存的elements是否永远不过期。如果为true，则缓存的数据始终有效，如果为false那么还要根据timeToIdleSeconds，timeToLiveSeconds判断          overflowToDisk - 设定当内存缓存溢出的时候是否将过期的element缓存到磁盘上     以下属性是可选的：          timeToIdleSeconds - 当缓存在EhCache中的数据前后两次访问的时间超过timeToIdleSeconds的属性取值时，这些数据便会删除，默认值是0,也就是可闲置时间无穷大         timeToLiveSeconds - 缓存element的有效生命期，默认是0.,也就是element存活时间无穷大         diskSpoolBufferSizeMB-这个参数设置DiskStore(磁盘缓存)的缓存区大小.默认是30MB.每个Cache都应该有自己的一个缓冲区.          diskPersistent - 在VM重启的时候是否启用磁盘保存EhCache中的数据，默认是false。         diskExpiryThreadIntervalSeconds - 磁盘缓存的清理线程运行间隔，默认是120秒。每个120s，相应的线程会进行一次EhCache中数据的清理工作         memoryStoreEvictionPolicy - 当内存缓存达到最大，有新的element加入的时候， 移除缓存中element的策略。默认是LRU（最近最少使用），可选的有LFU（最不常使用）和FIFO（先进先出） --&gt;        &lt;defaultCache maxElementsInMemory=&quot;1000&quot;        maxElementsOnDisk=&quot;10000000&quot; eternal=&quot;false&quot; overflowToDisk=&quot;false&quot;        timeToIdleSeconds=&quot;120&quot; timeToLiveSeconds=&quot;120&quot;        diskExpiryThreadIntervalSeconds=&quot;120&quot; memoryStoreEvictionPolicy=&quot;LRU&quot;&gt;    &lt;/defaultCache&gt;&lt;/ehcache&gt;</code></pre><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>&emsp;使用场景：<strong>对于访问响应速度要求高，但是实时性不高的查询，可以采用二级缓存技术</strong>。</p><p><strong>注意：在使用二级缓存的时候，要设置一下刷新间隔（cache标签中有一个flashInterval属性）来定时刷新二级缓存，这个刷新间隔根据具体需求来设置，比如设置30分钟、60分钟等，单位为毫秒。</strong></p><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><ul><li>Mybatis二级缓存对细粒度的数据级别的缓存实现不好。<br>&emsp;场景：对商品信息进行缓存，由于商品信息查询访问量大，但是要求用户每次查询都是最新的商品信息，此时如果使用二级缓存，就无法实现当一个商品发生变化只刷新该商品的缓存信息而不刷新其他商品缓存信息，因为二级缓存是mapper级别的，当一个商品的信息发送更新，所有的商品信息缓存数据都会清空。<br>&emsp;&emsp;解决此类问题，需要在业务层根据需要对数据有针对性的缓存。比如可以对经常变化的数据操作单独放到另一个namespace的mapper中。</li></ul><h1 id="mybatis与spring集成"><a href="#mybatis与spring集成" class="headerlink" title="mybatis与spring集成"></a>mybatis与spring集成</h1><h2 id="集成思路"><a href="#集成思路" class="headerlink" title="集成思路"></a>集成思路</h2><ul><li>需要spring来管理数据源信息。</li><li>需要spring通过单例方式管理SqlSessionFactory。</li><li>使用SqlSessionFactory创建SqlSession。（spring和mybatis整合自动完成）</li><li>持久层的mapper都需要由spring进行管理，spring和mybatis整合生成mapper代理对象。</li></ul><h2 id="集成步骤"><a href="#集成步骤" class="headerlink" title="集成步骤"></a>集成步骤</h2><ol><li>jar包集成；</li><li>配置文件集成（数据源）；</li><li>SqlSessionFactory集成；</li><li>Mapper接口集成；</li></ol><h2 id="开始集成"><a href="#开始集成" class="headerlink" title="开始集成"></a>开始集成</h2><h3 id="搭建工程结构"><a href="#搭建工程结构" class="headerlink" title="搭建工程结构"></a>搭建工程结构</h3><p><img src="/images/mybatis/12.1.png" alt="12.1"></p><h3 id="包集成"><a href="#包集成" class="headerlink" title="包集成"></a>包集成</h3><p>&emsp;&emsp;Jar包如下：</p><ul><li><p>Mybatis3.2.7 的jar包（mybatis核心包、依赖包）<br><img src="/images/mybatis/12.2.png" alt="12.2"></p></li><li><p>Spring3.2.0 的jar包<br><img src="/images/mybatis/12.3.png" alt="12.3"></p></li><li><p>Spring与mybatis的集成包:mybatis-spring-1.2.2.jar</p></li><li><p>数据库驱动包:mysql-connector-java-5.1.7-bin.jar</p></li><li><p>Junit包:junit-4.9.jar</p><ul><li>Dbcp连接池包<br><img src="/images/mybatis/12.4.png" alt="12.4"></li></ul></li></ul><h3 id="配置文件集成"><a href="#配置文件集成" class="headerlink" title="配置文件集成"></a>配置文件集成</h3><ul><li>注意：Mybatis的配置文件中的数据源配置去掉，由spring进行管理配置。</li></ul><h4 id="Mybatis的SqlMapConfig-xml"><a href="#Mybatis的SqlMapConfig-xml" class="headerlink" title="Mybatis的SqlMapConfig.xml"></a>Mybatis的SqlMapConfig.xml</h4><pre><code>//&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configurationPUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;           &lt;!-- 设置全局参数 --&gt;    &lt;settings&gt;        &lt;!-- lazyLoadingEnabled：延迟加载的开关，默认是false --&gt;        &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;        &lt;!-- aggressiveLazyLoading：默认为true，一旦为true上面的懒加载开关失效 --&gt;        &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;                    &lt;!-- cacheEnabled：二级缓存的总开关 默认是false--&gt;        &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;    &lt;/settings&gt;            &lt;!-- 定义别名 --&gt;    &lt;typeAliases&gt;        &lt;!-- 批量定义别名 --&gt;        &lt;!-- name：指定需要别名定义的包的名称 它的别名就是类名（类名的首字母大小写都可）--&gt;        &lt;package name=&quot;cn.itcast.ssm.po&quot;&gt;&lt;/package&gt;    &lt;/typeAliases&gt;       &lt;!-- 注意：与spring集成后，数据源和事务交给spring来管理 --&gt;            &lt;!-- 加载mapper文件 --&gt;    &lt;mappers&gt;        &lt;mapper resource=&quot;mybatis/sqlmap/User.xml&quot;&gt;&lt;/mapper&gt;        &lt;!-- 批量加载mapper            注意：mapper接口文件和mapper映射文件，名称相同，在同一个包下         --&gt;        &lt;package name=&quot;cn.itcast.mybatis.mapper&quot;/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;</code></pre><h4 id="Spring的applicationContext-xml"><a href="#Spring的applicationContext-xml" class="headerlink" title="Spring的applicationContext.xml"></a>Spring的applicationContext.xml</h4><pre><code>//&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;    xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans-3.2.xsd         http://www.springframework.org/schema/mvc         http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd         http://www.springframework.org/schema/context         http://www.springframework.org/schema/context/spring-context-3.2.xsd         http://www.springframework.org/schema/aop         http://www.springframework.org/schema/aop/spring-aop-3.2.xsd         http://www.springframework.org/schema/tx         http://www.springframework.org/schema/tx/spring-tx-3.2.xsd &quot;&gt;&lt;!-- 引用java配置文件 --&gt;&lt;context:property-placeholder location=&quot;db.properties&quot;/&gt;            &lt;!-- 配置数据源，使用dbcp连接池 --&gt;&lt;bean id=&quot;dataSource&quot; class=&quot;org.apache.commons.dbcp.BasicDataSource&quot;&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;${db.driver}&quot; /&gt;        &lt;property name=&quot;url&quot; value=&quot;${db.url}&quot; /&gt;        &lt;property name=&quot;username&quot; value=&quot;${db.username}&quot; /&gt;        &lt;property name=&quot;password&quot; value=&quot;${db.password}&quot; /&gt;        &lt;property name=&quot;maxActive&quot; value=&quot;10&quot; /&gt;        &lt;property name=&quot;maxIdle&quot; value=&quot;5&quot; /&gt;&lt;/bean&gt;&lt;/beans&gt;        </code></pre><h3 id="Spring对SqlSessionFactory进行管理配置"><a href="#Spring对SqlSessionFactory进行管理配置" class="headerlink" title="Spring对SqlSessionFactory进行管理配置"></a>Spring对SqlSessionFactory进行管理配置</h3><pre><code>&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;    &lt;!-- mybatis的配置文件路径 --&gt;    &lt;property name=&quot;configLocation&quot; value=&quot;sqlMapConfig.xml&quot;&gt;&lt;/property&gt;    &lt;!-- SqlSessionFactory需要数据源信息，之前是写在sqlmapconfig.xml，现在需要重新指定 --&gt;    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre><h3 id="Mybatis程序编写"><a href="#Mybatis程序编写" class="headerlink" title="Mybatis程序编写"></a>Mybatis程序编写</h3><h4 id="原始dao方式"><a href="#原始dao方式" class="headerlink" title="原始dao方式"></a>原始dao方式</h4><h5 id="编写dao接口"><a href="#编写dao接口" class="headerlink" title="编写dao接口"></a>编写dao接口</h5><pre><code>//public interface UserDao {    // 1、 根据用户ID来查询用户信息；    public User findUserById(int id);        // 2、 根据用户名称来模糊查询用户信息列表；    public List&lt;User&gt; findUsersByName(String name);        // 3、 添加用户；    public void insertUser(User user);}</code></pre><h5 id="编写dao实现类（继承SqlSessionDaoSupport）"><a href="#编写dao实现类（继承SqlSessionDaoSupport）" class="headerlink" title="编写dao实现类（继承SqlSessionDaoSupport）"></a>编写dao实现类（继承SqlSessionDaoSupport）</h5><pre><code>//通过this.getSqlSession()获取sqlsession。public class UserDaoImpl extends SqlSessionDaoSupport implements UserDao {        @Override    public User findUserById(int id) {            return this.getSqlSession().selectOne(&quot;test.findUserById&quot;, id);    }        }</code></pre><h5 id="编写Mapper映射文件"><a href="#编写Mapper映射文件" class="headerlink" title="编写Mapper映射文件"></a>编写Mapper映射文件</h5><p><img src="/images/mybatis/12.5.png" alt="12.5"></p><h5 id="Spring定义bean"><a href="#Spring定义bean" class="headerlink" title="Spring定义bean"></a>Spring定义bean</h5><pre><code>//&lt;!-- 由spring管理原始dao的实现 --&gt;&lt;bean id=&quot;userDao&quot; class=&quot;cn.itcast.mybatis.dao.UserDaoImpl&quot;&gt;&lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;/&gt;&lt;/bean&gt;</code></pre><h5 id="编写测试代码-8"><a href="#编写测试代码-8" class="headerlink" title="编写测试代码"></a>编写测试代码</h5><pre><code>//public class UserDaoTest {    //spring上下文    private ApplicationContext ctx;            @Before    public void setUp() throws Exception {        //读取spring的上下文，然后封装到ctx        ctx = new ClassPathXmlApplicationContext(&quot;spring/applicationContext.xml&quot;);    }        @Test    public void testFindUserById() {        //创建userdao对象        UserDao userDao = (UserDao) ctx.getBean(&quot;userDao&quot;);        //调用userdao对象的方法        User user = userDao.findUserById(1);        System.out.println(user);    }    }</code></pre><h4 id="Mapper代理方式"><a href="#Mapper代理方式" class="headerlink" title="Mapper代理方式"></a>Mapper代理方式</h4><h5 id="编写mapper接口-6"><a href="#编写mapper接口-6" class="headerlink" title="编写mapper接口"></a>编写mapper接口</h5><pre><code>public  interface UserMapper {      // 1、  根据用户ID来查询用户信息      public User findUserById(int id);    }</code></pre><h5 id="编写mapper映射文件-2"><a href="#编写mapper映射文件-2" class="headerlink" title="编写mapper映射文件"></a>编写mapper映射文件</h5><p><img src="/images/mybatis/12.6.png" alt="12.6"></p><h5 id="Spring定义bean-1"><a href="#Spring定义bean-1" class="headerlink" title="Spring定义bean"></a>Spring定义bean</h5><p>&emsp;&emsp;Mapper代理开发方式有两种bean的定义方法，一种是MapperFactoryBean，一种是MapperScannerConfigurer（推荐）。</p><h6 id="通过MapperFactoryBean创建代理对象（了解）"><a href="#通过MapperFactoryBean创建代理对象（了解）" class="headerlink" title="通过MapperFactoryBean创建代理对象（了解）"></a>通过MapperFactoryBean创建代理对象（了解）</h6><pre><code>&lt;!-- mapper代理开发方式之单个mapper配置 --&gt;&lt;bean id=&quot;userMapper&quot; class=&quot;org.mybatis.spring.mapper.MapperFactoryBean&quot;&gt;    &lt;property name=&quot;mapperInterface&quot; value=&quot;cn.itcast.mybatis.mapper.UserMapper&quot;&gt;&lt;/property&gt;    &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre><h5 id="通过MapperScannerConfigurer批量扫描创建代理对象（掌握）"><a href="#通过MapperScannerConfigurer批量扫描创建代理对象（掌握）" class="headerlink" title="通过MapperScannerConfigurer批量扫描创建代理对象（掌握）"></a>通过MapperScannerConfigurer批量扫描创建代理对象（掌握）</h5><p>&emsp;&emsp;存在问题：一个mapper定义一个bean，很麻烦。</p><pre><code>//&lt;!-- mapper代理开发方式之批量mapper配置 --&gt;&lt;!-- bean的名字默认为mapper接口类名的首字母小写 --&gt;&lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;    &lt;!-- 指定批量mapper配置的包名 --&gt;    &lt;property name=&quot;basePackage&quot; value=&quot;cn.itcast.mybatis.mapper&quot;&gt;&lt;/property&gt;    &lt;!-- 指定使用的SqlSessionFactory --&gt;    &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;&lt;/bean&gt;</code></pre><h5 id="编写测试代码-9"><a href="#编写测试代码-9" class="headerlink" title="编写测试代码"></a>编写测试代码</h5><pre><code>//private ApplicationContext ctx;    @Before    public void setUp() throws Exception {        ctx = new ClassPathXmlApplicationContext(                &quot;spring/applicationContext.xml&quot;);    }        @Test    public void testFindUserById() {        // 创建mapper对象        UserMapper userMapper = (UserMapper) ctx.getBean(&quot;userMapper&quot;);        // 调用mapper对象的方法        User user = userMapper.findUserById(1);            System.out.println(user);    }</code></pre><h1 id="Mybatis的逆向工程（会用）"><a href="#Mybatis的逆向工程（会用）" class="headerlink" title="Mybatis的逆向工程（会用）"></a>Mybatis的逆向工程（会用）</h1><h2 id="什么是逆向工程"><a href="#什么是逆向工程" class="headerlink" title="什么是逆向工程"></a>什么是逆向工程</h2><p>&emsp;&emsp;简单点说，就是通过数据库中的单表，自动生成java代码。<br>&emsp;&emsp;Mybatis官方提供了逆向工程，可以针对单表自动生成mybatis代码（mapper.java\mapper.xml\po类）<br>&emsp;&emsp;企业开发中，逆向工程是个很常用的工具。</p><h2 id="下载逆向工程"><a href="#下载逆向工程" class="headerlink" title="下载逆向工程"></a>下载逆向工程</h2><p><a href="https://github.com/mybatis/generator/releases/tag/mybatis-generator-1.3.2" target="_blank" rel="noopener">https://github.com/mybatis/generator/releases/tag/mybatis-generator-1.3.2</a></p><h2 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li>创建generator配置文件；</li><li>使用java类来执行逆向工程；</li><li>把生成的代码拷贝到项目中。</li><li>在正式项目中使用逆向工程生成的代码</li></ol><h3 id="第一步：创建generator配置文件"><a href="#第一步：创建generator配置文件" class="headerlink" title="第一步：创建generator配置文件"></a>第一步：创建generator配置文件</h3><p>&emsp;&emsp;在classpath下，创建generator.xml配置文件：（文件内容可以从逆向工程的jar包中docs目录下的index.html中找到相关代码）</p><pre><code>//&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration  PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;  &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;    &lt;generatorConfiguration&gt;    &lt;context id=&quot;testTables&quot; targetRuntime=&quot;MyBatis3&quot;&gt;        &lt;commentGenerator&gt;            &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;            &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot; /&gt;        &lt;/commentGenerator&gt;        &lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;        &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot;            connectionURL=&quot;jdbc:mysql://localhost:3306/mybatis&quot; userId=&quot;root&quot;            password=&quot;mysql&quot;&gt;        &lt;/jdbcConnection&gt;        &lt;!-- &lt;jdbcConnection driverClass=&quot;oracle.jdbc.OracleDriver&quot;            connectionURL=&quot;jdbc:oracle:thin:@127.0.0.1:1521:yycg&quot;             userId=&quot;yycg&quot;            password=&quot;yycg&quot;&gt;        &lt;/jdbcConnection&gt; --&gt;            &lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal --&gt;        &lt;javaTypeResolver&gt;            &lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot; /&gt;        &lt;/javaTypeResolver&gt;            &lt;!-- targetProject:生成PO类的位置 --&gt;        &lt;javaModelGenerator targetPackage=&quot;cn.itcast.ssm.po&quot;            targetProject=&quot;.\src&quot;&gt;            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;            &lt;!-- 从数据库返回的值被清理前后的空格 --&gt;            &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot; /&gt;        &lt;/javaModelGenerator&gt;        &lt;!-- targetProject:mapper映射文件生成的位置 --&gt;        &lt;sqlMapGenerator targetPackage=&quot;cn.itcast.ssm.mapper&quot;             targetProject=&quot;.\src&quot;&gt;            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;        &lt;/sqlMapGenerator&gt;        &lt;!-- targetPackage：mapper接口生成的位置 --&gt;        &lt;javaClientGenerator type=&quot;XMLMAPPER&quot;            targetPackage=&quot;cn.itcast.ssm.mapper&quot;             targetProject=&quot;.\src&quot;&gt;            &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;            &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot; /&gt;        &lt;/javaClientGenerator&gt;        &lt;!-- 指定数据库表 --&gt;        &lt;table tableName=&quot;items&quot;&gt;&lt;/table&gt;        &lt;table tableName=&quot;orders&quot;&gt;&lt;/table&gt;        &lt;table tableName=&quot;orderdetail&quot;&gt;&lt;/table&gt;        &lt;table tableName=&quot;user&quot;&gt;&lt;/table&gt;                    &lt;/context&gt;&lt;/generatorConfiguration&gt;</code></pre><h3 id="第二步：使用java类来执行逆向工程"><a href="#第二步：使用java类来执行逆向工程" class="headerlink" title="第二步：使用java类来执行逆向工程"></a>第二步：使用java类来执行逆向工程</h3><pre><code>//public class Generator {    /**     *@param args     */    public static void main(String[] args)  throws Exception{        List&lt;String&gt; warnings = new ArrayList&lt;String&gt;();        boolean overwrite = true;        File configFile = new File(&quot;config/generator.xml&quot;);        ConfigurationParser cp = new ConfigurationParser(warnings);        Configuration config = cp.parseConfiguration(configFile);        DefaultShellCallback callback = new DefaultShellCallback(overwrite);        MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config,                callback, warnings);        myBatisGenerator.generate(null);    }    }</code></pre><h3 id="第三步：把生成的代码拷贝到项目中"><a href="#第三步：把生成的代码拷贝到项目中" class="headerlink" title="第三步：把生成的代码拷贝到项目中"></a>第三步：把生成的代码拷贝到项目中</h3><ol><li>如果正式项目中已经有po类所在的包了，那么就只需要拷贝po类到指定包下就可以。</li><li>如果正式项目中没有po包，那么就把逆向工程中整个po类的包拷贝过去。</li><li>Mapper.xml和mapper.java的拷贝与po类一样。</li></ol><h3 id="第四步：使用生成的代码"><a href="#第四步：使用生成的代码" class="headerlink" title="第四步：使用生成的代码"></a>第四步：使用生成的代码</h3><pre><code>//public class ItemsMapperTest {        // spring上下文    private ApplicationContext ctx;        @Before    public void setUp() throws Exception {        // 读取spring的上下文，然后封装到ctx        ctx = new ClassPathXmlApplicationContext(                &quot;spring/applicationContext.xml&quot;);    }        @Test    public void testSelectByExample() {        ItemsMapper mapper = (ItemsMapper) ctx.getBean(&quot;itemsMapper&quot;);        ItemsExample example = new ItemsExample();        //使用它进行参数封装传递        Criteria criteria = example.createCriteria();        //设置参数        criteria.andNameEqualTo(&quot;背包&quot;);                    List&lt;Items&gt; list = mapper.selectByExample(example);                    System.out.println(list);    }    }                </code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>&emsp;&emsp;Mapper.xml文件已经存在时，如果进行重新生成则mapper.xml文件时，内容不被覆盖而是进行内容追加，结果导致mybatis解析失败。</p><ul><li>解决方法：删除原来已经生成的mapper.xml文件再进行生成。Mybatis自动生成的po及mapper.java文件不是内容而是直接覆盖没有此问题。</li></ul><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Struts2学习笔记</title>
      <link href="/2018/07/23/Struts2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/07/23/Struts2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<!-- build time:Tue Nov 05 2019 10:56:58 GMT+0800 (GMT+08:00) --><h1 id="知识导入"><a href="#知识导入" class="headerlink" title="知识导入"></a>知识导入</h1><h2 id="xml解析"><a href="#xml解析" class="headerlink" title="xml解析"></a>xml解析</h2><p>&emsp;&emsp; dom4j解析</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>&emsp;&emsp; 有完整类名，并且含有空参构造函数，如何创建出对象？</p><pre><code>//使用反射创建对象Class clazz = Class.forName(&quot;xxx&quot;);clazz.newInstance();</code></pre><a id="more"></a><h2 id="filter过滤器"><a href="#filter过滤器" class="headerlink" title="filter过滤器"></a>filter过滤器</h2><ul><li>过滤来自浏览器发送的请求.在请求到达访问资源之前.会先经过过滤器.</li><li>可以完成批处理. 还可以根据filterChain来决定是否放行.</li><li>也可以使用请求转发,或重定向,不让请求到目标路径.</li></ul><h2 id="自己定义一个struts-Mini"><a href="#自己定义一个struts-Mini" class="headerlink" title="自己定义一个struts-Mini"></a>自己定义一个struts-Mini</h2><p><img src="/images/struts2/struts-mini%E5%9B%BE%E8%A7%A3.png" alt="struts-mini图解"></p><h1 id="Struts2基础"><a href="#Struts2基础" class="headerlink" title="Struts2基础"></a>Struts2基础</h1><h2 id="框架相关"><a href="#框架相关" class="headerlink" title="框架相关"></a>框架相关</h2><ul><li>什么是框架？<br>&emsp; 微观：由一个一个类构成的包，包再构成框架<br>&emsp; 宏观：半成品的项目，我们需要执行什么业务时，为框架填写业务逻辑即可</li><li>三大框架：SSH=&gt;Struts,Spring,Hibernate<br>&emsp; Struts的版本：<br>&emsp;&emsp; Struts1（已经淘汰）<br>&emsp;&emsp; Struts2（我们要学的）也叫xwork。</li><li>三大框架的作用？<br>&emsp; 简化我们的开发，降低开发成本，提高开发效率<br>&emsp;Struts=&gt; WEB层框架：<br>&emsp;&emsp; 优势：<br>&emsp;&emsp; &emsp; 1.不用侵入性比较高的Servlet.可以直接写普通java类作为处理请求逻辑的处理类.这样更易于测试.<br>&emsp;&emsp; &emsp; 2.整合了一些之前需要手动来做的功能. 后台验证,表单回显,自动将表单参数封装,防止表单重复提交，如果不够用我们还可以扩展框架的功能.</li></ul><h2 id="Struts2的HelloWorld"><a href="#Struts2的HelloWorld" class="headerlink" title="Struts2的HelloWorld"></a>Struts2的HelloWorld</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//---------------------------------</span></span><br><span class="line">   <span class="comment">//cn.pinzhi.action.HelloAction</span></span><br><span class="line">   <span class="comment">//-----------------------------</span></span><br><span class="line">       <span class="keyword">package</span> cn.pinzhi.action;</span><br><span class="line">       <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAction</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>; <span class="comment">// 结果页面命名</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-----------------------------------------</span></span><br><span class="line">   <span class="comment">//src下的struts.xml</span></span><br><span class="line">   <span class="comment">//------------------------------------------</span></span><br><span class="line">   &lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">   &lt;!DOCTYPE struts PUBLIC</span><br><span class="line"><span class="string">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span></span><br><span class="line"><span class="string">"http://struts.apache.org/dtds/struts-2.3.dtd"</span>&gt;</span><br><span class="line">&lt;struts&gt;</span><br><span class="line">&lt;!-- name:单纯的给包起一个名字，不要与其他包名重复</span><br><span class="line">namespace:为action访问加上一层或多层路径</span><br><span class="line">etends：继承一个其他包，目的是引入其他包的配置</span><br><span class="line"> --&gt;</span><br><span class="line">       &lt;<span class="keyword">package</span> name=<span class="string">"hello"</span> namespace=<span class="string">"/"</span> extends=<span class="string">"struts-default"</span>&gt;</span><br><span class="line">       &lt;!--name:为action类加上一个标识，在访问时填入name名称，就可以找到action  </span><br><span class="line">       <span class="class"><span class="keyword">class</span>：<span class="title">action</span>完整类名</span></span><br><span class="line"><span class="class">       <span class="title">method</span>：处理的方法</span></span><br><span class="line"><span class="class">       --&gt;</span></span><br><span class="line"><span class="class">           &lt;<span class="title">action</span> <span class="title">name</span></span>=<span class="string">"hello"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.pinzhi.action.HelloAction"</span>  method=<span class="string">"execute"</span>&gt;</span><br><span class="line">             &lt;!--name：返回结果的标识，用于找到结果路径</span><br><span class="line">             type：可以决定跳转到结果的方式=》转发，重定向。。。</span><br><span class="line">              --&gt;</span><br><span class="line">               &lt;result name="success"&gt;/success.jsp&lt;/result&gt;</span><br><span class="line">           &lt;/action&gt;</span><br><span class="line">       &lt;/package&gt;</span><br><span class="line">   &lt;/struts&gt;</span><br><span class="line">   <span class="comment">//------------------------------------</span></span><br><span class="line">   <span class="comment">//web.xml</span></span><br><span class="line">   <span class="comment">//------------------------------------</span></span><br><span class="line">   &lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">   &lt;web-app xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> xsi:schemaLocation=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span> version=<span class="string">"3.0"</span>&gt;</span><br><span class="line">       &lt;display-name&gt;helloStruts&lt;/display-name&gt;</span><br><span class="line">        &lt;!-- 重要：配置struts2的核心过滤器 --&gt;</span><br><span class="line">        &lt;!--配置struts2的过滤器，要放到其他过滤器后面，保证其他过滤器可以执行  --&gt;</span><br><span class="line">        &lt;filter&gt;</span><br><span class="line">           &lt;filter-name&gt;struts2&lt;/filter-name&gt;</span><br><span class="line">           &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">apache</span>.<span class="title">struts2</span>.<span class="title">dispatcher</span>.<span class="title">ng</span>.<span class="title">filter</span>.<span class="title">StrutsPrepareAndExecuteFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">   &lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">   &lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">           &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">struts2</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">           &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class"> &lt;/<span class="title">web</span>-<span class="title">app</span>&gt;</span></span><br><span class="line"><span class="class"> //---------------------------</span></span><br></pre></td></tr></table></figure><h2 id="struts2的架构"><a href="#struts2的架构" class="headerlink" title="struts2的架构"></a>struts2的架构</h2><h3 id="struts2的架构图解"><a href="#struts2的架构图解" class="headerlink" title="struts2的架构图解"></a>struts2的架构图解</h3><p><img src="/images/struts2/struts2%E7%9A%84%E6%9E%B6%E6%9E%84.png" alt="struts2的架构"></p><h3 id="struts2中的6个配置文件"><a href="#struts2中的6个配置文件" class="headerlink" title="struts2中的6个配置文件"></a>struts2中的6个配置文件</h3><ol><li>default.properties ：用于配置struts 常量。例如：编码</li><li>struts-default.xml ：struts提供的默认核心配置文件，struts大部分功能都在此配置文件中。</li><li>struts-plugin.xml ： struts插件核心配置文件，struts整合其他框架或工具。</li></ol><ul><li>以上三个文件，用户自己不进行修改。</li></ul><ol><li>struts.xml ：用户自定义核心配置文件。<br>&emsp; struts.xml 可以配置所有内容，包括：常量,如：<br>&emsp;&emsp; &lt; constant name=”struts.i18n.encoding” value=”GBK”&gt; &lt; /constant&gt; //配置编码</li><li>struts.properties ： 用于自定义struts常量配置文件。一般不使用。</li><li>web.xml ：也可以配置struts常量<br>@@@注意：如果配置常量，所有的配置文件存在优先级，编号越大优先级越高。</li></ol><h3 id="常见的struts常量"><a href="#常见的struts常量" class="headerlink" title="常见的struts常量"></a>常见的struts常量</h3><ol><li>用于配置项目编码//struts.i18n.encoding=UTF-8</li><li>struts整合spring需要配置，默认注释掉了//struts.objectFactory = spring</li><li>struts默认使用文件上传解析工具：apache-commons-fileupload<br>struts.multipart.parser=jakarta</li><li>临时文件保存位置//struts.multipart.saveDir=</li><li>上传文件最大大小，默认值：2M，单位字节//struts.multipart.maxSize</li><li>用于设置action请求路径扩展名。默认：action或空。多个值使用逗号分隔//struts.action.extension=action,,<br>例如：/hello/userAction 或 /hello/userAction.action</li><li>确定是否使用动态方法调用。默认关闭的。//struts.enable.DynamicMethodInvocation = false</li><li>设置开发模式，默认关闭。如果设置true：将提供更多提示信息，自动加载文件。//struts.devMode = false</li><li>自动重新加载国际化资源文件//struts.i18n.reload = true</li><li>自动冲洗加载xml配置文件。例如：struts.xml。但不会自动加载action类。//struts.configuration.xml.reload = true</li><li>设置struts标签主题，默认值：xhtml。取值：simple。//struts.ui.theme=xhtml<br>//开发中常用simple。xhtml存在默认布局，开发中布局使用美工提供页面，布局自定义。</li></ol><h3 id="struts-xml详解"><a href="#struts-xml详解" class="headerlink" title="struts.xml详解"></a>struts.xml详解</h3><ul><li><p>&lt; constant&gt; 用于配置struts常量<br>—-name：struts提供固定常量名称。此名称从 default.properties文件获得<br>—-value：常量值<br>例如：&lt;constant name=”struts.devMode” value=”true”&gt; &lt;/constant&gt;</p></li><li><p>&lt;package&gt; struts用于管理所有action类<br>—-name：给当前包进行唯一命名，必填项。用于其他包继承的。<br>例如：struts-default.xml//&lt;package name=”struts-default” abstract=”true”&gt; //将struts已经完成的功能，作为一个包存在。名称是固定值struts-default。<br>—-namespace：action访问路径前缀。<br>例如：”/“<br>“/hello”<br>“/a/b/c”<br>“”<br>—-extends：用于继承其他包的。<br>例如：&lt;package extends=”struts-default”&gt; 当前action继承struts已经完成功能。<br>—-abstract：是否抽象，如果设置为true，表示没有具体action实现功能。(了解)</p></li><li><p>&lt;action&gt; 用于配置action类（请求处理类）<br>—-name：action名称，用于在请求路径进行访问<br>—-class：action类全限定类名<br>—-method:用于确定action类中需要执行的方法，默认值：execute</p></li><li><p>&lt;result&gt; 用于配置结果集<br>—-name：用于确定action类中，方法的返回值<br>—-text：标签体用于设置jsp路径<br>—-type:结果集类型<br>&emsp; —- dispatcher：请求转发，从一个action到jsp页面，默认值。<br>&emsp;—- redirect：重定向到jsp页面<br>&emsp;—- redirectAction：重定向到另一个action<br>&emsp;—- stream：以流的方法发送浏览器，用于文件下载。<br>&emsp;—- chain：链，在一次请求中，从一个action到另一个action</p></li><li><p>&lt;result-types&gt; 用于配置结果集类型的，一般不用，但需要看的懂。</p></li><li><p>&lt;interceptors&gt; 用于配置拦截器<br>—- &lt;interceptor&gt; 用于注册拦截器的<br>—-&lt;interceptor-stack&gt; 拦截器栈，将已经注册的拦截器组合在一起，形成一个栈。<br>例如：&lt;interceptor-stack name=”defaultStack”&gt; 声明一个拦截器栈，名称是：defaultStack</p></li><li><p>&lt;default-interceptor-ref&gt; 用于确定当前默认拦截器的<br>例如：&lt;default-interceptor-ref name=”defaultStack”/&gt; 将“defaultStack”拦截器栈，声明默认拦截器栈</p></li><li><p>&lt;default-action-ref&gt; 如果访问的action不存在，默认执行的aciton。<br>例如：/a/b/c/d/oneAction 此aciton没有配置，默认情况返回action找不到<br>!!!如果配置&lt;default-action-ref&gt; 如果存在404时，不显示action找不到，而是指定action</p></li><li><p>&lt;default-class-ref &gt; 用于配置 默认action实现类<br>例如：&lt;default-class-ref class=”com.opensymphony.xwork2.ActionSupport” /&gt;<br>!!!如果编写配置文件时没有声明class属性，及&lt;action name=””&gt; 将执行ActionSupport类。</p></li><li><p>&lt;include&gt; 将多个struts配置文件组合成一个。<br>struts.xml 入口配置文件，大家共用的。用于存放通用模块。<br>&emsp;&lt;include file=”struts-user.xml” /&gt;<br>&emsp;&lt;include file=”struts-book.xml” /&gt;<br>提供子配置文件<br>&emsp;struts-user.xml<br>&emsp;struts-book.xml</p></li></ul><h3 id="action访问"><a href="#action访问" class="headerlink" title="action访问"></a>action访问</h3><h4 id="动态方法调用"><a href="#动态方法调用" class="headerlink" title="动态方法调用"></a>动态方法调用</h4><p>格式： action名称!方法名称.action<br>例如：bookAction!add.action<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-------- jsp文件配置action入口  ----------&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/bookAction!add.action"</span>&gt;</span>动态方法调用--add<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-------- struts.xml 配置  ----------&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意：默认情况动态方法调用关闭的，必须通过struts常量进行配置。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置动态方法调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.enable.DynamicMethodInvocation"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 案例2：动态方法调用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"bookAction"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.b_demo.BookAction"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/b_demo/success.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- action类，提供两个方法</span></span><br><span class="line"><span class="comment">位置：/struts_day01/src/cn/itcast/b_demo/BookAction.java</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">public class BookAction &#123;</span><br><span class="line">public String execute()&#123;</span><br><span class="line">System.out.println("bookAction execute()");</span><br><span class="line">return "success";</span><br><span class="line">&#125;</span><br><span class="line">public String add()&#123;</span><br><span class="line">System.out.println("bookAction add()");</span><br><span class="line">return "success";</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><p><code>&lt;action name=&quot;userAction&quot;&gt;</code> , action.name可以使用通配符星号(*)，在action.class、aciton.method、result.name 处可以使用{n}方式匹配星号。</p><p>例如：</p><ul><li><p><code>userAction_*</code> 将可以通过{1}方法获得第一个星号匹配到内容。<br>请求路径<code>/userAction_add</code> ,<br><code>&lt;action name=&quot;userAction_*&quot; method=&quot;{1}&quot;&gt;</code><br>{1} 匹配的内容是add，将执行add方法</p></li><li><p><code>userAction_*_*</code>{1} 匹配第一个星；{2}匹配第二星<br>请求路径 <code>/userAction_add_success</code> ,<br><code>&lt;action name=&quot;userAction_*_*&quot; method=&quot;{1}&quot;&gt;&lt;resutl name=&quot;{2}&quot;&gt;</code><br>{1}匹配add方法，{2}匹配返回值的名称success</p></li><li><p><code>*_*_*</code> 将采用多个分别描述不同的内容，一次{1}{2}{3}获得<br>请求路径 <code>/UserAction_add_success</code><br><code>&lt;action name=&quot;*_*_*&quot; class=&quot;cn.itcast.action.{1}&quot; method=&quot;{2}&quot;&gt; &lt;result name=&quot;{3}&quot;&gt;/pages/{3}.jsp</code></p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 案例3：通配符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"personAction_*"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.c_demo.PersonAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"add"</span>&gt;</span>/c_demo/add.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"update"</span>&gt;</span>/c_demo/update.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="action访问路径"><a href="#action访问路径" class="headerlink" title="action访问路径"></a>action访问路径</h4><p>&emsp;&emsp;当默认访问一个action时，package.namespace = /a/b/c</p><ul><li>优先从”/a/b/c”namespace获得相应的aciton，</li><li>如果没有获得，将从”/a/b”中获得</li><li>如果没有获得，将从”/a”中获得</li><li>如果没有获得，将从”/“中获得</li><li>如果没有获得，将从””中获得</li></ul><h1 id="Action类与servlet-API"><a href="#Action类与servlet-API" class="headerlink" title="Action类与servlet API"></a>Action类与servlet API</h1><h2 id="Action类"><a href="#Action类" class="headerlink" title="Action类"></a>Action类</h2><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><ol><li><p>POJO类</p></li><li><p>实现Action接口<br>&emsp;&emsp;规范接口，将success (表示成功了),none(没有返回值。相当方法void。没有返回值表示没有result，常用与ajax操作。使用response发送数据),error(服务器异常),input(表示用户输入错误),login(表示需要权限)等字符串封装成相应的常量</p></li></ol><ol><li>继承ActionSupport类<br>&emsp;&emsp;ActionSupport类已经默认实现了Action(规范接口),Validateable(数据校验),ValidationAware(错误信息),TextPrivider(国际化)等接口</li></ol><h3 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>必须是public</li><li>建议有返回值，类型必须String</li><li>方法名称自定义</li><li>没有参数</li><li>需要throw Exception</li><li>非静态的<br><strong>注意：</strong>可以没有返回值，一般情况都有，可以使用return “none” 表示没有返回。</li></ol><h3 id="Struts-xml中struts-default包中的默认配置"><a href="#Struts-xml中struts-default包中的默认配置" class="headerlink" title="Struts.xml中struts-default包中的默认配置"></a>Struts.xml中struts-default包中的默认配置</h3><ul><li><p>如果不手动配置Action 默认Action如下配置:<br><code>&lt;default-class-ref class=&quot;com.opensymphony.xwork2.ActionSupport&quot; /&gt;</code></p></li><li><p>如果不配置结果的type属性,默认type属性如下配置:<br><code>&lt;result-type name=&quot;dispatcher&quot; class=&quot;org.apache.struts2.dispatcher.ServletDispatcherResult&quot; default=&quot;true&quot;/&gt;</code></p></li></ul><h2 id="访问Servlet-api"><a href="#访问Servlet-api" class="headerlink" title="访问Servlet api"></a>访问Servlet api</h2><h3 id="完全解耦，但只能操作作用域"><a href="#完全解耦，但只能操作作用域" class="headerlink" title="完全解耦，但只能操作作用域"></a>完全解耦，但只能操作作用域</h3><ul><li>不使用曾经学习过的servlet知识，可以去操作三个作用域</li><li>ActionContext 工具类，action上下文对象<br>获得实例：ActionContext.getContext()<br>-api:<br>&emsp;&emsp;ac.put(key,value) , 相当于操作request作用域。request.setAttribute(“key”,value)<br>&emsp;&emsp;ac.getSession().put(key,value) ，相当于操作session作用域。session.setAttribute(“key”,value)<br>&emsp;&emsp;ac.getApplication().put(key,value) ，相当于操作application作用域。servletContext.setAtt…</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//1 request作用域</span></span><br><span class="line">ActionContext.getContext().put(<span class="string">"ds"</span>, <span class="string">"屌丝_request"</span>);</span><br><span class="line"><span class="comment">//2 session作用域</span></span><br><span class="line">ActionContext.getContext().getSession().put(<span class="string">"ds"</span>, <span class="string">"屌丝_session"</span>);</span><br><span class="line"><span class="comment">//3 application作用域</span></span><br><span class="line">ActionContext.getContext().getApplication().put(<span class="string">"ds"</span>, <span class="string">"屌丝——application"</span>);</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="操作servlet对象"><a href="#操作servlet对象" class="headerlink" title="操作servlet对象"></a>操作servlet对象</h3><p>&emsp;ServletActionContext 工具类，获得需要servlet对象<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-api： </span><br><span class="line"> <span class="comment">// 获得request对象</span></span><br><span class="line"> HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class="line"> <span class="comment">//2 获得response对象</span></span><br><span class="line"> HttpServletResponse response = ServletActionContext.getResponse();</span><br><span class="line"> <span class="comment">//3获得servletContext对象</span></span><br><span class="line"> ServletContext servletContext = ServletActionContext.getServletContext();</span><br><span class="line"> <span class="comment">//4 获得session</span></span><br><span class="line"> HttpSession session = request.getSession();</span><br></pre></td></tr></table></figure><p></p><h3 id="通过实现接口，struts注入"><a href="#通过实现接口，struts注入" class="headerlink" title="通过实现接口，struts注入"></a>通过实现接口，struts注入</h3><ul><li>需要实现指定的接口，此接口都提供setter，struts在执行action方法之前，将调用setter方法进行赋值。<br>&emsp;ServletRequestAware //获得HttpServletRequest对象<br>&emsp;ServletResponseAware //获得HttpServletResponse对象<br>&emsp;ServletContextAware// 获得ServletContext对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5Action3</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ServletRequestAware</span> , <span class="title">ServletResponseAware</span> ,<span class="title">ServletContextAware</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line"><span class="keyword">private</span> HttpServletResponse response;</span><br><span class="line"><span class="keyword">private</span> ServletContext servletContext;</span><br><span class="line"><span class="keyword">private</span> HttpSession session;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.session = request.getSession();</span><br><span class="line"><span class="keyword">this</span>.request = request;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletResponse</span><span class="params">(HttpServletResponse response)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.response = response;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletContext</span><span class="params">(ServletContext context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.servletContext = context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="结果集与参数控制"><a href="#结果集与参数控制" class="headerlink" title="结果集与参数控制"></a>结果集与参数控制</h1><h2 id="结果集类型-Result"><a href="#结果集类型-Result" class="headerlink" title="结果集类型 Result"></a>结果集类型 Result</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- 案例 6.1 ：结果集类型,重定向jsp --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"demo6Action"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.f_demo.Demo6Action"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"redirect"</span>&gt;</span>/f_demo/type.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 案例 6.2 ：结果集类型,重定向action --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"demo6Action2"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.f_demo.Demo6Action2"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"redirectAction"</span>&gt;</span>demo6Action3<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"demo6Action3"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.f_demo.Demo6Action3"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 请求转发 ,默认值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"dispatcher"</span>&gt;</span>/f_demo/type.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="封装请求参数"><a href="#封装请求参数" class="headerlink" title="封装请求参数"></a>封装请求参数</h2><ol><li><p>属性封装</p><ul><li>只要在Action中提供与参数对应的set方法即可自动封装</li></ul></li><li><p>自动类型封装</p><ul><li>struts会自动转换8大基本数据类型和对应包装类.以及Date类型，其中date类型对数据提交格式有要求: yyyy-MM-dd</li></ul></li><li><p>容器数据封装</p><ul><li>容器：数组、List、Set、Map等</li></ul></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Jsp表单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/demo2Action"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">Map<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userMap['u001'].userName"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userMap['u001'].userPwd"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userMap['u002'].userName"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userMap['u002'].userPwd"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">List<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userList[0].userName"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userList[0].userPwd"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userList[1].userName"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userList[1].userPwd"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">Array<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%--</span> <span class="attr">request.getParameterValues</span>("<span class="attr">username</span>") <span class="attr">--</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"抽烟"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"喝酒"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"烫头"</span>/&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Action类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"><span class="comment">//封装到Map ,必须提供getter，所有封装需要使用同一个Map对象</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String,User&gt; userMap;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserMap</span><span class="params">(Map&lt;String, User&gt; userMap)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userMap = userMap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, User&gt; <span class="title">getUserMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userMap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//封装到List，必须提供getter，，所有封装需要使用同一个List对象</span></span><br><span class="line">   <span class="comment">// * List&lt;User&gt; 和 User[] 等效的</span></span><br><span class="line"><span class="keyword">private</span> List&lt;User&gt; userList;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserList</span><span class="params">(List&lt;User&gt; userList)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userList = userList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数组，不需要提供getter，直接一次性封装数据，使用String[] request.getParameterValues("hobby")</span></span><br><span class="line"><span class="keyword">private</span> String[] hobby;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobby</span><span class="params">(String[] hobby)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.hobby = hobby;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(userMap);</span><br><span class="line">System.out.println(userList);</span><br><span class="line">System.out.println(hobby);</span><br><span class="line">System.out.println(Arrays.toString(hobby));</span><br><span class="line"><span class="keyword">return</span> <span class="string">"none"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="默认支持类型转换"><a href="#默认支持类型转换" class="headerlink" title="默认支持类型转换"></a>默认支持类型转换</h3><ul><li><p>字符串 与 指定类型 之间转换<br>字符串 转成 指定类型：表单提交，浏览器发送服务器<br>指定类型 转成 字符串：标签回显，服务器发送浏览器</p></li><li><p>指定类型<br>8个基本类型、以及包装类<br>时间 Date，字符串有格式要求：yyyy-MM-dd 或 yyyy-MM-dd HH:mm:ss<br>数组、List、Map</p></li></ul><h3 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h3><h4 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h4><ul><li>方案1：实现接口：TypeConverter，有一个方法，但参数过多。</li><li>方案2：继承默认实现类：DefaultTypeConverter 。提供简洁方法convertValue(Object , Class)<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">convertValue(Object value ,  Class toType)</span><br><span class="line">#1 表单提交，浏览器发送到服务器。浏览器发送的肯定字符串String，需要转换成指定的类型。例如Date类型</span><br><span class="line">     -参数<span class="number">1</span>：value，表示浏览器发送的数据。类型是String[] ,底层使用request.getParameterValues(<span class="string">"..."</span>)</span><br><span class="line">     -参数<span class="number">2</span>：toType，表示需要转换的类型，java.uilt.Date类型</span><br><span class="line">具体操作</span><br><span class="line">   <span class="comment">// 如果toType是 Date类型，表示希望将 字符串转成 时间</span></span><br><span class="line">  <span class="keyword">if</span>(toType == java.util.Date.class)&#123;</span><br><span class="line">      <span class="comment">//获得数据</span></span><br><span class="line">      String[] params = (String[])value;</span><br><span class="line">     <span class="comment">//转成成时间</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">#2 标签回显，服务器发送 浏览器，类型之前已经从字符串转成时间，现在希望将时间再转换成 字符串。</span><br><span class="line">    -参数<span class="number">1</span>：value，表示服务器已经转成好的时间。类型Date。</span><br><span class="line">    -参数<span class="number">2</span>：toType，表示需要转换的类型，String类型</span><br><span class="line">具体操作</span><br><span class="line">  <span class="keyword">if</span>(toType == String.class)&#123;</span><br><span class="line">    <span class="comment">// 将数据强转时间</span></span><br><span class="line">    Date date = (Date)value;</span><br><span class="line">    <span class="comment">// 格式化</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/images/struts2/%E8%BD%AC%E6%8D%A2%E5%99%A8%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="转换器执行流程"></p><h3 id="注册转换器"><a href="#注册转换器" class="headerlink" title="注册转换器"></a>注册转换器</h3><ul><li>局部转换器：只对当前Action类有效。<br>—限制：只能对action类的属性进行转化，不能对javabean中属性转换</li><li>全局转换器：对所有的Action类有效。</li></ul><p><strong>注意：</strong>自定义转换器很少使用，一般情况使用默认就可以。多读</p><ol><li><p>局部转换器的创建<br>—位置：Action类同包<br>—名称：action类的类名-conversion.properties<br>—内容：属性=转换器//如birthday=cn.itcast.XXXCoverter</p></li><li><p>全局转换器的创建<br>—位置：src<br>—名称：xwork-conversion.properties<br>—内容：需要转换的类=转换器//如java.util.Data=cn.itcast.XXXConveter</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-----转换器实现-----</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">convertValue</span><span class="params">(Object value, Class toType)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy/MM/dd"</span>);</span><br><span class="line"><span class="comment">//1 浏览器发送服务器--表单提交</span></span><br><span class="line"><span class="comment">// * value : String[]</span></span><br><span class="line"><span class="comment">// * toType : Date</span></span><br><span class="line"><span class="keyword">if</span> (toType == java.util.Date.class) &#123;</span><br><span class="line"><span class="comment">// 1.1 强转，获得数据</span></span><br><span class="line">String[] paramValues = (String[]) value;</span><br><span class="line"><span class="comment">// 1.2 转成时间，返回 , 默认使用第一个</span></span><br><span class="line"><span class="keyword">return</span> dateFormat.parse(paramValues[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2 服务器发送浏览器--标签回显</span></span><br><span class="line"><span class="comment">// * value : 服务器已经转换好的数据 Date</span></span><br><span class="line"><span class="comment">// * toType : 需要类型 String</span></span><br><span class="line"><span class="keyword">if</span>(toType == String.class)&#123;</span><br><span class="line"><span class="comment">// 获得时间数据</span></span><br><span class="line">java.util.Date date = (java.util.Date)value;</span><br><span class="line"><span class="comment">// 格式化</span></span><br><span class="line"><span class="keyword">return</span> dateFormat.format(date);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行其他</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义错误信息"><a href="#自定义错误信息" class="headerlink" title="自定义错误信息"></a>自定义错误信息</h3><p>&emsp;&emsp;我们发现Struts2打印的类型转换错误信息是英文的，这说明我们需要自定义错误信息。自定义错误信息需要在Action所在目录下创建ActionName.properties文件（与Action同名的properties文件），然后在该文件中给出：invalid.fieldvalue.属性名=错误信息，其中invalid.fieldvalue是固定的。（<strong>注：若已使用前端校验，可不必配置此项</strong>）<br>&emsp;&emsp;例如：invalid.fieldvalue.person=无法将请求参数转换成Person类型！</p><h1 id="校验器与拦截器"><a href="#校验器与拦截器" class="headerlink" title="校验器与拦截器"></a>校验器与拦截器</h1><h2 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h2><h3 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h3><ul><li><p>校验分类<br>-浏览器端校验：javaScript，但不安全<br>-服务器端校验：struts校验</p></li><li><p>struts校验</p><ul><li>手动校验：编写代码，适用于需要与数据库交互</li><li>xml校验：编写配置文件，通用校验，逻辑简单。如：不能为空，长度为10等</li></ul></li></ul><h4 id="手动校验"><a href="#手动校验" class="headerlink" title="手动校验"></a>手动校验</h4><p>&emsp;&emsp;若需要手动校验，必须实现接口：validateable,它提供了一个方法validate()</p><ol><li><p>校验action中的所有方法<br>—实现接口，并实现validate()方法</p></li><li><p>校验action中的单个方法<br>-实现接口并编写方法 validate方法() , 此处“方法”表示执行的方法名称，首字母大写。<br>——例如：add() 执行前需要校验，必须编写 validateAdd()</p></li></ol><p><strong>注意：</strong>先执行“单个方法”校验，再执行“所有方法”校验</p><ul><li>提供错误提示，阻止目标方法的执行<br>—<code>this.addFieldError(&quot;&quot;, &quot;&quot;)</code>给指定的字段设置提示信息,<code>&lt;s:fielderror&gt;</code>jsp显示错误<br>— <code>this.addActionMessage(aMessage)</code> action提示提示信息,<code>&lt;s:actionmessage/&gt;</code>jsp显示错误<br>—<code>this.addActionError(anErrorMessage)</code>action错误, <code>&lt;s:actionerror/&gt;</code>jsp显示错误</li></ul><h4 id="xml校验"><a href="#xml校验" class="headerlink" title="xml校验"></a>xml校验</h4><ul><li><p>单个方法校验<br>—位置：action类同包<br>—名称：actionClass-actionName-validation.xml</p><pre><code>    &amp;emsp;&amp;emsp;actionClass ：表示action类名    &amp;emsp;&amp;emsp;actionName：表示action访问名称，及&lt;action name=&quot;...&quot;&gt;    &amp;emsp;&amp;emsp;validation.xml ：固定后缀</code></pre><p>—内容：xml必须提供约束（DTD、schema[命名空间]）</p><pre><code>  &amp;emsp;&amp;emsp;dtd文件位置：xwork-core-2.3.15.3.jar!/xwork-validator-1.0.3.dtd  &amp;emsp;&amp;emsp;dtd文件内容：</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE validators PUBLIC</span></span><br><span class="line"><span class="meta">  "-//Apache Struts//XWork Validator 1.0.3//EN"</span></span><br><span class="line"><span class="meta">  "http://struts.apache.org/dtds/xwork-validator-1.0.3.dtd"&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>所有方法校验<br>—位置：action类同包<br>—名称：actionClass-validation.xml<br>—内容：同上</p></li><li><p>struts提供的校验器<br>—校验配置文件:<code>xwork-core-2.3.15.3.jar!/com/opensymphony/xwork2/validator/validators/default.xml</code></p></li></ul><h3 id="输入校验"><a href="#输入校验" class="headerlink" title="输入校验"></a>输入校验</h3><ol><li><p>什么是输入校验？<br>&emsp;&emsp;在Action封装了请求参数后，还需要对其进行校验。例如name不能为空，age只能在18~60之间等等！我们一定要搞清楚，输入校验是在类型转换成功之后，才可能执行的。<br>校验分类：<br>&emsp;&emsp;—JavaScript客户端校验（改善用户体验）；<br>&emsp;&emsp;— 服务器端校验（保证安全性），即使用Struts2输入校验。</p></li><li><p>Struts2输入校验的分类<br>&emsp;&emsp;编程式校验；<br>&emsp;&emsp; 配置校验：<br>&emsp;&emsp;&emsp;&emsp;XML配置校验（了解）；</p></li></ol><h4 id="编程式的输入校验"><a href="#编程式的输入校验" class="headerlink" title="编程式的输入校验"></a>编程式的输入校验</h4><p>&emsp;&emsp;覆盖ActionSupport类的validate()方法，在这个方法中完成对参数的校验。validate()方法会在参数封装之后，在execute()方法之前执行。如果validate()方法中向fieldError中添加了错误信息，那么就不会再执行execute()方法，而是跳转到input结果码对应的页面。<br><img src="/images/struts2/%E6%8B%A6%E6%88%AA%E5%99%A8%E6%A0%88%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="拦截器栈执行流程"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---jsp文件中---</span></span><br><span class="line">&lt;s:fielderror /&gt;</span><br><span class="line">&lt;form action=<span class="string">"&lt;c:url value='/Demo1Action.action'/&gt;"</span> &gt;</span><br><span class="line">用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>/&gt;&lt;br/&gt;</span><br><span class="line">密　码：&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//---action.java中---</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(username == <span class="keyword">null</span> || username.trim().length() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.addFieldError(<span class="string">"username"</span>, <span class="string">"用户名不能为空"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(password == <span class="keyword">null</span> || password.trim().length() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.addFieldError(<span class="string">"password"</span>, <span class="string">"密码不能为空"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(username + <span class="string">", "</span> + password);</span><br><span class="line"><span class="keyword">return</span> NONE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在validate方法中</p><ul><li>使用addFieldError(fieldName, errorMessage)方法存入字段的错误信息.</li><li>使用addActionError(anErrorMessage)方法存入action的错误信息</li><li>使用addActionMessage(aMessage)方法存入action提示信息</li></ul></li><li><p>在页面</p><ul><li>使用<s:fielderror fieldname="xxx">取出字段的错误信息</s:fielderror></li><li>使用<s:actionerror>取出action的错误信息</s:actionerror></li><li>使用<s:actionmessage>取出action提示信息</s:actionmessage></li><li>当然如果你的页面使用了struts2提供的表单标签.表单标签会自动显示字段的错误信息</li></ul></li></ul><h4 id="xml配置方式校验（了解）"><a href="#xml配置方式校验（了解）" class="headerlink" title="xml配置方式校验（了解）"></a>xml配置方式校验（了解）</h4><p>&emsp;&emsp;使用XML配置方式是先把常用的校验规则写好，然后在XML配置中指定要使用的校验规则。当然Struts2已经帮我们写好了很多的校验规则。我们只需要指在XML文档中配置当前的请求处理方法需要哪些校验规则。</p><h5 id="校验要求"><a href="#校验要求" class="headerlink" title="校验要求"></a>校验要求</h5><p>&emsp;&emsp;要使用XML配置方式校验，你的Action类必须实现Validateable接口。ActionSupport类已经实现了Validateable接口，所以我们通常是直接继承ActionSupport类。<br>&emsp;&emsp;为属性提供getXXX()和setXXX()方法！代码校验是在Action本类中来完成校验，这说明我们可以直接使用本类的private属性，但如果使用XML配置方式校验，这需要使用校验框架的代码来完成校验工作，那么校验框架需要调用Action的getXXX()方法来获取被校验的属性，所以一定要为被校验的属性提供getXXX()方法。</p><h5 id="校验文件的创建"><a href="#校验文件的创建" class="headerlink" title="校验文件的创建"></a>校验文件的创建</h5><ol><li>校验文件的命名必须为：ActionName-validation.xml。例如LoginAction的校验文件命名为：LoginAction-validation.xml。</li><li>校验文件的路径：必须与Action在同包下。</li><li>校验文件的DTD：在xwork-core-x.x.x.jar中找到xwork-validator-x.x.x.dtd，打开它，内部会有一段DTD，我们把它copy过来，放到我们的校验文件中。校验文件的元素结果如下：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  XWork Validators DTD.</span></span><br><span class="line"><span class="comment">  Used the following DOCTYPE.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  &lt;!DOCTYPE validators PUBLIC</span></span><br><span class="line"><span class="comment">  "-//Apache Struts//XWork Validator 1.0.3//EN"</span></span><br><span class="line"><span class="comment">  "http://struts.apache.org/dtds/xwork-validator-1.0.3.dtd"&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">validators</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> name属性指定要校验的属性，例如&lt;feld name=”username”&gt;，表示要校验的属性是username属性。 </span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field-validator</span> <span class="attr">type</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            type属性指定校验规则，校验规则由Struts2提供，</span></span><br><span class="line"><span class="comment">            Struts2提供的所有校验规则在xwork-core包下的validator包中的default.xml内</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span><span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">field-validator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">validators</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&emsp;&emsp;struts2提供的校验规则(即上文提到的default.xml)：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE validators PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Apache Struts//XWork Validator Definition 1.0//EN"</span></span><br><span class="line"><span class="meta">        "http://struts.apache.org/dtds/xwork-validator-definition-1.0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- START SNIPPET: validators-default --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">validators</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"required"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.RequiredFieldValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"requiredstring"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.RequiredStringValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"int"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.IntRangeFieldValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"long"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.LongRangeFieldValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"short"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.ShortRangeFieldValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"double"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.DoubleRangeFieldValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"date"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.DateRangeFieldValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"expression"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.ExpressionValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"fieldexpression"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.FieldExpressionValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.EmailValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.URLValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"visitor"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.VisitorFieldValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"conversion"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.ConversionErrorFieldValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"stringlength"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.StringLengthFieldValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"regex"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.RegexFieldValidator"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">validator</span> <span class="attr">name</span>=<span class="string">"conditionalvisitor"</span> <span class="attr">class</span>=<span class="string">"com.opensymphony.xwork2.validator.validators.ConditionalVisitorFieldValidator"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">validators</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>&emsp;&emsp;上面文件中每个<code>&lt;validator&gt;</code>元素都是一个校验规则，校验规则对应一些已经写好的方法，他们有校验属性非空的规则，有校验字符串属性长度的规则，有校验int属性范围的规则等等。通常我们不需要自己来编写校验规范，因为上面的校验规则已经足够了。<br>&emsp;&emsp;每个规则都有自己的名字，校验文件中<code>&lt;field-validator&gt;</code>的type就是用来指定校验规则的名称。例如下面的代码是对username属性的非空校验：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">validators</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">field-validator</span> <span class="attr">type</span>=<span class="string">"requiredString"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">message</span>&gt;</span>用户名不能为空<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br><span class="line">    ……</span><br><span class="line"><span class="tag">&lt;/<span class="name">field-validator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">field</span>&gt;</span></span><br><span class="line">....</span><br><span class="line"><span class="tag">&lt;/<span class="name">validators</span>&gt;</span></span><br><span class="line">////解释如下////</span><br><span class="line">其中type=”requiredString”是校验规则的名称，它必须对应defualt.xml文件中<span class="tag">&lt;<span class="name">validator</span>&gt;</span>元素的name属性值。</span><br><span class="line">requiredString校验规则是校验字符串属性是否长度为0，如果长度为0，它会向fieldError中添加错误信息,</span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>元素指定的是错误信息。</span><br></pre></td></tr></table></figure><p></p><h5 id="常用的校验规则"><a href="#常用的校验规则" class="headerlink" title="常用的校验规则"></a>常用的校验规则</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">required：当属性为null时校验失败；</span><br><span class="line">requiredstring：当字符串属性长度为0时校验失败：</span><br><span class="line">      参数trim：默认值为true，表示去除前后空白后再校验长度。</span><br><span class="line">stringlength：当字符串长度不在指定范围内时校验失败：</span><br><span class="line">    minLength：指定字符串的最小长度；</span><br><span class="line">    maxLength：指定字符串的最大长度。</span><br><span class="line">regex：属性不能匹配正则表达式时校验失败：</span><br><span class="line">    expression：指定正则表达式；</span><br><span class="line">    caseSensitive：默认值为true，表示不忽略大小写。</span><br><span class="line">int：当int属性不在指定范围内校验失败：</span><br><span class="line">    min：最小值；</span><br><span class="line">    max：最大值。</span><br><span class="line">double：当double属性不在指定范围内校验失败：</span><br><span class="line">    min：最小值；</span><br><span class="line">    max：最大值。</span><br><span class="line">fieldexpression：属性必须是OGNL表达式：</span><br><span class="line">    expression：用来校验的ONGL表达式，例如pass == repass，其中pass和repass是两个属性名称，</span><br><span class="line">        当这两个属性的值相等时校验通过，否则失败。</span><br><span class="line">email：属性必须是合法的邮件地址；</span><br><span class="line">url：属性必须是合法的网址；</span><br><span class="line">date：属性必须是合法的日期格式。</span><br></pre></td></tr></table></figure><h4 id="校验进阶"><a href="#校验进阶" class="headerlink" title="校验进阶"></a>校验进阶</h4><h5 id="跳过指定的校验方法"><a href="#跳过指定的校验方法" class="headerlink" title="跳过指定的校验方法"></a>跳过指定的校验方法</h5><p>&emsp;&emsp;如果想跳过某个Action方法的校验,在不需要校验的Action方法上加入@SkipValidation<br>&emsp;&emsp;我们都知道，一个Action中可以存在多个请求处理方法，不同的请求处理方法应该有不同的校验逻辑，所以我们应该为每个请求处理方法提供自己独有的校验方法。而validate()方法是所有请求处理方法公共的校验方法。</p><h5 id="指定校验某个方法"><a href="#指定校验某个方法" class="headerlink" title="指定校验某个方法"></a>指定校验某个方法</h5><ul><li>public的，没有返回值，没有参数（public void xxx()）；</li><li>方法名称前缀为validate（public void validateXxx()）；</li><li>方法名后缀必须与请求处理方法名相同，例如请求处理方法为login()，那么它的私有校验方法为：public validateLogin()。<br><strong>注意，</strong>私有校验方法会在公共校验方法（validate()）之前被调用。如果你要为execute()提供私有校验方法，那么这个方法名为validateExecute()。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validateLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"validateLogin()..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validateRegist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"validateRegist()..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"validate()..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"login()"</span>);</span><br><span class="line"><span class="keyword">return</span> NONE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">regist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"regist()"</span>);</span><br><span class="line"><span class="keyword">return</span> NONE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>&emsp;&emsp;struts提供拦截器，对action类进行增强的。struts已经实现多个拦截器，完成不同的功能。<br>例如：文件上传、数据校验、类型转换、参数封装等</p><h3 id="默认拦截器栈"><a href="#默认拦截器栈" class="headerlink" title="默认拦截器栈"></a>默认拦截器栈</h3><p>&emsp;&emsp;struts-default.xml提供struts所有拦截器，也提供默认拦截器栈</p><ul><li><code>&lt;default-interceptor-ref name=&quot;defaultStack&quot;/&gt;</code> 所有的action默认使用那个拦截器栈</li><li><code>&lt;interceptor-stack name=&quot;defaultStack&quot;&gt;</code>声明一个拦截器栈，名称为“defaultStack”，通常称为：默认拦截器栈</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"exception"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"alias"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"servletConfig"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用于给action类注入Servlet api。</span></span><br><span class="line"><span class="comment">    例如：action类实现ServletRequestAware就可以被struts框架注入HttpServletRequest对象</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"i18n"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"prepare"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"chain"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"scopedModelDriven"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"modelDriven"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 调用action类的getModel()方法，获得javabean实例，如果没为null，将交予struts。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"fileUpload"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- struts默认支持文件上传 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"checkbox"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"multiselect"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"staticParams"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"actionMappingParams"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"params"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 给action类进行数据封装。如果使用ModelDriven，就给javabean封装数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"excludeParams"</span>&gt;</span>dojo\..*,^struts\..*,^session\..*,^request\..*,^application\..*,^servlet(Request|Response)\..*,parameters\...*<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"conversionError"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将转换错误添加到action类的错误提示信息中。</span></span><br><span class="line"><span class="comment">将执行 action.addFieldError("属性","错误提示"); </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"validation"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将执行action所有校验。先执行注解校验，再执行单个方法校验，最后所有方法的校验 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"excludeMethods"</span>&gt;</span>input,back,cancel,browse<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"workflow"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 从action类获得添加的错误信息，如果没有发行。如果有返回“input” </span></span><br><span class="line"><span class="comment">   方式1：默认情况，如果存在错误，返回值“input”</span></span><br><span class="line"><span class="comment">   方式2：实现接口ValidationWorkflowAware，修改整个action的错误返回结果集名称，将执行方法 getInputResultName()</span></span><br><span class="line"><span class="comment">   方式3：通过@InputConfig注解，给指定的方法配置出现错误时，返回结果result的名称。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"excludeMethods"</span>&gt;</span>input,back,cancel,browse<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"debugging"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关于workflow拦截器的补充：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法2：实现ValidationWorkflowAware接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo8Action</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> <span class="keyword">implements</span> <span class="title">ValidationWorkflowAware</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getInputResultName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"xxx"</span>;<span class="comment">//出现错误不再返回input,而是xxx,所有的方法都使用</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法3：通过@InputConfig注解</span></span><br><span class="line">    <span class="meta">@InputConfig</span>(resultName=<span class="string">"loginInput"</span>)<span class="comment">//如果登录出现异常，将返回不是input，而是loginInput</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@InputConfig</span>(resultName=<span class="string">"registerInput"</span>) <span class="comment">//如果注册出现异常，将返回不是input，而是registerInput</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h3><ul><li><p>实现接口：com.opensymphony.xwork2.interceptor.Interceptor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"><span class="comment">//拦截方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">intercept</span><span class="params">(ActionInvocation invocation)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">invocation.getAction() 获得当前action类实例</span><br><span class="line">invacation.invoke()放行</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;  &#125;</span><br></pre></td></tr></table></figure></li><li><p>继承父类：com.opensymphony.xwork2.interceptor.MethodFilterInterceptor<br>在使用自定义拦截器，可以对指定的方法进行操作（哪些方法不拦截，哪些必须拦截）<br>设置属性includeMethods，确定哪些方法进行拦截<br>设置属性excludeMethods，确定哪些方法不进行拦截</p></li><li><p><code>&lt;default-interceptor-ref name=&quot;xxx&quot;&gt;</code>将指定的拦截器，声明成默认的。<br>注意：如果使用自定义xxx，“defaultStack”将被覆盖。<br>注意：拦截器只拦截action类，不拦截jsp文件。</p></li></ul><h3 id="使用拦截器进行表单参数校验"><a href="#使用拦截器进行表单参数校验" class="headerlink" title="使用拦截器进行表单参数校验"></a>使用拦截器进行表单参数校验</h3><ul><li><p>校验流程:<br>&emsp;&emsp;Validation拦截器负责判断Action是否实现Validateable接口.如果实现就调用validate方法.<br>&emsp;&emsp;workflow拦截器判断Action是否实现ValidationAware接口. 如果实现就会判断Action中是否包含错误信息.如果包含错误信息, 停止拦截器递归调用,返回结果到名为input的结果页面中.</p></li><li><p>编程式校验<br>&emsp;&emsp;实现Validateable接口.接口中只有一个方法validate方法.我们可以在该方法中添加错误信息.<br>&emsp;&emsp;添加错误信息需要实现ValidationAware接口.该接口中有一些判断是否含有错误消息.获得错误消息.添加错误消息的方法.</p></li></ul><h3 id="拦截器的注册"><a href="#拦截器的注册" class="headerlink" title="拦截器的注册"></a>拦截器的注册</h3><p>&emsp;&emsp;注册拦截器一共分为两步：</p><ol><li>在package中声明拦截器</li><li>在action中引用拦截器<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"s8"</span> <span class="attr">namespace</span>=<span class="string">"/"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         在&lt;aciton&gt;元素中引用拦截器的顺序决定了拦截器的执行顺序，</span></span><br><span class="line"><span class="comment">         例中会先执行defaultStack中的所有拦截器，再执行MyInterceptor拦截器</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"MyInterceptor"</span> <span class="attr">class</span>=<span class="string">"cn.itcast.interceptor.MyInterceptor"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"myStack"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    struts2中，一旦为Action指定了拦截器，那么就不会再为这个Action执行默认拦截器了</span></span><br><span class="line"><span class="comment">      以我们需要在这个&lt;action&gt;元素中再引用defaultStack拦截器栈。</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"MyInterceptor"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">default-interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myStack"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"LoginAction"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span>&gt;</span>/index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--若没有将创建的拦截器指定为默认拦截器，需要加入以下语句：</span></span><br><span class="line"><span class="comment">            &lt;interceptor-ref name="defaultStack" /&gt;</span></span><br><span class="line"><span class="comment">&lt;interceptor-ref name="MyInterceptor" /&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="OGNL与struts标签"><a href="#OGNL与struts标签" class="headerlink" title="OGNL与struts标签"></a>OGNL与struts标签</h1><h1 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h1><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Struts2，ssh </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hinernate学习笔记</title>
      <link href="/2018/07/23/Hinernate%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/07/23/Hinernate%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<!-- build time:Tue Nov 05 2019 10:56:58 GMT+0800 (GMT+08:00) --><p>hibernate</p><h1 id="Hibernate初印象"><a href="#Hibernate初印象" class="headerlink" title="Hibernate初印象"></a>Hibernate初印象</h1><p>ssh执行的基本流程<br><img src="/images/ssh执行的基本流程.png" alt="ssh执行的基本流程"></p><a id="more"></a><p>hibernate执行的基本流程<br><img src="/images/hibernate%E6%89%A7%E8%A1%8C%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B.png" alt="hibernate执行的基本流程"></p><h2 id="准备文件"><a href="#准备文件" class="headerlink" title="准备文件"></a>准备文件</h2><p><strong>&emsp;download from hibernate.org:</strong><br>&emsp;&emsp; hibernate-annotation-3.4.0.GA.zip<br>&emsp;&emsp; hibernate-distrubution-3.3.2.GA-dist.zip<br>&emsp;&emsp; slf4j-1.5.8.zip</p><h1 id="暂停，先学mybatis"><a href="#暂停，先学mybatis" class="headerlink" title="暂停，先学mybatis"></a>暂停，先学mybatis</h1><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh框架学习 hibernate </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>markdown学习与文档</title>
      <link href="/2018/07/22/artical-title/"/>
      <url>/2018/07/22/artical-title/</url>
      <content type="html"><![CDATA[<!-- build time:Tue Nov 05 2019 10:56:58 GMT+0800 (GMT+08:00) --><h1 id="第一篇markdown文档"><a href="#第一篇markdown文档" class="headerlink" title="第一篇markdown文档"></a>第一篇markdown文档</h1><h2 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h2><a id="more"></a><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><h1 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h1><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><hr><blockquote><p>区块引用1</p><blockquote><p>区块引用2</p><blockquote><p>区块引用3</p><hr><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul><li>1</li><li>2</li><li>3</li></ul><ul><li>1</li><li>2</li><li>3</li></ul><hr><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ol><li>1</li><li>2</li><li>2</li><li>1</li><li>2</li></ol><hr><p>分割线</p><hr><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><pre><code>*   //两个tap代码块/8个空格+字符         int i = 0;         int j =i;</code></pre></blockquote></blockquote></blockquote><pre><code>*          </code></pre><hr><p>行<a href="https://" target="_blank" rel="noopener">内</a>链接</p><hr><p>行内<a href="http://www.baidu.com" title="参考式内容1" target="_blank" rel="noopener">参</a>考式1</p><hr><p>行内<a href="http://www.baidu.com" title="参考式内容2" target="_blank" rel="noopener">参考</a>式2</p><hr><p><em>强调1</em><br><em>强调2</em><br><strong>强调3</strong></p><hr><p>句内代码 <code>aa</code>块<br>Use the <code>printf()</code> function.</p><hr><p><img src="d:/1.jpg" alt="图片"></p><hr><p><a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a><br>普通连接</p><hr><p>转义符<br>*<br>></p><hr><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><div class="table-container"><table><thead><tr><th style="text-align:right">列1（右对齐）</th><th style="text-align:center">列2（居中）</th><th style="text-align:left">列3（左对齐）</th></tr></thead><tbody><tr><td style="text-align:right">A</td><td style="text-align:center">B</td><td style="text-align:left">C</td></tr><tr><td style="text-align:right">D</td><td style="text-align:center">E</td><td style="text-align:left">F</td></tr></tbody></table></div><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> TestDoc </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/07/22/hello-world/"/>
      <url>/2018/07/22/hello-world/</url>
      <content type="html"><![CDATA[<!-- build time:Tue Nov 05 2019 10:56:58 GMT+0800 (GMT+08:00) --><h1 id="From-Acxer"><a href="#From-Acxer" class="headerlink" title="From Acxer"></a>From Acxer</h1><h2 id="博客进展与预定事项"><a href="#博客进展与预定事项" class="headerlink" title="博客进展与预定事项"></a>博客进展与预定事项</h2><a id="more"></a><h3 id="预定事项"><a href="#预定事项" class="headerlink" title="预定事项"></a>预定事项</h3><div class="table-container"><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">事项</th><th style="text-align:center">触发条件</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">公开blog地址</td><td style="text-align:center">文章数&gt;=20</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">更新blog日志</td><td style="text-align:center">新建文章 or 文章阶段性完结 or blog架构变动</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">梳理blog</td><td style="text-align:center">每周周末</td></tr></tbody></table></div><h3 id="进展"><a href="#进展" class="headerlink" title="进展"></a>进展</h3><ul><li>添加了leancloud，不蒜子流量统计功能 2019-2-20</li></ul><h1 id="From-hexo"><a href="#From-hexo" class="headerlink" title="From hexo"></a>From hexo</h1><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><!-- rebuild by neat -->]]></content>
      
      
    </entry>
    
  
  
</search>
